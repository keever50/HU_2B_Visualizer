
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d67c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800d80c  0800d80c  0000e80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9ec  0800d9ec  0000f080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9ec  0800d9ec  0000e9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9f4  0800d9f4  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9f4  0800d9f4  0000e9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9f8  0800d9f8  0000e9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800d9fc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f080  2**0
                  CONTENTS
 10 .bss          00005430  20000080  20000080  0000f080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200054b0  200054b0  0000f080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029dc0  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005df0  00000000  00000000  00038e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021d8  00000000  00000000  0003ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a4c  00000000  00000000  00040e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007e5d  00000000  00000000  00042884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b6e6  00000000  00000000  0004a6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0d52  00000000  00000000  00075dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00156b19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000956c  00000000  00000000  00156b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001600c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7f4 	.word	0x0800d7f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800d7f4 	.word	0x0800d7f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_log_debug>:
 */

#include "log.h"

void _log_debug(const char* msg, const char *file, const char *func, int line)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b0c9      	sub	sp, #292	@ 0x124
 8000574:	af04      	add	r7, sp, #16
 8000576:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800057a:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800057e:	6020      	str	r0, [r4, #0]
 8000580:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000584:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000588:	6001      	str	r1, [r0, #0]
 800058a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800058e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000592:	600a      	str	r2, [r1, #0]
 8000594:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000598:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800059c:	6013      	str	r3, [r2, #0]
  char location_msg[0xFF];
  snprintf(location_msg, sizeof(location_msg), "\033[32m[DEBUG]\033[0m %s:%d(%s): %s\r\n", file, line, func, msg);
 800059e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005a6:	f107 0010 	add.w	r0, r7, #16
 80005aa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005ae:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	9202      	str	r2, [sp, #8]
 80005b6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005ba:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80005be:	6812      	ldr	r2, [r2, #0]
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005c6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	9200      	str	r2, [sp, #0]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <_log_debug+0x7c>)
 80005d2:	21ff      	movs	r1, #255	@ 0xff
 80005d4:	f00c fc78 	bl	800cec8 <sniprintf>
  log_out(location_msg);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f983 	bl	80008e8 <log_out>
}
 80005e2:	bf00      	nop
 80005e4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd90      	pop	{r4, r7, pc}
 80005ec:	0800d80c 	.word	0x0800d80c

080005f0 <_log_info>:

void _log_info(const char* msg, const char *file, const char *func, int line)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b0c7      	sub	sp, #284	@ 0x11c
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 80005fa:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 80005fe:	6020      	str	r0, [r4, #0]
 8000600:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000604:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000608:	6001      	str	r1, [r0, #0]
 800060a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800060e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000612:	600a      	str	r2, [r1, #0]
 8000614:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000618:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800061c:	6013      	str	r3, [r2, #0]
  char location_msg[0xFF];
  snprintf(location_msg, sizeof(location_msg), "[INFO] %s: %s\r\n", func, msg);
 800061e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000622:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000626:	f107 0010 	add.w	r0, r7, #16
 800062a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800062e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000632:	6812      	ldr	r2, [r2, #0]
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a06      	ldr	r2, [pc, #24]	@ (8000654 <_log_info+0x64>)
 800063a:	21ff      	movs	r1, #255	@ 0xff
 800063c:	f00c fc44 	bl	800cec8 <sniprintf>
  log_out(location_msg);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f94f 	bl	80008e8 <log_out>
}
 800064a:	bf00      	nop
 800064c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000650:	46bd      	mov	sp, r7
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	0800d830 	.word	0x0800d830

08000658 <_log_notice>:

void _log_notice(const char* msg, const char *file, const char *func, int line)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b0c7      	sub	sp, #284	@ 0x11c
 800065c:	af02      	add	r7, sp, #8
 800065e:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 8000662:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8000666:	6020      	str	r0, [r4, #0]
 8000668:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800066c:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000670:	6001      	str	r1, [r0, #0]
 8000672:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000676:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800067a:	600a      	str	r2, [r1, #0]
 800067c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000680:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000684:	6013      	str	r3, [r2, #0]
  char location_msg[0xFF];
  snprintf(location_msg, sizeof(location_msg), "\033[34m[NOTICE]\033[0m %s: %s\r\n", func, msg);
 8000686:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800068a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800068e:	f107 0010 	add.w	r0, r7, #16
 8000692:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000696:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800069a:	6812      	ldr	r2, [r2, #0]
 800069c:	9200      	str	r2, [sp, #0]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <_log_notice+0x64>)
 80006a2:	21ff      	movs	r1, #255	@ 0xff
 80006a4:	f00c fc10 	bl	800cec8 <sniprintf>
  log_out(location_msg);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f91b 	bl	80008e8 <log_out>
}
 80006b2:	bf00      	nop
 80006b4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	0800d840 	.word	0x0800d840

080006c0 <_log_warning>:

void _log_warning(const char* msg, const char *file, const char *func, int line)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b0c7      	sub	sp, #284	@ 0x11c
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 80006ca:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 80006ce:	6020      	str	r0, [r4, #0]
 80006d0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80006d4:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80006d8:	6001      	str	r1, [r0, #0]
 80006da:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80006de:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80006e2:	600a      	str	r2, [r1, #0]
 80006e4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80006e8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80006ec:	6013      	str	r3, [r2, #0]
  char location_msg[0xFF];
  snprintf(location_msg, sizeof(location_msg), "\033[33m[WARNING]\033[0m %s: %s\r\n", func, msg);
 80006ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006f6:	f107 0010 	add.w	r0, r7, #16
 80006fa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80006fe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000702:	6812      	ldr	r2, [r2, #0]
 8000704:	9200      	str	r2, [sp, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <_log_warning+0x64>)
 800070a:	21ff      	movs	r1, #255	@ 0xff
 800070c:	f00c fbdc 	bl	800cec8 <sniprintf>
  log_out(location_msg);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f8e7 	bl	80008e8 <log_out>
}
 800071a:	bf00      	nop
 800071c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	0800d85c 	.word	0x0800d85c

08000728 <_log_error>:

void _log_error(const char* msg, const char *file, const char *func, int line)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b0c9      	sub	sp, #292	@ 0x124
 800072c:	af04      	add	r7, sp, #16
 800072e:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 8000732:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8000736:	6020      	str	r0, [r4, #0]
 8000738:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800073c:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000740:	6001      	str	r1, [r0, #0]
 8000742:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000746:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800074a:	600a      	str	r2, [r1, #0]
 800074c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000750:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000754:	6013      	str	r3, [r2, #0]
  char location_msg[0xFF];
  snprintf(location_msg, sizeof(location_msg), "\033[31m[ERROR]\033[0m %s:%d(%s): %s\r\n", file, line, func, msg);
 8000756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800075a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800075e:	f107 0010 	add.w	r0, r7, #16
 8000762:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000766:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	9202      	str	r2, [sp, #8]
 800076e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000772:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800077e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	9200      	str	r2, [sp, #0]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <_log_error+0x7c>)
 800078a:	21ff      	movs	r1, #255	@ 0xff
 800078c:	f00c fb9c 	bl	800cec8 <sniprintf>
  log_out(location_msg);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f8a7 	bl	80008e8 <log_out>
}
 800079a:	bf00      	nop
 800079c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	0800d878 	.word	0x0800d878

080007a8 <_log_critical>:

void _log_critical(const char* msg, const char *file, const char *func, int line)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b0c9      	sub	sp, #292	@ 0x124
 80007ac:	af04      	add	r7, sp, #16
 80007ae:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 80007b2:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 80007b6:	6020      	str	r0, [r4, #0]
 80007b8:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80007bc:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80007c0:	6001      	str	r1, [r0, #0]
 80007c2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80007c6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80007ca:	600a      	str	r2, [r1, #0]
 80007cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007d0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80007d4:	6013      	str	r3, [r2, #0]
  char location_msg[0xFF];
  snprintf(location_msg, sizeof(location_msg), "\033[31m\033[5m[CRITICAL]\033[0m %s:%d(%s): %s\r\n", file, line, func, msg);
 80007d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80007de:	f107 0010 	add.w	r0, r7, #16
 80007e2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007e6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80007ea:	6812      	ldr	r2, [r2, #0]
 80007ec:	9202      	str	r2, [sp, #8]
 80007ee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007f2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	9201      	str	r2, [sp, #4]
 80007fa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007fe:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000802:	6812      	ldr	r2, [r2, #0]
 8000804:	9200      	str	r2, [sp, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <_log_critical+0x7c>)
 800080a:	21ff      	movs	r1, #255	@ 0xff
 800080c:	f00c fb5c 	bl	800cec8 <sniprintf>
  log_out(location_msg);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f867 	bl	80008e8 <log_out>
}
 800081a:	bf00      	nop
 800081c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	0800d89c 	.word	0x0800d89c

08000828 <_log>:
{

}

void _log(enum log_level lvl, const char *msg, const char *file, const char *func, int line, ...)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b0a6      	sub	sp, #152	@ 0x98
 800082c:	af00      	add	r7, sp, #0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]
  char msgbuff[LOG_MAX_MSG_SIZE];

  va_list vargs;
  va_start(vargs, line);
 8000838:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800083c:	617b      	str	r3, [r7, #20]
  vsnprintf(msgbuff, LOG_MAX_MSG_SIZE, msg, vargs);
 800083e:	f107 0018 	add.w	r0, r7, #24
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	2180      	movs	r1, #128	@ 0x80
 8000848:	f00c fb9e 	bl	800cf88 <vsniprintf>
  va_end(vargs);

  switch(lvl)
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	2b05      	cmp	r3, #5
 8000850:	d845      	bhi.n	80008de <_log+0xb6>
 8000852:	a201      	add	r2, pc, #4	@ (adr r2, 8000858 <_log+0x30>)
 8000854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000858:	08000871 	.word	0x08000871
 800085c:	08000883 	.word	0x08000883
 8000860:	08000895 	.word	0x08000895
 8000864:	080008a7 	.word	0x080008a7
 8000868:	080008b9 	.word	0x080008b9
 800086c:	080008cb 	.word	0x080008cb
  {
    case LOG_DEBUG:
      _log_debug(msgbuff, file, func, line);
 8000870:	f107 0018 	add.w	r0, r7, #24
 8000874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f7ff fe78 	bl	8000570 <_log_debug>
      break;
 8000880:	e02c      	b.n	80008dc <_log+0xb4>
    case LOG_INFO:
      _log_info(msgbuff, file, func, line);
 8000882:	f107 0018 	add.w	r0, r7, #24
 8000886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	f7ff feaf 	bl	80005f0 <_log_info>
      break;
 8000892:	e023      	b.n	80008dc <_log+0xb4>
    case LOG_NOTICE:
      _log_notice(msgbuff, file, func, line);
 8000894:	f107 0018 	add.w	r0, r7, #24
 8000898:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f7ff feda 	bl	8000658 <_log_notice>
      break;
 80008a4:	e01a      	b.n	80008dc <_log+0xb4>
    case LOG_WARNING:
      _log_warning(msgbuff, file, func, line);
 80008a6:	f107 0018 	add.w	r0, r7, #24
 80008aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	6879      	ldr	r1, [r7, #4]
 80008b2:	f7ff ff05 	bl	80006c0 <_log_warning>
      break;
 80008b6:	e011      	b.n	80008dc <_log+0xb4>
    case LOG_ERROR:
      _log_error(msgbuff, file, func, line);
 80008b8:	f107 0018 	add.w	r0, r7, #24
 80008bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f7ff ff30 	bl	8000728 <_log_error>
      break;
 80008c8:	e008      	b.n	80008dc <_log+0xb4>
    case LOG_CRITICAL:
      _log_critical(msgbuff, file, func, line);
 80008ca:	f107 0018 	add.w	r0, r7, #24
 80008ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	f7ff ff67 	bl	80007a8 <_log_critical>
      break;
 80008da:	bf00      	nop
  }


  return;
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
}
 80008e0:	3798      	adds	r7, #152	@ 0x98
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop

080008e8 <log_out>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void log_out(const char *msg)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), 500);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff fc6d 	bl	80001d0 <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	4808      	ldr	r0, [pc, #32]	@ (8000924 <log_out+0x3c>)
 8000902:	f004 fd58 	bl	80053b6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 500);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fc62 	bl	80001d0 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	b29a      	uxth	r2, r3
 8000910:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	4804      	ldr	r0, [pc, #16]	@ (8000928 <log_out+0x40>)
 8000918:	f004 fd4d 	bl	80053b6 <HAL_UART_Transmit>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000190 	.word	0x20000190
 8000928:	200001d4 	.word	0x200001d4

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f000 fe12 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f820 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f970 	bl	8000c1c <MX_GPIO_Init>
  MX_I2C1_Init();
 800093c:	f000 f886 	bl	8000a4c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000940:	f000 f8b2 	bl	8000aa8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000944:	f000 f8e0 	bl	8000b08 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000948:	f000 f93e 	bl	8000bc8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800094c:	f000 f912 	bl	8000b74 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000950:	f008 ff5a 	bl	8009808 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000954:	4a05      	ldr	r2, [pc, #20]	@ (800096c <main+0x40>)
 8000956:	2100      	movs	r1, #0
 8000958:	4805      	ldr	r0, [pc, #20]	@ (8000970 <main+0x44>)
 800095a:	f008 ff9f 	bl	800989c <osThreadNew>
 800095e:	4603      	mov	r3, r0
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <main+0x48>)
 8000962:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000964:	f008 ff74 	bl	8009850 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <main+0x3c>
 800096c:	0800d94c 	.word	0x0800d94c
 8000970:	08000f0d 	.word	0x08000f0d
 8000974:	20000218 	.word	0x20000218

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	@ 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2230      	movs	r2, #48	@ 0x30
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f00c fb0c 	bl	800cfa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <SystemClock_Config+0xcc>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	4a27      	ldr	r2, [pc, #156]	@ (8000a44 <SystemClock_Config+0xcc>)
 80009a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ac:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <SystemClock_Config+0xcc>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <SystemClock_Config+0xd0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a21      	ldr	r2, [pc, #132]	@ (8000a48 <SystemClock_Config+0xd0>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <SystemClock_Config+0xd0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009e8:	2308      	movs	r3, #8
 80009ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009f6:	2307      	movs	r3, #7
 80009f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 fb4c 	bl	800409c <HAL_RCC_OscConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a0a:	f000 faa7 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 fdad 	bl	800458c <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a38:	f000 fa90 	bl	8000f5c <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3750      	adds	r7, #80	@ 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a52:	4a13      	ldr	r2, [pc, #76]	@ (8000aa0 <MX_I2C1_Init+0x54>)
 8000a54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a58:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <MX_I2C1_Init+0x58>)
 8000a5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_I2C1_Init+0x50>)
 8000a8a:	f002 fd23 	bl	80034d4 <HAL_I2C_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f000 fa62 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000009c 	.word	0x2000009c
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	000186a0 	.word	0x000186a0

08000aa8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000aae:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <MX_I2S3_Init+0x58>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ab8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000acc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b04 <MX_I2S3_Init+0x5c>)
 8000ad2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_I2S3_Init+0x54>)
 8000ae8:	f002 fe38 	bl	800375c <HAL_I2S_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000af2:	f000 fa33 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000f0 	.word	0x200000f0
 8000b00:	40003c00 	.word	0x40003c00
 8000b04:	00017700 	.word	0x00017700

08000b08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b0e:	4a18      	ldr	r2, [pc, #96]	@ (8000b70 <MX_SPI1_Init+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b5a:	f004 f8a9 	bl	8004cb0 <HAL_SPI_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b64:	f000 f9fa 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000138 	.word	0x20000138
 8000b70:	40013000 	.word	0x40013000

08000b74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_UART4_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <MX_UART4_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_UART4_Init+0x4c>)
 8000b80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_UART4_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_UART4_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_UART4_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_UART4_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_UART4_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_UART4_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_UART4_Init+0x4c>)
 8000bac:	f004 fbb6 	bl	800531c <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f000 f9d1 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000190 	.word	0x20000190
 8000bc4:	40004c00 	.word	0x40004c00

08000bc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <MX_USART2_UART_Init+0x50>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f004 fb8c 	bl	800531c <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f9a7 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200001d4 	.word	0x200001d4
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08c      	sub	sp, #48	@ 0x30
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	4b8f      	ldr	r3, [pc, #572]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a8e      	ldr	r2, [pc, #568]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b8c      	ldr	r3, [pc, #560]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	4b88      	ldr	r3, [pc, #544]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a87      	ldr	r2, [pc, #540]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b85      	ldr	r3, [pc, #532]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b81      	ldr	r3, [pc, #516]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a80      	ldr	r2, [pc, #512]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a79      	ldr	r2, [pc, #484]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b77      	ldr	r3, [pc, #476]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b73      	ldr	r3, [pc, #460]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a72      	ldr	r2, [pc, #456]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b70      	ldr	r3, [pc, #448]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b6c      	ldr	r3, [pc, #432]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a6b      	ldr	r2, [pc, #428]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b69      	ldr	r3, [pc, #420]	@ (8000e74 <MX_GPIO_Init+0x258>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2108      	movs	r1, #8
 8000cde:	4866      	ldr	r0, [pc, #408]	@ (8000e78 <MX_GPIO_Init+0x25c>)
 8000ce0:	f000 ffb0 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4864      	ldr	r0, [pc, #400]	@ (8000e7c <MX_GPIO_Init+0x260>)
 8000cea:	f000 ffab 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000cf4:	4862      	ldr	r0, [pc, #392]	@ (8000e80 <MX_GPIO_Init+0x264>)
 8000cf6:	f000 ffa5 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000d00:	4860      	ldr	r0, [pc, #384]	@ (8000e84 <MX_GPIO_Init+0x268>)
 8000d02:	f000 ff9f 	bl	8001c44 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0c:	485b      	ldr	r0, [pc, #364]	@ (8000e7c <MX_GPIO_Init+0x260>)
 8000d0e:	f000 ff99 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d18:	485b      	ldr	r0, [pc, #364]	@ (8000e88 <MX_GPIO_Init+0x26c>)
 8000d1a:	f000 ff93 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4850      	ldr	r0, [pc, #320]	@ (8000e78 <MX_GPIO_Init+0x25c>)
 8000d36:	f000 fde9 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 8000d3a:	f240 1301 	movw	r3, #257	@ 0x101
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	484a      	ldr	r0, [pc, #296]	@ (8000e7c <MX_GPIO_Init+0x260>)
 8000d54:	f000 fdda 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	4842      	ldr	r0, [pc, #264]	@ (8000e7c <MX_GPIO_Init+0x260>)
 8000d74:	f000 fdca 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	483c      	ldr	r0, [pc, #240]	@ (8000e80 <MX_GPIO_Init+0x264>)
 8000d8e:	f000 fdbd 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 8000d92:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4835      	ldr	r0, [pc, #212]	@ (8000e80 <MX_GPIO_Init+0x264>)
 8000dac:	f000 fdae 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000db0:	2304      	movs	r3, #4
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	482f      	ldr	r0, [pc, #188]	@ (8000e80 <MX_GPIO_Init+0x264>)
 8000dc4:	f000 fda2 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000dc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dda:	2305      	movs	r3, #5
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4826      	ldr	r0, [pc, #152]	@ (8000e80 <MX_GPIO_Init+0x264>)
 8000de6:	f000 fd91 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_OverCurrent_Pin;
 8000dea:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4821      	ldr	r0, [pc, #132]	@ (8000e84 <MX_GPIO_Init+0x268>)
 8000e00:	f000 fd84 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e04:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000e08:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4819      	ldr	r0, [pc, #100]	@ (8000e84 <MX_GPIO_Init+0x268>)
 8000e1e:	f000 fd75 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 8000e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4813      	ldr	r0, [pc, #76]	@ (8000e88 <MX_GPIO_Init+0x26c>)
 8000e3c:	f000 fd66 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e44:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4808      	ldr	r0, [pc, #32]	@ (8000e78 <MX_GPIO_Init+0x25c>)
 8000e56:	f000 fd59 	bl	800190c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2105      	movs	r1, #5
 8000e5e:	2006      	movs	r0, #6
 8000e60:	f000 fc98 	bl	8001794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e64:	2006      	movs	r0, #6
 8000e66:	f000 fcb1 	bl	80017cc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3730      	adds	r7, #48	@ 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40020000 	.word	0x40020000

08000e8c <mainTask>:

/* USER CODE BEGIN 4 */
void mainTask(void *argument)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af02      	add	r7, sp, #8
 8000e92:	6078      	str	r0, [r7, #4]
	int i=0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		osDelay(1000);
 8000e98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e9c:	f008 fd90 	bl	80099c0 <osDelay>
		LOGF(LOG_NOTICE, "Logging test", 0);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	f240 230f 	movw	r3, #527	@ 0x20f
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <mainTask+0x6c>)
 8000eac:	4a13      	ldr	r2, [pc, #76]	@ (8000efc <mainTask+0x70>)
 8000eae:	4914      	ldr	r1, [pc, #80]	@ (8000f00 <mainTask+0x74>)
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fcb9 	bl	8000828 <_log>
		for(int lvl=0;lvl<=LOG_CRITICAL;lvl++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	e00e      	b.n	8000eda <mainTask+0x4e>
		{
			LOGF(lvl, "Log level %d", lvl);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	b2d8      	uxtb	r0, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	f240 2312 	movw	r3, #530	@ 0x212
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <mainTask+0x6c>)
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <mainTask+0x70>)
 8000ece:	490d      	ldr	r1, [pc, #52]	@ (8000f04 <mainTask+0x78>)
 8000ed0:	f7ff fcaa 	bl	8000828 <_log>
		for(int lvl=0;lvl<=LOG_CRITICAL;lvl++)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	dded      	ble.n	8000ebc <mainTask+0x30>
		}
		LOGF(LOG_NOTICE, "End logging test\n\n", 0);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	f44f 7305 	mov.w	r3, #532	@ 0x214
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <mainTask+0x6c>)
 8000eec:	4a03      	ldr	r2, [pc, #12]	@ (8000efc <mainTask+0x70>)
 8000eee:	4906      	ldr	r1, [pc, #24]	@ (8000f08 <mainTask+0x7c>)
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f7ff fc99 	bl	8000828 <_log>
		osDelay(1000);
 8000ef6:	e7cf      	b.n	8000e98 <mainTask+0xc>
 8000ef8:	0800d994 	.word	0x0800d994
 8000efc:	0800d8dc 	.word	0x0800d8dc
 8000f00:	0800d8f0 	.word	0x0800d8f0
 8000f04:	0800d900 	.word	0x0800d900
 8000f08:	0800d910 	.word	0x0800d910

08000f0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000f14:	f00b fc18 	bl	800c748 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  mainTaskHandle = osThreadNew(mainTask, NULL, &mainTask_attributes);
 8000f18:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <StartDefaultTask+0x20>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <StartDefaultTask+0x24>)
 8000f1e:	f008 fcbd 	bl	800989c <osThreadNew>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a03      	ldr	r2, [pc, #12]	@ (8000f34 <StartDefaultTask+0x28>)
 8000f26:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <StartDefaultTask+0x1c>
 8000f2c:	0800d970 	.word	0x0800d970
 8000f30:	08000e8d 	.word	0x08000e8d
 8000f34:	2000021c 	.word	0x2000021c

08000f38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f4a:	f000 fb27 	bl	800159c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40010000 	.word	0x40010000

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <Error_Handler+0x8>

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	4a11      	ldr	r2, [pc, #68]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	210f      	movs	r1, #15
 8000faa:	f06f 0001 	mvn.w	r0, #1
 8000fae:	f000 fbf1 	bl	8001794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	@ (8001044 <HAL_I2C_MspInit+0x84>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d12c      	bne.n	800103c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_I2C_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a17      	ldr	r2, [pc, #92]	@ (8001048 <HAL_I2C_MspInit+0x88>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_I2C_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ffe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001004:	2312      	movs	r3, #18
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001010:	2304      	movs	r3, #4
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	480c      	ldr	r0, [pc, #48]	@ (800104c <HAL_I2C_MspInit+0x8c>)
 800101c:	f000 fc76 	bl	800190c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_I2C_MspInit+0x88>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_I2C_MspInit+0x88>)
 800102a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800102e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_I2C_MspInit+0x88>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	@ 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40005400 	.word	0x40005400
 8001048:	40023800 	.word	0x40023800
 800104c:	40020400 	.word	0x40020400

08001050 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	@ 0x38
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a31      	ldr	r2, [pc, #196]	@ (8001140 <HAL_I2S_MspInit+0xf0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d15a      	bne.n	8001136 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001084:	23c0      	movs	r3, #192	@ 0xc0
 8001086:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fccd 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800109c:	f7ff ff5e 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <HAL_I2S_MspInit+0xf4>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	4a26      	ldr	r2, [pc, #152]	@ (8001144 <HAL_I2S_MspInit+0xf4>)
 80010aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b0:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <HAL_I2S_MspInit+0xf4>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <HAL_I2S_MspInit+0xf4>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001144 <HAL_I2S_MspInit+0xf4>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80010cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <HAL_I2S_MspInit+0xf4>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <HAL_I2S_MspInit+0xf4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	4a18      	ldr	r2, [pc, #96]	@ (8001144 <HAL_I2S_MspInit+0xf4>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e8:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <HAL_I2S_MspInit+0xf4>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010f4:	2310      	movs	r3, #16
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001104:	2306      	movs	r3, #6
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	480e      	ldr	r0, [pc, #56]	@ (8001148 <HAL_I2S_MspInit+0xf8>)
 8001110:	f000 fbfc 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001114:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001126:	2306      	movs	r3, #6
 8001128:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4806      	ldr	r0, [pc, #24]	@ (800114c <HAL_I2S_MspInit+0xfc>)
 8001132:	f000 fbeb 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	3738      	adds	r7, #56	@ 0x38
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40003c00 	.word	0x40003c00
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020800 	.word	0x40020800

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <HAL_SPI_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12b      	bne.n	80011ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a17      	ldr	r2, [pc, #92]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 800117c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011aa:	23e0      	movs	r3, #224	@ 0xe0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ba:	2305      	movs	r3, #5
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 80011c6:	f000 fba1 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	@ 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a3a      	ldr	r2, [pc, #232]	@ (80012e8 <HAL_UART_MspInit+0x108>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d134      	bne.n	800126c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	4a38      	ldr	r2, [pc, #224]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 800120c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001210:	6413      	str	r3, [r2, #64]	@ 0x40
 8001212:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b32      	ldr	r3, [pc, #200]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a31      	ldr	r2, [pc, #196]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b2f      	ldr	r3, [pc, #188]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800123a:	2303      	movs	r3, #3
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800124a:	2308      	movs	r3, #8
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4826      	ldr	r0, [pc, #152]	@ (80012f0 <HAL_UART_MspInit+0x110>)
 8001256:	f000 fb59 	bl	800190c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2105      	movs	r1, #5
 800125e:	2034      	movs	r0, #52	@ 0x34
 8001260:	f000 fa98 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001264:	2034      	movs	r0, #52	@ 0x34
 8001266:	f000 fab1 	bl	80017cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800126a:	e038      	b.n	80012de <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a20      	ldr	r2, [pc, #128]	@ (80012f4 <HAL_UART_MspInit+0x114>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d133      	bne.n	80012de <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	4a1b      	ldr	r2, [pc, #108]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 8001280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
 8001286:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_UART_MspInit+0x10c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ae:	230c      	movs	r3, #12
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012be:	2307      	movs	r3, #7
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <HAL_UART_MspInit+0x110>)
 80012ca:	f000 fb1f 	bl	800190c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2105      	movs	r1, #5
 80012d2:	2026      	movs	r0, #38	@ 0x26
 80012d4:	f000 fa5e 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d8:	2026      	movs	r0, #38	@ 0x26
 80012da:	f000 fa77 	bl	80017cc <HAL_NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	@ 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40004c00 	.word	0x40004c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40004400 	.word	0x40004400

080012f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	@ 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b2f      	ldr	r3, [pc, #188]	@ (80013cc <HAL_InitTick+0xd4>)
 800130e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001310:	4a2e      	ldr	r2, [pc, #184]	@ (80013cc <HAL_InitTick+0xd4>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6453      	str	r3, [r2, #68]	@ 0x44
 8001318:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <HAL_InitTick+0xd4>)
 800131a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001324:	f107 020c 	add.w	r2, r7, #12
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fb4c 	bl	80049cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001334:	f003 fb36 	bl	80049a4 <HAL_RCC_GetPCLK2Freq>
 8001338:	4603      	mov	r3, r0
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800133e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001340:	4a23      	ldr	r2, [pc, #140]	@ (80013d0 <HAL_InitTick+0xd8>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	3b01      	subs	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800134c:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <HAL_InitTick+0xdc>)
 800134e:	4a22      	ldr	r2, [pc, #136]	@ (80013d8 <HAL_InitTick+0xe0>)
 8001350:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_InitTick+0xdc>)
 8001354:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001358:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800135a:	4a1e      	ldr	r2, [pc, #120]	@ (80013d4 <HAL_InitTick+0xdc>)
 800135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001360:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <HAL_InitTick+0xdc>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <HAL_InitTick+0xdc>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <HAL_InitTick+0xdc>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001372:	4818      	ldr	r0, [pc, #96]	@ (80013d4 <HAL_InitTick+0xdc>)
 8001374:	f003 fd25 	bl	8004dc2 <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800137e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001382:	2b00      	cmp	r3, #0
 8001384:	d11b      	bne.n	80013be <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001386:	4813      	ldr	r0, [pc, #76]	@ (80013d4 <HAL_InitTick+0xdc>)
 8001388:	f003 fd74 	bl	8004e74 <HAL_TIM_Base_Start_IT>
 800138c:	4603      	mov	r3, r0
 800138e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001392:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001396:	2b00      	cmp	r3, #0
 8001398:	d111      	bne.n	80013be <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800139a:	2019      	movs	r0, #25
 800139c:	f000 fa16 	bl	80017cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	d808      	bhi.n	80013b8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80013a6:	2200      	movs	r2, #0
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	2019      	movs	r0, #25
 80013ac:	f000 f9f2 	bl	8001794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b0:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <HAL_InitTick+0xe4>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e002      	b.n	80013be <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	431bde83 	.word	0x431bde83
 80013d4:	20000220 	.word	0x20000220
 80013d8:	40010000 	.word	0x40010000
 80013dc:	20000004 	.word	0x20000004

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <NMI_Handler+0x4>

080013e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <MemManage_Handler+0x4>

080013f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <UsageFault_Handler+0x4>

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 800141a:	2001      	movs	r0, #1
 800141c:	f000 fc2c 	bl	8001c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800142a:	f003 fd93 	bl	8004f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000220 	.word	0x20000220

08001438 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <USART2_IRQHandler+0x10>)
 800143e:	f004 f84d 	bl	80054dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001d4 	.word	0x200001d4

0800144c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <UART4_IRQHandler+0x10>)
 8001452:	f004 f843 	bl	80054dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000190 	.word	0x20000190

08001460 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <OTG_FS_IRQHandler+0x10>)
 8001466:	f000 fe95 	bl	8002194 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20005064 	.word	0x20005064

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f00b fdec 	bl	800d080 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20020000 	.word	0x20020000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	20000268 	.word	0x20000268
 80014dc:	200054b0 	.word	0x200054b0

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800153c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001508:	480d      	ldr	r0, [pc, #52]	@ (8001540 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800150a:	490e      	ldr	r1, [pc, #56]	@ (8001544 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800150c:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001520:	4c0b      	ldr	r4, [pc, #44]	@ (8001550 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800152e:	f7ff ffd7 	bl	80014e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001532:	f00b fdab 	bl	800d08c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff f9f9 	bl	800092c <main>
  bx  lr    
 800153a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800153c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001548:	0800d9fc 	.word	0x0800d9fc
  ldr r2, =_sbss
 800154c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001550:	200054b0 	.word	0x200054b0

08001554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <HAL_Init+0x40>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_Init+0x40>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_Init+0x40>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 f8fc 	bl	800177e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff feb6 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fcec 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	2000026c 	.word	0x2000026c

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	2000026c 	.word	0x2000026c

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff ffee 	bl	80015c4 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffde 	bl	80015c4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	@ (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	@ (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	@ (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff4c 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a6:	f7ff ff61 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7ff ffb1 	bl	8001718 <NVIC_EncodePriority>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff80 	bl	80016c4 <__NVIC_SetPriority>
}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff54 	bl	8001688 <__NVIC_EnableIRQ>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017f6:	f7ff fee5 	bl	80015c4 <HAL_GetTick>
 80017fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d008      	beq.n	800181a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2280      	movs	r2, #128	@ 0x80
 800180c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e052      	b.n	80018c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0216 	bic.w	r2, r2, #22
 8001828:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001838:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <HAL_DMA_Abort+0x62>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0208 	bic.w	r2, r2, #8
 8001858:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186a:	e013      	b.n	8001894 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800186c:	f7ff feaa 	bl	80015c4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b05      	cmp	r3, #5
 8001878:	d90c      	bls.n	8001894 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2220      	movs	r2, #32
 800187e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e015      	b.n	80018c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1e4      	bne.n	800186c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a6:	223f      	movs	r2, #63	@ 0x3f
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d004      	beq.n	80018e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2280      	movs	r2, #128	@ 0x80
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00c      	b.n	8001900 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2205      	movs	r2, #5
 80018ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e16b      	b.n	8001c00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 815a 	bne.w	8001bfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d005      	beq.n	800195e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195a:	2b02      	cmp	r3, #2
 800195c:	d130      	bne.n	80019c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 0201 	and.w	r2, r3, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d017      	beq.n	80019fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	69b9      	ldr	r1, [r7, #24]
 8001a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80b4 	beq.w	8001bfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b60      	ldr	r3, [pc, #384]	@ (8001c18 <HAL_GPIO_Init+0x30c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	4a5f      	ldr	r2, [pc, #380]	@ (8001c18 <HAL_GPIO_Init+0x30c>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c18 <HAL_GPIO_Init+0x30c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aae:	4a5b      	ldr	r2, [pc, #364]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a52      	ldr	r2, [pc, #328]	@ (8001c20 <HAL_GPIO_Init+0x314>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d02b      	beq.n	8001b32 <HAL_GPIO_Init+0x226>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a51      	ldr	r2, [pc, #324]	@ (8001c24 <HAL_GPIO_Init+0x318>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d025      	beq.n	8001b2e <HAL_GPIO_Init+0x222>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a50      	ldr	r2, [pc, #320]	@ (8001c28 <HAL_GPIO_Init+0x31c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01f      	beq.n	8001b2a <HAL_GPIO_Init+0x21e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4f      	ldr	r2, [pc, #316]	@ (8001c2c <HAL_GPIO_Init+0x320>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d019      	beq.n	8001b26 <HAL_GPIO_Init+0x21a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c30 <HAL_GPIO_Init+0x324>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x216>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c34 <HAL_GPIO_Init+0x328>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x212>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4c      	ldr	r2, [pc, #304]	@ (8001c38 <HAL_GPIO_Init+0x32c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x20e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c3c <HAL_GPIO_Init+0x330>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x20a>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00e      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b16:	2308      	movs	r3, #8
 8001b18:	e00c      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	e00a      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b1e:	2305      	movs	r3, #5
 8001b20:	e008      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b22:	2304      	movs	r3, #4
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b26:	2303      	movs	r3, #3
 8001b28:	e004      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b32:	2300      	movs	r3, #0
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	f002 0203 	and.w	r2, r2, #3
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b44:	4935      	ldr	r1, [pc, #212]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b52:	4b3b      	ldr	r3, [pc, #236]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b76:	4a32      	ldr	r2, [pc, #200]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b7c:	4b30      	ldr	r3, [pc, #192]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba0:	4a27      	ldr	r2, [pc, #156]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba6:	4b26      	ldr	r3, [pc, #152]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bca:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf4:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	f67f ae90 	bls.w	8001928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3724      	adds	r7, #36	@ 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40013800 	.word	0x40013800
 8001c20:	40020000 	.word	0x40020000
 8001c24:	40020400 	.word	0x40020400
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020c00 	.word	0x40020c00
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40021400 	.word	0x40021400
 8001c38:	40021800 	.word	0x40021800
 8001c3c:	40021c00 	.word	0x40021c00
 8001c40:	40013c00 	.word	0x40013c00

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c60:	e003      	b.n	8001c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f806 	bl	8001ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40013c00 	.word	0x40013c00

08001ca8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc0:	b08f      	sub	sp, #60	@ 0x3c
 8001cc2:	af0a      	add	r7, sp, #40	@ 0x28
 8001cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e054      	b.n	8001d7a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f00a fd80 	bl	800c7f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 fb8a 	bl	8006428 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	687e      	ldr	r6, [r7, #4]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f106 0410 	add.w	r4, r6, #16
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d32:	1d33      	adds	r3, r6, #4
 8001d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d36:	6838      	ldr	r0, [r7, #0]
 8001d38:	f004 fb04 	bl	8006344 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 fb81 	bl	800644a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	687e      	ldr	r6, [r7, #4]
 8001d50:	466d      	mov	r5, sp
 8001d52:	f106 0410 	add.w	r4, r6, #16
 8001d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d66:	1d33      	adds	r3, r6, #4
 8001d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f004 fd0a 	bl	8006784 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d82 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d82:	b590      	push	{r4, r7, lr}
 8001d84:	b089      	sub	sp, #36	@ 0x24
 8001d86:	af04      	add	r7, sp, #16
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	4608      	mov	r0, r1
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	70fb      	strb	r3, [r7, #3]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70bb      	strb	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_HCD_HC_Init+0x28>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e076      	b.n	8001e98 <HAL_HCD_HC_Init+0x116>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	212c      	movs	r1, #44	@ 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	333d      	adds	r3, #61	@ 0x3d
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	212c      	movs	r1, #44	@ 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3338      	adds	r3, #56	@ 0x38
 8001dd2:	787a      	ldrb	r2, [r7, #1]
 8001dd4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	212c      	movs	r1, #44	@ 0x2c
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	3340      	adds	r3, #64	@ 0x40
 8001de4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001de6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	212c      	movs	r1, #44	@ 0x2c
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	3339      	adds	r3, #57	@ 0x39
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	212c      	movs	r1, #44	@ 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	333f      	adds	r3, #63	@ 0x3f
 8001e08:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	78ba      	ldrb	r2, [r7, #2]
 8001e12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e16:	b2d0      	uxtb	r0, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	212c      	movs	r1, #44	@ 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	333a      	adds	r3, #58	@ 0x3a
 8001e24:	4602      	mov	r2, r0
 8001e26:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da09      	bge.n	8001e44 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	212c      	movs	r1, #44	@ 0x2c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	333b      	adds	r3, #59	@ 0x3b
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e008      	b.n	8001e56 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	212c      	movs	r1, #44	@ 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	333b      	adds	r3, #59	@ 0x3b
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	212c      	movs	r1, #44	@ 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	333c      	adds	r3, #60	@ 0x3c
 8001e64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e68:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	787c      	ldrb	r4, [r7, #1]
 8001e70:	78ba      	ldrb	r2, [r7, #2]
 8001e72:	78f9      	ldrb	r1, [r7, #3]
 8001e74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4623      	mov	r3, r4
 8001e86:	f004 fe03 	bl	8006a90 <USB_HC_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}

08001ea0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_HCD_HC_Halt+0x1e>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e00f      	b.n	8001ede <HAL_HCD_HC_Halt+0x3e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f005 f853 	bl	8006f7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	70fb      	strb	r3, [r7, #3]
 8001efa:	460b      	mov	r3, r1
 8001efc:	70bb      	strb	r3, [r7, #2]
 8001efe:	4613      	mov	r3, r2
 8001f00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	212c      	movs	r1, #44	@ 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	333b      	adds	r3, #59	@ 0x3b
 8001f10:	78ba      	ldrb	r2, [r7, #2]
 8001f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	212c      	movs	r1, #44	@ 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	333f      	adds	r3, #63	@ 0x3f
 8001f22:	787a      	ldrb	r2, [r7, #1]
 8001f24:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f26:	7c3b      	ldrb	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d112      	bne.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	212c      	movs	r1, #44	@ 0x2c
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	3342      	adds	r3, #66	@ 0x42
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	212c      	movs	r1, #44	@ 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333d      	adds	r3, #61	@ 0x3d
 8001f4c:	7f3a      	ldrb	r2, [r7, #28]
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e008      	b.n	8001f64 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	@ 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3342      	adds	r3, #66	@ 0x42
 8001f60:	2202      	movs	r2, #2
 8001f62:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	f200 80c6 	bhi.w	80020f8 <HAL_HCD_HC_SubmitRequest+0x210>
 8001f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	080020e5 	.word	0x080020e5
 8001f7c:	08001fe9 	.word	0x08001fe9
 8001f80:	08002067 	.word	0x08002067
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f84:	7c3b      	ldrb	r3, [r7, #16]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 80b8 	bne.w	80020fc <HAL_HCD_HC_SubmitRequest+0x214>
 8001f8c:	78bb      	ldrb	r3, [r7, #2]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80b4 	bne.w	80020fc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001f94:	8b3b      	ldrh	r3, [r7, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d108      	bne.n	8001fac <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	212c      	movs	r1, #44	@ 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3355      	adds	r3, #85	@ 0x55
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	212c      	movs	r1, #44	@ 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3355      	adds	r3, #85	@ 0x55
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	212c      	movs	r1, #44	@ 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3342      	adds	r3, #66	@ 0x42
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fd2:	e093      	b.n	80020fc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	212c      	movs	r1, #44	@ 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3342      	adds	r3, #66	@ 0x42
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	701a      	strb	r2, [r3, #0]
      break;
 8001fe6:	e089      	b.n	80020fc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001fe8:	78bb      	ldrb	r3, [r7, #2]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d11d      	bne.n	800202a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	212c      	movs	r1, #44	@ 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3355      	adds	r3, #85	@ 0x55
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	212c      	movs	r1, #44	@ 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3342      	adds	r3, #66	@ 0x42
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002014:	e073      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	212c      	movs	r1, #44	@ 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3342      	adds	r3, #66	@ 0x42
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]
      break;
 8002028:	e069      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	212c      	movs	r1, #44	@ 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3354      	adds	r3, #84	@ 0x54
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	@ 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3342      	adds	r3, #66	@ 0x42
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
      break;
 8002050:	e055      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	@ 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3342      	adds	r3, #66	@ 0x42
 8002060:	2202      	movs	r2, #2
 8002062:	701a      	strb	r2, [r3, #0]
      break;
 8002064:	e04b      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002066:	78bb      	ldrb	r3, [r7, #2]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d11d      	bne.n	80020a8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	212c      	movs	r1, #44	@ 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3355      	adds	r3, #85	@ 0x55
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	212c      	movs	r1, #44	@ 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3342      	adds	r3, #66	@ 0x42
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002092:	e034      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	212c      	movs	r1, #44	@ 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3342      	adds	r3, #66	@ 0x42
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
      break;
 80020a6:	e02a      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	@ 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3354      	adds	r3, #84	@ 0x54
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	212c      	movs	r1, #44	@ 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3342      	adds	r3, #66	@ 0x42
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
      break;
 80020ce:	e016      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	212c      	movs	r1, #44	@ 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3342      	adds	r3, #66	@ 0x42
 80020de:	2202      	movs	r2, #2
 80020e0:	701a      	strb	r2, [r3, #0]
      break;
 80020e2:	e00c      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	212c      	movs	r1, #44	@ 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3342      	adds	r3, #66	@ 0x42
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80020f8:	bf00      	nop
 80020fa:	e000      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80020fc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	212c      	movs	r1, #44	@ 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3344      	adds	r3, #68	@ 0x44
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	8b3a      	ldrh	r2, [r7, #24]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	202c      	movs	r0, #44	@ 0x2c
 8002118:	fb00 f303 	mul.w	r3, r0, r3
 800211c:	440b      	add	r3, r1
 800211e:	334c      	adds	r3, #76	@ 0x4c
 8002120:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	212c      	movs	r1, #44	@ 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3360      	adds	r3, #96	@ 0x60
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	@ 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3350      	adds	r3, #80	@ 0x50
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	212c      	movs	r1, #44	@ 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3339      	adds	r3, #57	@ 0x39
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	212c      	movs	r1, #44	@ 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	3361      	adds	r3, #97	@ 0x61
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	222c      	movs	r2, #44	@ 0x2c
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	3338      	adds	r3, #56	@ 0x38
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	18d1      	adds	r1, r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	f004 fda6 	bl	8006cd4 <USB_HC_StartXfer>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop

08002194 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 faa7 	bl	80066fe <USB_GetMode>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	f040 80f6 	bne.w	80023a4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fa8b 	bl	80066d8 <USB_ReadInterrupts>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ec 	beq.w	80023a2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fa82 	bl	80066d8 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021de:	d104      	bne.n	80021ea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80021e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 fa72 	bl	80066d8 <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021fe:	d104      	bne.n	800220a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002208:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f004 fa62 	bl	80066d8 <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800221a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800221e:	d104      	bne.n	800222a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002228:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f004 fa52 	bl	80066d8 <USB_ReadInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d103      	bne.n	8002246 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2202      	movs	r2, #2
 8002244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fa44 	bl	80066d8 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800225a:	d11c      	bne.n	8002296 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002264:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002276:	2110      	movs	r1, #16
 8002278:	6938      	ldr	r0, [r7, #16]
 800227a:	f004 f933 	bl	80064e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800227e:	6938      	ldr	r0, [r7, #16]
 8002280:	f004 f964 	bl	800654c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f004 fb3a 	bl	8006904 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f00a fb2b 	bl	800c8ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f004 fa1c 	bl	80066d8 <USB_ReadInterrupts>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022aa:	d102      	bne.n	80022b2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f001 f89e 	bl	80033ee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 fa0e 	bl	80066d8 <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d106      	bne.n	80022d4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f00a faf4 	bl	800c8b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2208      	movs	r2, #8
 80022d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 f9fd 	bl	80066d8 <USB_ReadInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d101      	bne.n	80022ec <HAL_HCD_IRQHandler+0x158>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_HCD_IRQHandler+0x15a>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0210 	bic.w	r2, r2, #16
 8002300:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 ffa1 	bl	800324a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0210 	orr.w	r2, r2, #16
 8002316:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f004 f9db 	bl	80066d8 <USB_ReadInterrupts>
 8002322:	4603      	mov	r3, r0
 8002324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800232c:	d13a      	bne.n	80023a4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f004 fe10 	bl	8006f58 <USB_HC_ReadInterrupt>
 8002338:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e025      	b.n	800238c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d018      	beq.n	8002386 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002366:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800236a:	d106      	bne.n	800237a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8ab 	bl	80024ce <HCD_HC_IN_IRQHandler>
 8002378:	e005      	b.n	8002386 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4619      	mov	r1, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fbf9 	bl	8002b78 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	429a      	cmp	r2, r3
 8002394:	d3d4      	bcc.n	8002340 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800239e:	615a      	str	r2, [r3, #20]
 80023a0:	e000      	b.n	80023a4 <HAL_HCD_IRQHandler+0x210>
      return;
 80023a2:	bf00      	nop
    }
  }
}
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_HCD_Start+0x16>
 80023bc:	2302      	movs	r3, #2
 80023be:	e013      	b.n	80023e8 <HAL_HCD_Start+0x3e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 fafc 	bl	80069cc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f004 f814 	bl	8006406 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_HCD_Stop+0x16>
 8002402:	2302      	movs	r3, #2
 8002404:	e00d      	b.n	8002422 <HAL_HCD_Stop+0x32>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f004 feea 	bl	80071ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f004 fa9e 	bl	8006978 <USB_ResetPort>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	212c      	movs	r1, #44	@ 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	3360      	adds	r3, #96	@ 0x60
 8002460:	781b      	ldrb	r3, [r3, #0]
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	212c      	movs	r1, #44	@ 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3350      	adds	r3, #80	@ 0x50
 8002488:	681b      	ldr	r3, [r3, #0]
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 fae2 	bl	8006a6c <USB_GetCurrentFrame>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 fabd 	bl	8006a3e <USB_GetHostSpeed>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d11a      	bne.n	8002534 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800250a:	461a      	mov	r2, r3
 800250c:	2304      	movs	r3, #4
 800250e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	@ 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	@ 0x61
 800251e:	2206      	movs	r2, #6
 8002520:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f004 fd24 	bl	8006f7a <USB_HC_Halt>
 8002532:	e0af      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800254a:	d11b      	bne.n	8002584 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800255e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	@ 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3361      	adds	r3, #97	@ 0x61
 800256e:	2207      	movs	r2, #7
 8002570:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fcfc 	bl	8006f7a <USB_HC_Halt>
 8002582:	e087      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b20      	cmp	r3, #32
 8002598:	d109      	bne.n	80025ae <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a6:	461a      	mov	r2, r3
 80025a8:	2320      	movs	r3, #32
 80025aa:	6093      	str	r3, [r2, #8]
 80025ac:	e072      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d11a      	bne.n	80025fa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d0:	461a      	mov	r2, r3
 80025d2:	2308      	movs	r3, #8
 80025d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	212c      	movs	r1, #44	@ 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3361      	adds	r3, #97	@ 0x61
 80025e4:	2205      	movs	r2, #5
 80025e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 fcc1 	bl	8006f7a <USB_HC_Halt>
 80025f8:	e04c      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002610:	d11b      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800261e:	461a      	mov	r2, r3
 8002620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002624:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	@ 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3361      	adds	r3, #97	@ 0x61
 8002634:	2208      	movs	r2, #8
 8002636:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f004 fc99 	bl	8006f7a <USB_HC_Halt>
 8002648:	e024      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265c:	2b80      	cmp	r3, #128	@ 0x80
 800265e:	d119      	bne.n	8002694 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266c:	461a      	mov	r2, r3
 800266e:	2380      	movs	r3, #128	@ 0x80
 8002670:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	@ 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3361      	adds	r3, #97	@ 0x61
 8002680:	2206      	movs	r2, #6
 8002682:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f004 fc73 	bl	8006f7a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026aa:	d112      	bne.n	80026d2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fc5f 	bl	8006f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026ce:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026d0:	e24e      	b.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	f040 80df 	bne.w	80028a8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	@ 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3348      	adds	r3, #72	@ 0x48
 8002700:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	0159      	lsls	r1, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	440b      	add	r3, r1
 800270a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002714:	1ad2      	subs	r2, r2, r3
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	202c      	movs	r0, #44	@ 0x2c
 800271c:	fb00 f303 	mul.w	r3, r0, r3
 8002720:	440b      	add	r3, r1
 8002722:	3350      	adds	r3, #80	@ 0x50
 8002724:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	212c      	movs	r1, #44	@ 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3361      	adds	r3, #97	@ 0x61
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	212c      	movs	r1, #44	@ 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	335c      	adds	r3, #92	@ 0x5c
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	2301      	movs	r3, #1
 800275a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	212c      	movs	r1, #44	@ 0x2c
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4413      	add	r3, r2
 8002768:	333f      	adds	r3, #63	@ 0x3f
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	212c      	movs	r1, #44	@ 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	333f      	adds	r3, #63	@ 0x3f
 800277e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002780:	2b02      	cmp	r3, #2
 8002782:	d111      	bne.n	80027a8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f004 fbf3 	bl	8006f7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	2310      	movs	r3, #16
 80027a4:	6093      	str	r3, [r2, #8]
 80027a6:	e03a      	b.n	800281e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	212c      	movs	r1, #44	@ 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	333f      	adds	r3, #63	@ 0x3f
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d009      	beq.n	80027d0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	@ 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	333f      	adds	r3, #63	@ 0x3f
 80027ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d126      	bne.n	800281e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	0151      	lsls	r1, r2, #5
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	440a      	add	r2, r1
 80027e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80027ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	212c      	movs	r1, #44	@ 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3360      	adds	r3, #96	@ 0x60
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	b2d9      	uxtb	r1, r3
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	202c      	movs	r0, #44	@ 0x2c
 800280c:	fb00 f303 	mul.w	r3, r0, r3
 8002810:	4413      	add	r3, r2
 8002812:	3360      	adds	r3, #96	@ 0x60
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f00a f875 	bl	800c908 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d12b      	bne.n	800287e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	212c      	movs	r1, #44	@ 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3348      	adds	r3, #72	@ 0x48
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	202c      	movs	r0, #44	@ 0x2c
 800283c:	fb00 f202 	mul.w	r2, r0, r2
 8002840:	440a      	add	r2, r1
 8002842:	3240      	adds	r2, #64	@ 0x40
 8002844:	8812      	ldrh	r2, [r2, #0]
 8002846:	fbb3 f3f2 	udiv	r3, r3, r2
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 818e 	beq.w	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	@ 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3354      	adds	r3, #84	@ 0x54
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	f083 0301 	eor.w	r3, r3, #1
 8002868:	b2d8      	uxtb	r0, r3
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	212c      	movs	r1, #44	@ 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	3354      	adds	r3, #84	@ 0x54
 8002878:	4602      	mov	r2, r0
 800287a:	701a      	strb	r2, [r3, #0]
}
 800287c:	e178      	b.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	212c      	movs	r1, #44	@ 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3354      	adds	r3, #84	@ 0x54
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2d8      	uxtb	r0, r3
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	212c      	movs	r1, #44	@ 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3354      	adds	r3, #84	@ 0x54
 80028a2:	4602      	mov	r2, r0
 80028a4:	701a      	strb	r2, [r3, #0]
}
 80028a6:	e163      	b.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	f040 80f6 	bne.w	8002aac <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	212c      	movs	r1, #44	@ 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	3361      	adds	r3, #97	@ 0x61
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d109      	bne.n	80028e8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	212c      	movs	r1, #44	@ 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3360      	adds	r3, #96	@ 0x60
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e0c9      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	@ 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	@ 0x61
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d109      	bne.n	8002910 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	212c      	movs	r1, #44	@ 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3360      	adds	r3, #96	@ 0x60
 800290a:	2205      	movs	r2, #5
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e0b5      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	212c      	movs	r1, #44	@ 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3361      	adds	r3, #97	@ 0x61
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d009      	beq.n	8002938 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	212c      	movs	r1, #44	@ 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	@ 0x61
 8002932:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002934:	2b08      	cmp	r3, #8
 8002936:	d150      	bne.n	80029da <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	@ 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	335c      	adds	r3, #92	@ 0x5c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	202c      	movs	r0, #44	@ 0x2c
 8002950:	fb00 f303 	mul.w	r3, r0, r3
 8002954:	440b      	add	r3, r1
 8002956:	335c      	adds	r3, #92	@ 0x5c
 8002958:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	212c      	movs	r1, #44	@ 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	335c      	adds	r3, #92	@ 0x5c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d912      	bls.n	8002994 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	212c      	movs	r1, #44	@ 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	335c      	adds	r3, #92	@ 0x5c
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	212c      	movs	r1, #44	@ 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3360      	adds	r3, #96	@ 0x60
 800298e:	2204      	movs	r2, #4
 8002990:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002992:	e073      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	212c      	movs	r1, #44	@ 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3360      	adds	r3, #96	@ 0x60
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029bc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029c4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029d8:	e050      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	212c      	movs	r1, #44	@ 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3361      	adds	r3, #97	@ 0x61
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d122      	bne.n	8002a34 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	212c      	movs	r1, #44	@ 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3360      	adds	r3, #96	@ 0x60
 80029fc:	2202      	movs	r2, #2
 80029fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a16:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a1e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e023      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	@ 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3361      	adds	r3, #97	@ 0x61
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b07      	cmp	r3, #7
 8002a46:	d119      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	@ 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	335c      	adds	r3, #92	@ 0x5c
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	202c      	movs	r0, #44	@ 0x2c
 8002a60:	fb00 f303 	mul.w	r3, r0, r3
 8002a64:	440b      	add	r3, r1
 8002a66:	335c      	adds	r3, #92	@ 0x5c
 8002a68:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	212c      	movs	r1, #44	@ 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3360      	adds	r3, #96	@ 0x60
 8002a78:	2204      	movs	r2, #4
 8002a7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	b2d9      	uxtb	r1, r3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	202c      	movs	r0, #44	@ 0x2c
 8002a98:	fb00 f303 	mul.w	r3, r0, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3360      	adds	r3, #96	@ 0x60
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f009 ff2f 	bl	800c908 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aaa:	e061      	b.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d156      	bne.n	8002b70 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	212c      	movs	r1, #44	@ 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	333f      	adds	r3, #63	@ 0x3f
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d111      	bne.n	8002afa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	212c      	movs	r1, #44	@ 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	335c      	adds	r3, #92	@ 0x5c
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 fa41 	bl	8006f7a <USB_HC_Halt>
 8002af8:	e031      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	212c      	movs	r1, #44	@ 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	333f      	adds	r3, #63	@ 0x3f
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	212c      	movs	r1, #44	@ 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	333f      	adds	r3, #63	@ 0x3f
 8002b1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d11d      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	@ 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	335c      	adds	r3, #92	@ 0x5c
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d110      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	212c      	movs	r1, #44	@ 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3361      	adds	r3, #97	@ 0x61
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 fa0e 	bl	8006f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	6093      	str	r3, [r2, #8]
}
 8002b70:	bf00      	nop
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d11a      	bne.n	8002bde <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	212c      	movs	r1, #44	@ 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3361      	adds	r3, #97	@ 0x61
 8002bc8:	2206      	movs	r2, #6
 8002bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 f9cf 	bl	8006f7a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002bdc:	e331      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d12e      	bne.n	8002c52 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	2320      	movs	r3, #32
 8002c04:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	@ 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	333d      	adds	r3, #61	@ 0x3d
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 8313 	bne.w	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	@ 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	333d      	adds	r3, #61	@ 0x3d
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	@ 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3360      	adds	r3, #96	@ 0x60
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 f995 	bl	8006f7a <USB_HC_Halt>
}
 8002c50:	e2f7      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c68:	d112      	bne.n	8002c90 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c76:	461a      	mov	r2, r3
 8002c78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 f976 	bl	8006f7a <USB_HC_Halt>
}
 8002c8e:	e2d8      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d140      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	212c      	movs	r1, #44	@ 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	335c      	adds	r3, #92	@ 0x5c
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cca:	2b40      	cmp	r3, #64	@ 0x40
 8002ccc:	d111      	bne.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	@ 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	333d      	adds	r3, #61	@ 0x3d
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cec:	461a      	mov	r2, r3
 8002cee:	2340      	movs	r3, #64	@ 0x40
 8002cf0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2301      	movs	r3, #1
 8002d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	@ 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	@ 0x61
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f004 f92a 	bl	8006f7a <USB_HC_Halt>
}
 8002d26:	e28c      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3a:	2b40      	cmp	r3, #64	@ 0x40
 8002d3c:	d12c      	bne.n	8002d98 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	212c      	movs	r1, #44	@ 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3361      	adds	r3, #97	@ 0x61
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	212c      	movs	r1, #44	@ 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	333d      	adds	r3, #61	@ 0x3d
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	212c      	movs	r1, #44	@ 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	335c      	adds	r3, #92	@ 0x5c
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 f8fb 	bl	8006f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d90:	461a      	mov	r2, r3
 8002d92:	2340      	movs	r3, #64	@ 0x40
 8002d94:	6093      	str	r3, [r2, #8]
}
 8002d96:	e254      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d11a      	bne.n	8002de4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	212c      	movs	r1, #44	@ 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3361      	adds	r3, #97	@ 0x61
 8002dce:	2205      	movs	r2, #5
 8002dd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f004 f8cc 	bl	8006f7a <USB_HC_Halt>
}
 8002de2:	e22e      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d140      	bne.n	8002e7c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	212c      	movs	r1, #44	@ 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	335c      	adds	r3, #92	@ 0x5c
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	@ 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3361      	adds	r3, #97	@ 0x61
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	212c      	movs	r1, #44	@ 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	333d      	adds	r3, #61	@ 0x3d
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d112      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	@ 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	333c      	adds	r3, #60	@ 0x3c
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	212c      	movs	r1, #44	@ 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	333d      	adds	r3, #61	@ 0x3d
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 f889 	bl	8006f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	2310      	movs	r3, #16
 8002e78:	6093      	str	r3, [r2, #8]
}
 8002e7a:	e1e2      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8e:	2b80      	cmp	r3, #128	@ 0x80
 8002e90:	d164      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d111      	bne.n	8002ebe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	@ 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3361      	adds	r3, #97	@ 0x61
 8002ea8:	2206      	movs	r2, #6
 8002eaa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f004 f85f 	bl	8006f7a <USB_HC_Halt>
 8002ebc:	e044      	b.n	8002f48 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	212c      	movs	r1, #44	@ 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	335c      	adds	r3, #92	@ 0x5c
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	202c      	movs	r0, #44	@ 0x2c
 8002ed6:	fb00 f303 	mul.w	r3, r0, r3
 8002eda:	440b      	add	r3, r1
 8002edc:	335c      	adds	r3, #92	@ 0x5c
 8002ede:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	@ 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	335c      	adds	r3, #92	@ 0x5c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d920      	bls.n	8002f36 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	@ 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	335c      	adds	r3, #92	@ 0x5c
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	@ 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3360      	adds	r3, #96	@ 0x60
 8002f14:	2204      	movs	r2, #4
 8002f16:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	b2d9      	uxtb	r1, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	202c      	movs	r0, #44	@ 0x2c
 8002f22:	fb00 f303 	mul.w	r3, r0, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3360      	adds	r3, #96	@ 0x60
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f009 fcea 	bl	800c908 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f34:	e008      	b.n	8002f48 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	212c      	movs	r1, #44	@ 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3360      	adds	r3, #96	@ 0x60
 8002f44:	2202      	movs	r2, #2
 8002f46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	2380      	movs	r3, #128	@ 0x80
 8002f58:	6093      	str	r3, [r2, #8]
}
 8002f5a:	e172      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f72:	d11b      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	212c      	movs	r1, #44	@ 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3361      	adds	r3, #97	@ 0x61
 8002f82:	2208      	movs	r2, #8
 8002f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 fff2 	bl	8006f7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fa8:	6093      	str	r3, [r2, #8]
}
 8002faa:	e14a      	b.n	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	f040 813f 	bne.w	8003242 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	212c      	movs	r1, #44	@ 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3361      	adds	r3, #97	@ 0x61
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d17d      	bne.n	80030d4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	212c      	movs	r1, #44	@ 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3360      	adds	r3, #96	@ 0x60
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	@ 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	333f      	adds	r3, #63	@ 0x3f
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d00a      	beq.n	8003014 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	@ 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	333f      	adds	r3, #63	@ 0x3f
 800300c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800300e:	2b03      	cmp	r3, #3
 8003010:	f040 8100 	bne.w	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d113      	bne.n	8003044 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	212c      	movs	r1, #44	@ 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3355      	adds	r3, #85	@ 0x55
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	f083 0301 	eor.w	r3, r3, #1
 8003030:	b2d8      	uxtb	r0, r3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	212c      	movs	r1, #44	@ 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3355      	adds	r3, #85	@ 0x55
 8003040:	4602      	mov	r2, r0
 8003042:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b01      	cmp	r3, #1
 800304a:	f040 80e3 	bne.w	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	@ 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	334c      	adds	r3, #76	@ 0x4c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80d8 	beq.w	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	212c      	movs	r1, #44	@ 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	334c      	adds	r3, #76	@ 0x4c
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	202c      	movs	r0, #44	@ 0x2c
 800307a:	fb00 f202 	mul.w	r2, r0, r2
 800307e:	440a      	add	r2, r1
 8003080:	3240      	adds	r2, #64	@ 0x40
 8003082:	8812      	ldrh	r2, [r2, #0]
 8003084:	4413      	add	r3, r2
 8003086:	3b01      	subs	r3, #1
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	202c      	movs	r0, #44	@ 0x2c
 800308e:	fb00 f202 	mul.w	r2, r0, r2
 8003092:	440a      	add	r2, r1
 8003094:	3240      	adds	r2, #64	@ 0x40
 8003096:	8812      	ldrh	r2, [r2, #0]
 8003098:	fbb3 f3f2 	udiv	r3, r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80b5 	beq.w	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	212c      	movs	r1, #44	@ 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3355      	adds	r3, #85	@ 0x55
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	f083 0301 	eor.w	r3, r3, #1
 80030be:	b2d8      	uxtb	r0, r3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	212c      	movs	r1, #44	@ 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3355      	adds	r3, #85	@ 0x55
 80030ce:	4602      	mov	r2, r0
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e09f      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	212c      	movs	r1, #44	@ 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3361      	adds	r3, #97	@ 0x61
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d109      	bne.n	80030fc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	212c      	movs	r1, #44	@ 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3360      	adds	r3, #96	@ 0x60
 80030f6:	2202      	movs	r2, #2
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e08b      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	212c      	movs	r1, #44	@ 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	3361      	adds	r3, #97	@ 0x61
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d109      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	212c      	movs	r1, #44	@ 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	3360      	adds	r3, #96	@ 0x60
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e077      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	212c      	movs	r1, #44	@ 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3361      	adds	r3, #97	@ 0x61
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b05      	cmp	r3, #5
 8003136:	d109      	bne.n	800314c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	@ 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3360      	adds	r3, #96	@ 0x60
 8003146:	2205      	movs	r2, #5
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e063      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	212c      	movs	r1, #44	@ 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3361      	adds	r3, #97	@ 0x61
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d009      	beq.n	8003174 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	212c      	movs	r1, #44	@ 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	3361      	adds	r3, #97	@ 0x61
 800316e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003170:	2b08      	cmp	r3, #8
 8003172:	d14f      	bne.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	212c      	movs	r1, #44	@ 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	335c      	adds	r3, #92	@ 0x5c
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	202c      	movs	r0, #44	@ 0x2c
 800318c:	fb00 f303 	mul.w	r3, r0, r3
 8003190:	440b      	add	r3, r1
 8003192:	335c      	adds	r3, #92	@ 0x5c
 8003194:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	@ 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	335c      	adds	r3, #92	@ 0x5c
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d912      	bls.n	80031d0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	212c      	movs	r1, #44	@ 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	335c      	adds	r3, #92	@ 0x5c
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	212c      	movs	r1, #44	@ 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3360      	adds	r3, #96	@ 0x60
 80031ca:	2204      	movs	r2, #4
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e021      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	212c      	movs	r1, #44	@ 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3360      	adds	r3, #96	@ 0x60
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031f8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003200:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320e:	461a      	mov	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	2302      	movs	r3, #2
 8003224:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	b2d9      	uxtb	r1, r3
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	202c      	movs	r0, #44	@ 0x2c
 8003230:	fb00 f303 	mul.w	r3, r0, r3
 8003234:	4413      	add	r3, r2
 8003236:	3360      	adds	r3, #96	@ 0x60
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f009 fb63 	bl	800c908 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003242:	bf00      	nop
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b08a      	sub	sp, #40	@ 0x28
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	0c5b      	lsrs	r3, r3, #17
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800327e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d004      	beq.n	8003290 <HCD_RXQLVL_IRQHandler+0x46>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b05      	cmp	r3, #5
 800328a:	f000 80a9 	beq.w	80033e0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800328e:	e0aa      	b.n	80033e6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80a6 	beq.w	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	212c      	movs	r1, #44	@ 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3344      	adds	r3, #68	@ 0x44
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 809b 	beq.w	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	212c      	movs	r1, #44	@ 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3350      	adds	r3, #80	@ 0x50
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	441a      	add	r2, r3
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	202c      	movs	r0, #44	@ 0x2c
 80032c8:	fb00 f303 	mul.w	r3, r0, r3
 80032cc:	440b      	add	r3, r1
 80032ce:	334c      	adds	r3, #76	@ 0x4c
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d87a      	bhi.n	80033cc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	212c      	movs	r1, #44	@ 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	3344      	adds	r3, #68	@ 0x44
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	b292      	uxth	r2, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f003 f99a 	bl	8006628 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	212c      	movs	r1, #44	@ 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3344      	adds	r3, #68	@ 0x44
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	441a      	add	r2, r3
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	202c      	movs	r0, #44	@ 0x2c
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	440b      	add	r3, r1
 8003314:	3344      	adds	r3, #68	@ 0x44
 8003316:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	212c      	movs	r1, #44	@ 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3350      	adds	r3, #80	@ 0x50
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	441a      	add	r2, r3
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	202c      	movs	r0, #44	@ 0x2c
 8003332:	fb00 f303 	mul.w	r3, r0, r3
 8003336:	440b      	add	r3, r1
 8003338:	3350      	adds	r3, #80	@ 0x50
 800333a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	0cdb      	lsrs	r3, r3, #19
 800334c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003350:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	212c      	movs	r1, #44	@ 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3340      	adds	r3, #64	@ 0x40
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4293      	cmp	r3, r2
 8003368:	d13c      	bne.n	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d039      	beq.n	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003386:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800338e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800339c:	461a      	mov	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	212c      	movs	r1, #44	@ 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3354      	adds	r3, #84	@ 0x54
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	f083 0301 	eor.w	r3, r3, #1
 80033b6:	b2d8      	uxtb	r0, r3
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	212c      	movs	r1, #44	@ 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3354      	adds	r3, #84	@ 0x54
 80033c6:	4602      	mov	r2, r0
 80033c8:	701a      	strb	r2, [r3, #0]
      break;
 80033ca:	e00b      	b.n	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	212c      	movs	r1, #44	@ 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3360      	adds	r3, #96	@ 0x60
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
      break;
 80033de:	e001      	b.n	80033e4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80033e0:	bf00      	nop
 80033e2:	e000      	b.n	80033e6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80033e4:	bf00      	nop
  }
}
 80033e6:	bf00      	nop
 80033e8:	3728      	adds	r7, #40	@ 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800341a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d10b      	bne.n	800343e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d102      	bne.n	8003436 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f009 fa4d 	bl	800c8d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d132      	bne.n	80034ae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f043 0308 	orr.w	r3, r3, #8
 800344e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d126      	bne.n	80034a8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d113      	bne.n	800348a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003468:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800346c:	d106      	bne.n	800347c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f003 fa45 	bl	8006904 <USB_InitFSLSPClkSel>
 800347a:	e011      	b.n	80034a0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	4618      	mov	r0, r3
 8003484:	f003 fa3e 	bl	8006904 <USB_InitFSLSPClkSel>
 8003488:	e00a      	b.n	80034a0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d106      	bne.n	80034a0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003498:	461a      	mov	r2, r3
 800349a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800349e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f009 fa43 	bl	800c92c <HAL_HCD_PortEnabled_Callback>
 80034a6:	e002      	b.n	80034ae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f009 fa4d 	bl	800c948 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d103      	bne.n	80034c0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f043 0320 	orr.w	r3, r3, #32
 80034be:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e12b      	b.n	800373e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fd60 	bl	8000fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	@ 0x24
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003538:	f001 fa20 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 800353c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4a81      	ldr	r2, [pc, #516]	@ (8003748 <HAL_I2C_Init+0x274>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d807      	bhi.n	8003558 <HAL_I2C_Init+0x84>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a80      	ldr	r2, [pc, #512]	@ (800374c <HAL_I2C_Init+0x278>)
 800354c:	4293      	cmp	r3, r2
 800354e:	bf94      	ite	ls
 8003550:	2301      	movls	r3, #1
 8003552:	2300      	movhi	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e006      	b.n	8003566 <HAL_I2C_Init+0x92>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a7d      	ldr	r2, [pc, #500]	@ (8003750 <HAL_I2C_Init+0x27c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0e7      	b.n	800373e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a78      	ldr	r2, [pc, #480]	@ (8003754 <HAL_I2C_Init+0x280>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0c9b      	lsrs	r3, r3, #18
 8003578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a6a      	ldr	r2, [pc, #424]	@ (8003748 <HAL_I2C_Init+0x274>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d802      	bhi.n	80035a8 <HAL_I2C_Init+0xd4>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3301      	adds	r3, #1
 80035a6:	e009      	b.n	80035bc <HAL_I2C_Init+0xe8>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	4a69      	ldr	r2, [pc, #420]	@ (8003758 <HAL_I2C_Init+0x284>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	3301      	adds	r3, #1
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	495c      	ldr	r1, [pc, #368]	@ (8003748 <HAL_I2C_Init+0x274>)
 80035d8:	428b      	cmp	r3, r1
 80035da:	d819      	bhi.n	8003610 <HAL_I2C_Init+0x13c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e59      	subs	r1, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ea:	1c59      	adds	r1, r3, #1
 80035ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035f0:	400b      	ands	r3, r1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_I2C_Init+0x138>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1e59      	subs	r1, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fbb1 f3f3 	udiv	r3, r1, r3
 8003604:	3301      	adds	r3, #1
 8003606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360a:	e051      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 800360c:	2304      	movs	r3, #4
 800360e:	e04f      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d111      	bne.n	800363c <HAL_I2C_Init+0x168>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	440b      	add	r3, r1
 8003626:	fbb0 f3f3 	udiv	r3, r0, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e012      	b.n	8003662 <HAL_I2C_Init+0x18e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1e58      	subs	r0, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	0099      	lsls	r1, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003652:	3301      	adds	r3, #1
 8003654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_Init+0x196>
 8003666:	2301      	movs	r3, #1
 8003668:	e022      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10e      	bne.n	8003690 <HAL_I2C_Init+0x1bc>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1e58      	subs	r0, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6859      	ldr	r1, [r3, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	440b      	add	r3, r1
 8003680:	fbb0 f3f3 	udiv	r3, r0, r3
 8003684:	3301      	adds	r3, #1
 8003686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800368e:	e00f      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e58      	subs	r0, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	0099      	lsls	r1, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	6809      	ldr	r1, [r1, #0]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6911      	ldr	r1, [r2, #16]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68d2      	ldr	r2, [r2, #12]
 80036ea:	4311      	orrs	r1, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	000186a0 	.word	0x000186a0
 800374c:	001e847f 	.word	0x001e847f
 8003750:	003d08ff 	.word	0x003d08ff
 8003754:	431bde83 	.word	0x431bde83
 8003758:	10624dd3 	.word	0x10624dd3

0800375c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e128      	b.n	80039c0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a90      	ldr	r2, [pc, #576]	@ (80039c8 <HAL_I2S_Init+0x26c>)
 8003786:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fd fc61 	bl	8001050 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80037a4:	f023 030f 	bic.w	r3, r3, #15
 80037a8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2202      	movs	r2, #2
 80037b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d060      	beq.n	800387c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037c2:	2310      	movs	r3, #16
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e001      	b.n	80037cc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037c8:	2320      	movs	r3, #32
 80037ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d802      	bhi.n	80037da <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037da:	2001      	movs	r0, #1
 80037dc:	f001 fa0a 	bl	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq>
 80037e0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ea:	d125      	bne.n	8003838 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	3305      	adds	r3, #5
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	e01f      	b.n	8003856 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	461a      	mov	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	3305      	adds	r3, #5
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	e00e      	b.n	8003856 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	461a      	mov	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	3305      	adds	r3, #5
 8003854:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4a5c      	ldr	r2, [pc, #368]	@ (80039cc <HAL_I2S_Init+0x270>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	08db      	lsrs	r3, r3, #3
 8003860:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	e003      	b.n	8003884 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800387c:	2302      	movs	r3, #2
 800387e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d902      	bls.n	8003890 <HAL_I2S_Init+0x134>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2bff      	cmp	r3, #255	@ 0xff
 800388e:	d907      	bls.n	80038a0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	f043 0210 	orr.w	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e08f      	b.n	80039c0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	ea42 0103 	orr.w	r1, r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80038be:	f023 030f 	bic.w	r3, r3, #15
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6851      	ldr	r1, [r2, #4]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68d2      	ldr	r2, [r2, #12]
 80038d0:	4311      	orrs	r1, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6992      	ldr	r2, [r2, #24]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038e2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d161      	bne.n	80039b0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a38      	ldr	r2, [pc, #224]	@ (80039d0 <HAL_I2S_Init+0x274>)
 80038f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a37      	ldr	r2, [pc, #220]	@ (80039d4 <HAL_I2S_Init+0x278>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_I2S_Init+0x1a4>
 80038fc:	4b36      	ldr	r3, [pc, #216]	@ (80039d8 <HAL_I2S_Init+0x27c>)
 80038fe:	e001      	b.n	8003904 <HAL_I2S_Init+0x1a8>
 8003900:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	4932      	ldr	r1, [pc, #200]	@ (80039d4 <HAL_I2S_Init+0x278>)
 800390c:	428a      	cmp	r2, r1
 800390e:	d101      	bne.n	8003914 <HAL_I2S_Init+0x1b8>
 8003910:	4a31      	ldr	r2, [pc, #196]	@ (80039d8 <HAL_I2S_Init+0x27c>)
 8003912:	e001      	b.n	8003918 <HAL_I2S_Init+0x1bc>
 8003914:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003918:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800391c:	f023 030f 	bic.w	r3, r3, #15
 8003920:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2b      	ldr	r2, [pc, #172]	@ (80039d4 <HAL_I2S_Init+0x278>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_I2S_Init+0x1d4>
 800392c:	4b2a      	ldr	r3, [pc, #168]	@ (80039d8 <HAL_I2S_Init+0x27c>)
 800392e:	e001      	b.n	8003934 <HAL_I2S_Init+0x1d8>
 8003930:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003934:	2202      	movs	r2, #2
 8003936:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a25      	ldr	r2, [pc, #148]	@ (80039d4 <HAL_I2S_Init+0x278>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_I2S_Init+0x1ea>
 8003942:	4b25      	ldr	r3, [pc, #148]	@ (80039d8 <HAL_I2S_Init+0x27c>)
 8003944:	e001      	b.n	800394a <HAL_I2S_Init+0x1ee>
 8003946:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003956:	d003      	beq.n	8003960 <HAL_I2S_Init+0x204>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	e001      	b.n	800396c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003976:	4313      	orrs	r3, r2
 8003978:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003980:	4313      	orrs	r3, r2
 8003982:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800398a:	4313      	orrs	r3, r2
 800398c:	b29a      	uxth	r2, r3
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	4313      	orrs	r3, r2
 8003992:	b29b      	uxth	r3, r3
 8003994:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003998:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <HAL_I2S_Init+0x278>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d101      	bne.n	80039a8 <HAL_I2S_Init+0x24c>
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <HAL_I2S_Init+0x27c>)
 80039a6:	e001      	b.n	80039ac <HAL_I2S_Init+0x250>
 80039a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039ac:	897a      	ldrh	r2, [r7, #10]
 80039ae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	08003ad3 	.word	0x08003ad3
 80039cc:	cccccccd 	.word	0xcccccccd
 80039d0:	08003be9 	.word	0x08003be9
 80039d4:	40003800 	.word	0x40003800
 80039d8:	40003400 	.word	0x40003400

080039dc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	881a      	ldrh	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	1c9a      	adds	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10e      	bne.n	8003a6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffb8 	bl	80039dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	b292      	uxth	r2, r2
 8003a88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8e:	1c9a      	adds	r2, r3, #2
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10e      	bne.n	8003aca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003aba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff93 	bl	80039f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d13a      	bne.n	8003b64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d109      	bne.n	8003b0c <I2S_IRQHandler+0x3a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b02:	2b40      	cmp	r3, #64	@ 0x40
 8003b04:	d102      	bne.n	8003b0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ffb4 	bl	8003a74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b12:	2b40      	cmp	r3, #64	@ 0x40
 8003b14:	d126      	bne.n	8003b64 <I2S_IRQHandler+0x92>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d11f      	bne.n	8003b64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ff50 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d136      	bne.n	8003bde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d109      	bne.n	8003b8e <I2S_IRQHandler+0xbc>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b84:	2b80      	cmp	r3, #128	@ 0x80
 8003b86:	d102      	bne.n	8003b8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff45 	bl	8003a18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d122      	bne.n	8003bde <I2S_IRQHandler+0x10c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d11b      	bne.n	8003bde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003bb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff13 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a92      	ldr	r2, [pc, #584]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c02:	4b92      	ldr	r3, [pc, #584]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c04:	e001      	b.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a8b      	ldr	r2, [pc, #556]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d101      	bne.n	8003c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c20:	4b8a      	ldr	r3, [pc, #552]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c22:	e001      	b.n	8003c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c34:	d004      	beq.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 8099 	bne.w	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d107      	bne.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f925 	bl	8003ea4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9c8 	bl	8004004 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7a:	2b40      	cmp	r3, #64	@ 0x40
 8003c7c:	d13a      	bne.n	8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d035      	beq.n	8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c92:	4b6e      	ldr	r3, [pc, #440]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c94:	e001      	b.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4969      	ldr	r1, [pc, #420]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ca2:	428b      	cmp	r3, r1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ca6:	4b69      	ldr	r3, [pc, #420]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ca8:	e001      	b.n	8003cae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003caa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cb2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	f043 0202 	orr.w	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff fe88 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	f040 80c3 	bne.w	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80bd 	beq.w	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a49      	ldr	r2, [pc, #292]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d26:	4b49      	ldr	r3, [pc, #292]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d28:	e001      	b.n	8003d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4944      	ldr	r1, [pc, #272]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d36:	428b      	cmp	r3, r1
 8003d38:	d101      	bne.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d3a:	4b44      	ldr	r3, [pc, #272]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d3c:	e001      	b.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff fe4a 	bl	8003a04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d70:	e089      	b.n	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d107      	bne.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8be 	bl	8003f08 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d107      	bne.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f8fd 	bl	8003fa0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dac:	2b40      	cmp	r3, #64	@ 0x40
 8003dae:	d12f      	bne.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02a      	beq.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dc8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1e      	ldr	r2, [pc, #120]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd6:	e001      	b.n	8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4919      	ldr	r1, [pc, #100]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003de4:	428b      	cmp	r3, r1
 8003de6:	d101      	bne.n	8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003de8:	4b18      	ldr	r3, [pc, #96]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dea:	e001      	b.n	8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003dec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003df4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	f043 0202 	orr.w	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fdfa 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d136      	bne.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d031      	beq.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a07      	ldr	r2, [pc, #28]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e2e:	4b07      	ldr	r3, [pc, #28]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e30:	e001      	b.n	8003e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4902      	ldr	r1, [pc, #8]	@ (8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e3e:	428b      	cmp	r3, r1
 8003e40:	d106      	bne.n	8003e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e42:	4b02      	ldr	r3, [pc, #8]	@ (8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e44:	e006      	b.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e46:	bf00      	nop
 8003e48:	40003800 	.word	0x40003800
 8003e4c:	40003400 	.word	0x40003400
 8003e50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e58:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f043 0204 	orr.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fdc0 	bl	8003a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e84:	e000      	b.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e86:	bf00      	nop
}
 8003e88:	bf00      	nop
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	1c99      	adds	r1, r3, #2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6251      	str	r1, [r2, #36]	@ 0x24
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d113      	bne.n	8003efe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ee4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ffc9 	bl	8003e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	1c99      	adds	r1, r3, #2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6251      	str	r1, [r2, #36]	@ 0x24
 8003f1a:	8819      	ldrh	r1, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1d      	ldr	r2, [pc, #116]	@ (8003f98 <I2SEx_TxISR_I2SExt+0x90>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <I2SEx_TxISR_I2SExt+0x22>
 8003f26:	4b1d      	ldr	r3, [pc, #116]	@ (8003f9c <I2SEx_TxISR_I2SExt+0x94>)
 8003f28:	e001      	b.n	8003f2e <I2SEx_TxISR_I2SExt+0x26>
 8003f2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f2e:	460a      	mov	r2, r1
 8003f30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d121      	bne.n	8003f8e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a12      	ldr	r2, [pc, #72]	@ (8003f98 <I2SEx_TxISR_I2SExt+0x90>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <I2SEx_TxISR_I2SExt+0x50>
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <I2SEx_TxISR_I2SExt+0x94>)
 8003f56:	e001      	b.n	8003f5c <I2SEx_TxISR_I2SExt+0x54>
 8003f58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	490d      	ldr	r1, [pc, #52]	@ (8003f98 <I2SEx_TxISR_I2SExt+0x90>)
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d101      	bne.n	8003f6c <I2SEx_TxISR_I2SExt+0x64>
 8003f68:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <I2SEx_TxISR_I2SExt+0x94>)
 8003f6a:	e001      	b.n	8003f70 <I2SEx_TxISR_I2SExt+0x68>
 8003f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff81 	bl	8003e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40003800 	.word	0x40003800
 8003f9c:	40003400 	.word	0x40003400

08003fa0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68d8      	ldr	r0, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	1c99      	adds	r1, r3, #2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003fb8:	b282      	uxth	r2, r0
 8003fba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d113      	bne.n	8003ffc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fe2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ff4a 	bl	8003e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a20      	ldr	r2, [pc, #128]	@ (8004094 <I2SEx_RxISR_I2SExt+0x90>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <I2SEx_RxISR_I2SExt+0x16>
 8004016:	4b20      	ldr	r3, [pc, #128]	@ (8004098 <I2SEx_RxISR_I2SExt+0x94>)
 8004018:	e001      	b.n	800401e <I2SEx_RxISR_I2SExt+0x1a>
 800401a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800401e:	68d8      	ldr	r0, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	1c99      	adds	r1, r3, #2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800402a:	b282      	uxth	r2, r0
 800402c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d121      	bne.n	800408a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a12      	ldr	r2, [pc, #72]	@ (8004094 <I2SEx_RxISR_I2SExt+0x90>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <I2SEx_RxISR_I2SExt+0x50>
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <I2SEx_RxISR_I2SExt+0x94>)
 8004052:	e001      	b.n	8004058 <I2SEx_RxISR_I2SExt+0x54>
 8004054:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	490d      	ldr	r1, [pc, #52]	@ (8004094 <I2SEx_RxISR_I2SExt+0x90>)
 8004060:	428b      	cmp	r3, r1
 8004062:	d101      	bne.n	8004068 <I2SEx_RxISR_I2SExt+0x64>
 8004064:	4b0c      	ldr	r3, [pc, #48]	@ (8004098 <I2SEx_RxISR_I2SExt+0x94>)
 8004066:	e001      	b.n	800406c <I2SEx_RxISR_I2SExt+0x68>
 8004068:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800406c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004070:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ff03 	bl	8003e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40003800 	.word	0x40003800
 8004098:	40003400 	.word	0x40003400

0800409c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e267      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d075      	beq.n	80041a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ba:	4b88      	ldr	r3, [pc, #544]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d00c      	beq.n	80040e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c6:	4b85      	ldr	r3, [pc, #532]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d112      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d2:	4b82      	ldr	r3, [pc, #520]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040de:	d10b      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	4b7e      	ldr	r3, [pc, #504]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05b      	beq.n	80041a4 <HAL_RCC_OscConfig+0x108>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d157      	bne.n	80041a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e242      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004100:	d106      	bne.n	8004110 <HAL_RCC_OscConfig+0x74>
 8004102:	4b76      	ldr	r3, [pc, #472]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a75      	ldr	r2, [pc, #468]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e01d      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x98>
 800411a:	4b70      	ldr	r3, [pc, #448]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6f      	ldr	r2, [pc, #444]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4b6d      	ldr	r3, [pc, #436]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6c      	ldr	r2, [pc, #432]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004134:	4b69      	ldr	r3, [pc, #420]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a68      	ldr	r2, [pc, #416]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b66      	ldr	r3, [pc, #408]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a65      	ldr	r2, [pc, #404]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800414a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d013      	beq.n	800417c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd fa36 	bl	80015c4 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd fa32 	bl	80015c4 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	@ 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e207      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b5b      	ldr	r3, [pc, #364]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0xc0>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fd fa22 	bl	80015c4 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004184:	f7fd fa1e 	bl	80015c4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	@ 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1f3      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	4b51      	ldr	r3, [pc, #324]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0xe8>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d063      	beq.n	800427a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b2:	4b4a      	ldr	r3, [pc, #296]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041be:	4b47      	ldr	r3, [pc, #284]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d11c      	bne.n	8004204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ca:	4b44      	ldr	r3, [pc, #272]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d116      	bne.n	8004204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	4b41      	ldr	r3, [pc, #260]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_RCC_OscConfig+0x152>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e1c7      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4937      	ldr	r1, [pc, #220]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	e03a      	b.n	800427a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420c:	4b34      	ldr	r3, [pc, #208]	@ (80042e0 <HAL_RCC_OscConfig+0x244>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fd f9d7 	bl	80015c4 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421a:	f7fd f9d3 	bl	80015c4 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e1a8      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004238:	4b28      	ldr	r3, [pc, #160]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4925      	ldr	r1, [pc, #148]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424e:	4b24      	ldr	r3, [pc, #144]	@ (80042e0 <HAL_RCC_OscConfig+0x244>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd f9b6 	bl	80015c4 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425c:	f7fd f9b2 	bl	80015c4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e187      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	4b1b      	ldr	r3, [pc, #108]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d036      	beq.n	80042f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428e:	4b15      	ldr	r3, [pc, #84]	@ (80042e4 <HAL_RCC_OscConfig+0x248>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fd f996 	bl	80015c4 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429c:	f7fd f992 	bl	80015c4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e167      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCC_OscConfig+0x240>)
 80042b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x200>
 80042ba:	e01b      	b.n	80042f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042bc:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <HAL_RCC_OscConfig+0x248>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c2:	f7fd f97f 	bl	80015c4 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	e00e      	b.n	80042e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fd f97b 	bl	80015c4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d907      	bls.n	80042e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e150      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
 80042dc:	40023800 	.word	0x40023800
 80042e0:	42470000 	.word	0x42470000
 80042e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e8:	4b88      	ldr	r3, [pc, #544]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80042ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ea      	bne.n	80042ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8097 	beq.w	8004430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004302:	2300      	movs	r3, #0
 8004304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004306:	4b81      	ldr	r3, [pc, #516]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10f      	bne.n	8004332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	4b7d      	ldr	r3, [pc, #500]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	4a7c      	ldr	r2, [pc, #496]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004320:	6413      	str	r3, [r2, #64]	@ 0x40
 8004322:	4b7a      	ldr	r3, [pc, #488]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004332:	4b77      	ldr	r3, [pc, #476]	@ (8004510 <HAL_RCC_OscConfig+0x474>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d118      	bne.n	8004370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433e:	4b74      	ldr	r3, [pc, #464]	@ (8004510 <HAL_RCC_OscConfig+0x474>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a73      	ldr	r2, [pc, #460]	@ (8004510 <HAL_RCC_OscConfig+0x474>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434a:	f7fd f93b 	bl	80015c4 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004352:	f7fd f937 	bl	80015c4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e10c      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004364:	4b6a      	ldr	r3, [pc, #424]	@ (8004510 <HAL_RCC_OscConfig+0x474>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x2ea>
 8004378:	4b64      	ldr	r3, [pc, #400]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437c:	4a63      	ldr	r2, [pc, #396]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	6713      	str	r3, [r2, #112]	@ 0x70
 8004384:	e01c      	b.n	80043c0 <HAL_RCC_OscConfig+0x324>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b05      	cmp	r3, #5
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x30c>
 800438e:	4b5f      	ldr	r3, [pc, #380]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004392:	4a5e      	ldr	r2, [pc, #376]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 8004394:	f043 0304 	orr.w	r3, r3, #4
 8004398:	6713      	str	r3, [r2, #112]	@ 0x70
 800439a:	4b5c      	ldr	r3, [pc, #368]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439e:	4a5b      	ldr	r2, [pc, #364]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a6:	e00b      	b.n	80043c0 <HAL_RCC_OscConfig+0x324>
 80043a8:	4b58      	ldr	r3, [pc, #352]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ac:	4a57      	ldr	r2, [pc, #348]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b4:	4b55      	ldr	r3, [pc, #340]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b8:	4a54      	ldr	r2, [pc, #336]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80043ba:	f023 0304 	bic.w	r3, r3, #4
 80043be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d015      	beq.n	80043f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd f8fc 	bl	80015c4 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fd f8f8 	bl	80015c4 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0cb      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e6:	4b49      	ldr	r3, [pc, #292]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ee      	beq.n	80043d0 <HAL_RCC_OscConfig+0x334>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f4:	f7fd f8e6 	bl	80015c4 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fd f8e2 	bl	80015c4 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0b5      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004412:	4b3e      	ldr	r3, [pc, #248]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1ee      	bne.n	80043fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d105      	bne.n	8004430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004424:	4b39      	ldr	r3, [pc, #228]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 8004426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004428:	4a38      	ldr	r2, [pc, #224]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 800442a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800442e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80a1 	beq.w	800457c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800443a:	4b34      	ldr	r3, [pc, #208]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b08      	cmp	r3, #8
 8004444:	d05c      	beq.n	8004500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d141      	bne.n	80044d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	4b31      	ldr	r3, [pc, #196]	@ (8004514 <HAL_RCC_OscConfig+0x478>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd f8b6 	bl	80015c4 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445c:	f7fd f8b2 	bl	80015c4 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e087      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	4b27      	ldr	r3, [pc, #156]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69da      	ldr	r2, [r3, #28]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	019b      	lsls	r3, r3, #6
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	3b01      	subs	r3, #1
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	491b      	ldr	r1, [pc, #108]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004514 <HAL_RCC_OscConfig+0x478>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fd f88b 	bl	80015c4 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fd f887 	bl	80015c4 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e05c      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c4:	4b11      	ldr	r3, [pc, #68]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x416>
 80044d0:	e054      	b.n	800457c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <HAL_RCC_OscConfig+0x478>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fd f874 	bl	80015c4 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fd f870 	bl	80015c4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e045      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	4b06      	ldr	r3, [pc, #24]	@ (800450c <HAL_RCC_OscConfig+0x470>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x444>
 80044fe:	e03d      	b.n	800457c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e038      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
 800450c:	40023800 	.word	0x40023800
 8004510:	40007000 	.word	0x40007000
 8004514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004518:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <HAL_RCC_OscConfig+0x4ec>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d028      	beq.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d121      	bne.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d11a      	bne.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004548:	4013      	ands	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800454e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004550:	4293      	cmp	r3, r2
 8004552:	d111      	bne.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	3b01      	subs	r3, #1
 8004562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d107      	bne.n	8004578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800

0800458c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0cc      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a0:	4b68      	ldr	r3, [pc, #416]	@ (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d90c      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b65      	ldr	r3, [pc, #404]	@ (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b6:	4b63      	ldr	r3, [pc, #396]	@ (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0b8      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e0:	4b59      	ldr	r3, [pc, #356]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a58      	ldr	r2, [pc, #352]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f8:	4b53      	ldr	r3, [pc, #332]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4a52      	ldr	r2, [pc, #328]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004604:	4b50      	ldr	r3, [pc, #320]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	494d      	ldr	r1, [pc, #308]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d044      	beq.n	80046ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4b47      	ldr	r3, [pc, #284]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d119      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e07f      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d003      	beq.n	800464a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004646:	2b03      	cmp	r3, #3
 8004648:	d107      	bne.n	800465a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464a:	4b3f      	ldr	r3, [pc, #252]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e06f      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465a:	4b3b      	ldr	r3, [pc, #236]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e067      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466a:	4b37      	ldr	r3, [pc, #220]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f023 0203 	bic.w	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4934      	ldr	r1, [pc, #208]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	4313      	orrs	r3, r2
 800467a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800467c:	f7fc ffa2 	bl	80015c4 <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004682:	e00a      	b.n	800469a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004684:	f7fc ff9e 	bl	80015c4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e04f      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469a:	4b2b      	ldr	r3, [pc, #172]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 020c 	and.w	r2, r3, #12
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d1eb      	bne.n	8004684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ac:	4b25      	ldr	r3, [pc, #148]	@ (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d20c      	bcs.n	80046d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b22      	ldr	r3, [pc, #136]	@ (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e032      	b.n	800473a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e0:	4b19      	ldr	r3, [pc, #100]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	4916      	ldr	r1, [pc, #88]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046fe:	4b12      	ldr	r3, [pc, #72]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	490e      	ldr	r1, [pc, #56]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004712:	f000 f821 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 8004716:	4602      	mov	r2, r0
 8004718:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	490a      	ldr	r1, [pc, #40]	@ (800474c <HAL_RCC_ClockConfig+0x1c0>)
 8004724:	5ccb      	ldrb	r3, [r1, r3]
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	4a09      	ldr	r2, [pc, #36]	@ (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800472e:	4b09      	ldr	r3, [pc, #36]	@ (8004754 <HAL_RCC_ClockConfig+0x1c8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc fde0 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023c00 	.word	0x40023c00
 8004748:	40023800 	.word	0x40023800
 800474c:	0800d9a0 	.word	0x0800d9a0
 8004750:	20000000 	.word	0x20000000
 8004754:	20000004 	.word	0x20000004

08004758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800475c:	b094      	sub	sp, #80	@ 0x50
 800475e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	647b      	str	r3, [r7, #68]	@ 0x44
 8004764:	2300      	movs	r3, #0
 8004766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004768:	2300      	movs	r3, #0
 800476a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004770:	4b79      	ldr	r3, [pc, #484]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b08      	cmp	r3, #8
 800477a:	d00d      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x40>
 800477c:	2b08      	cmp	r3, #8
 800477e:	f200 80e1 	bhi.w	8004944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x34>
 8004786:	2b04      	cmp	r3, #4
 8004788:	d003      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x3a>
 800478a:	e0db      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4b73      	ldr	r3, [pc, #460]	@ (800495c <HAL_RCC_GetSysClockFreq+0x204>)
 800478e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004790:	e0db      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004792:	4b73      	ldr	r3, [pc, #460]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x208>)
 8004794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004796:	e0d8      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004798:	4b6f      	ldr	r3, [pc, #444]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d063      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	099b      	lsrs	r3, r3, #6
 80047b4:	2200      	movs	r2, #0
 80047b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047c2:	2300      	movs	r3, #0
 80047c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047ca:	4622      	mov	r2, r4
 80047cc:	462b      	mov	r3, r5
 80047ce:	f04f 0000 	mov.w	r0, #0
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	0159      	lsls	r1, r3, #5
 80047d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047dc:	0150      	lsls	r0, r2, #5
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4621      	mov	r1, r4
 80047e4:	1a51      	subs	r1, r2, r1
 80047e6:	6139      	str	r1, [r7, #16]
 80047e8:	4629      	mov	r1, r5
 80047ea:	eb63 0301 	sbc.w	r3, r3, r1
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047fc:	4659      	mov	r1, fp
 80047fe:	018b      	lsls	r3, r1, #6
 8004800:	4651      	mov	r1, sl
 8004802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004806:	4651      	mov	r1, sl
 8004808:	018a      	lsls	r2, r1, #6
 800480a:	4651      	mov	r1, sl
 800480c:	ebb2 0801 	subs.w	r8, r2, r1
 8004810:	4659      	mov	r1, fp
 8004812:	eb63 0901 	sbc.w	r9, r3, r1
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800482a:	4690      	mov	r8, r2
 800482c:	4699      	mov	r9, r3
 800482e:	4623      	mov	r3, r4
 8004830:	eb18 0303 	adds.w	r3, r8, r3
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	462b      	mov	r3, r5
 8004838:	eb49 0303 	adc.w	r3, r9, r3
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800484a:	4629      	mov	r1, r5
 800484c:	024b      	lsls	r3, r1, #9
 800484e:	4621      	mov	r1, r4
 8004850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004854:	4621      	mov	r1, r4
 8004856:	024a      	lsls	r2, r1, #9
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800485e:	2200      	movs	r2, #0
 8004860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004868:	f7fb fd0a 	bl	8000280 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4613      	mov	r3, r2
 8004872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004874:	e058      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4b38      	ldr	r3, [pc, #224]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	2200      	movs	r2, #0
 800487e:	4618      	mov	r0, r3
 8004880:	4611      	mov	r1, r2
 8004882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	2300      	movs	r3, #0
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
 800488c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	0159      	lsls	r1, r3, #5
 800489e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a2:	0150      	lsls	r0, r2, #5
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4641      	mov	r1, r8
 80048aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80048ae:	4649      	mov	r1, r9
 80048b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048c8:	ebb2 040a 	subs.w	r4, r2, sl
 80048cc:	eb63 050b 	sbc.w	r5, r3, fp
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	00eb      	lsls	r3, r5, #3
 80048da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048de:	00e2      	lsls	r2, r4, #3
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	18e3      	adds	r3, r4, r3
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	464b      	mov	r3, r9
 80048ec:	eb45 0303 	adc.w	r3, r5, r3
 80048f0:	607b      	str	r3, [r7, #4]
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048fe:	4629      	mov	r1, r5
 8004900:	028b      	lsls	r3, r1, #10
 8004902:	4621      	mov	r1, r4
 8004904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004908:	4621      	mov	r1, r4
 800490a:	028a      	lsls	r2, r1, #10
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004912:	2200      	movs	r2, #0
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	61fa      	str	r2, [r7, #28]
 8004918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800491c:	f7fb fcb0 	bl	8000280 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4613      	mov	r3, r2
 8004926:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	3301      	adds	r3, #1
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800493a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004942:	e002      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004944:	4b05      	ldr	r3, [pc, #20]	@ (800495c <HAL_RCC_GetSysClockFreq+0x204>)
 8004946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800494c:	4618      	mov	r0, r3
 800494e:	3750      	adds	r7, #80	@ 0x50
 8004950:	46bd      	mov	sp, r7
 8004952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	00f42400 	.word	0x00f42400
 8004960:	007a1200 	.word	0x007a1200

08004964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b03      	ldr	r3, [pc, #12]	@ (8004978 <HAL_RCC_GetHCLKFreq+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000000 	.word	0x20000000

0800497c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004980:	f7ff fff0 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	@ (800499c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0a9b      	lsrs	r3, r3, #10
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	@ (80049a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	0800d9b0 	.word	0x0800d9b0

080049a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049a8:	f7ff ffdc 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	0b5b      	lsrs	r3, r3, #13
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	4903      	ldr	r1, [pc, #12]	@ (80049c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ba:	5ccb      	ldrb	r3, [r1, r3]
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40023800 	.word	0x40023800
 80049c8:	0800d9b0 	.word	0x0800d9b0

080049cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	220f      	movs	r2, #15
 80049da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049dc:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <HAL_RCC_GetClockConfig+0x60>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0207 	and.w	r2, r3, #7
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40023c00 	.word	0x40023c00

08004a30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d035      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a58:	4b62      	ldr	r3, [pc, #392]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a5e:	f7fc fdb1 	bl	80015c4 <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a66:	f7fc fdad 	bl	80015c4 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e0b0      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a78:	4b5b      	ldr	r3, [pc, #364]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f0      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	019a      	lsls	r2, r3, #6
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	071b      	lsls	r3, r3, #28
 8004a90:	4955      	ldr	r1, [pc, #340]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a98:	4b52      	ldr	r3, [pc, #328]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9e:	f7fc fd91 	bl	80015c4 <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aa6:	f7fc fd8d 	bl	80015c4 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e090      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8083 	beq.w	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	4b44      	ldr	r3, [pc, #272]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	4a43      	ldr	r2, [pc, #268]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae2:	4b41      	ldr	r3, [pc, #260]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004aee:	4b3f      	ldr	r3, [pc, #252]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3e      	ldr	r2, [pc, #248]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004afa:	f7fc fd63 	bl	80015c4 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b02:	f7fc fd5f 	bl	80015c4 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e062      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b14:	4b35      	ldr	r3, [pc, #212]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b20:	4b31      	ldr	r3, [pc, #196]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02f      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d028      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b48:	4b29      	ldr	r3, [pc, #164]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b4e:	4b28      	ldr	r3, [pc, #160]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b54:	4a24      	ldr	r2, [pc, #144]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b5a:	4b23      	ldr	r3, [pc, #140]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d114      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fc fd2d 	bl	80015c4 <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6c:	e00a      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6e:	f7fc fd29 	bl	80015c4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e02a      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b84:	4b18      	ldr	r3, [pc, #96]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ee      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b9c:	d10d      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b9e:	4b12      	ldr	r3, [pc, #72]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb2:	490d      	ldr	r1, [pc, #52]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]
 8004bb8:	e005      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bba:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bc4:	6093      	str	r3, [r2, #8]
 8004bc6:	4b08      	ldr	r3, [pc, #32]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd2:	4905      	ldr	r1, [pc, #20]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	42470068 	.word	0x42470068
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	42470e40 	.word	0x42470e40

08004bf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d13e      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c12:	4b23      	ldr	r3, [pc, #140]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d12f      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c28:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c2a:	617b      	str	r3, [r7, #20]
          break;
 8004c2c:	e02f      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c3a:	d108      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c44:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	e007      	b.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c56:	4a15      	ldr	r2, [pc, #84]	@ (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c78:	0f1b      	lsrs	r3, r3, #28
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]
          break;
 8004c86:	e002      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
          break;
 8004c8c:	bf00      	nop
        }
      }
      break;
 8004c8e:	bf00      	nop
    }
  }
  return frequency;
 8004c90:	697b      	ldr	r3, [r7, #20]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	00bb8000 	.word	0x00bb8000
 8004ca8:	007a1200 	.word	0x007a1200
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e07b      	b.n	8004dba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d108      	bne.n	8004cdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cd2:	d009      	beq.n	8004ce8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	61da      	str	r2, [r3, #28]
 8004cda:	e005      	b.n	8004ce8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc fa24 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6c:	ea42 0103 	orr.w	r1, r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	f003 0104 	and.w	r1, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	f003 0210 	and.w	r2, r3, #16
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004da8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e041      	b.n	8004e58 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f839 	bl	8004e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f000 f9d7 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d001      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e04e      	b.n	8004f2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	@ (8004f38 <HAL_TIM_Base_Start_IT+0xc4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d022      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x80>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb6:	d01d      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x80>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f3c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x80>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f40 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x80>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8004f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x80>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1b      	ldr	r2, [pc, #108]	@ (8004f48 <HAL_TIM_Base_Start_IT+0xd4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x80>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	@ (8004f4c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x80>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a18      	ldr	r2, [pc, #96]	@ (8004f50 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d111      	bne.n	8004f18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b06      	cmp	r3, #6
 8004f04:	d010      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	e007      	b.n	8004f28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40010400 	.word	0x40010400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40001800 	.word	0x40001800

08004f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d122      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d11b      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0202 	mvn.w	r2, #2
 8004f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8ee 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f8e0 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f8f1 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d122      	bne.n	8005004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d11b      	bne.n	8005004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0204 	mvn.w	r2, #4
 8004fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8c4 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f8b6 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8c7 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b08      	cmp	r3, #8
 8005010:	d122      	bne.n	8005058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b08      	cmp	r3, #8
 800501e:	d11b      	bne.n	8005058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0208 	mvn.w	r2, #8
 8005028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2204      	movs	r2, #4
 800502e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f89a 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f88c 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f89d 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b10      	cmp	r3, #16
 8005064:	d122      	bne.n	80050ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b10      	cmp	r3, #16
 8005072:	d11b      	bne.n	80050ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0210 	mvn.w	r2, #16
 800507c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2208      	movs	r2, #8
 8005082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f870 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8005098:	e005      	b.n	80050a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f862 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f873 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d10e      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d107      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0201 	mvn.w	r2, #1
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fb ff30 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e2:	2b80      	cmp	r3, #128	@ 0x80
 80050e4:	d10e      	bne.n	8005104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f0:	2b80      	cmp	r3, #128	@ 0x80
 80050f2:	d107      	bne.n	8005104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f902 	bl	8005308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510e:	2b40      	cmp	r3, #64	@ 0x40
 8005110:	d10e      	bne.n	8005130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511c:	2b40      	cmp	r3, #64	@ 0x40
 800511e:	d107      	bne.n	8005130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f838 	bl	80051a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b20      	cmp	r3, #32
 800513c:	d10e      	bne.n	800515c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b20      	cmp	r3, #32
 800514a:	d107      	bne.n	800515c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0220 	mvn.w	r2, #32
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f8cc 	bl	80052f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a40      	ldr	r2, [pc, #256]	@ (80052c8 <TIM_Base_SetConfig+0x114>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d2:	d00f      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3d      	ldr	r2, [pc, #244]	@ (80052cc <TIM_Base_SetConfig+0x118>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3c      	ldr	r2, [pc, #240]	@ (80052d0 <TIM_Base_SetConfig+0x11c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3b      	ldr	r2, [pc, #236]	@ (80052d4 <TIM_Base_SetConfig+0x120>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3a      	ldr	r2, [pc, #232]	@ (80052d8 <TIM_Base_SetConfig+0x124>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2f      	ldr	r2, [pc, #188]	@ (80052c8 <TIM_Base_SetConfig+0x114>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005214:	d027      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2c      	ldr	r2, [pc, #176]	@ (80052cc <TIM_Base_SetConfig+0x118>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d023      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2b      	ldr	r2, [pc, #172]	@ (80052d0 <TIM_Base_SetConfig+0x11c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2a      	ldr	r2, [pc, #168]	@ (80052d4 <TIM_Base_SetConfig+0x120>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a29      	ldr	r2, [pc, #164]	@ (80052d8 <TIM_Base_SetConfig+0x124>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d017      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a28      	ldr	r2, [pc, #160]	@ (80052dc <TIM_Base_SetConfig+0x128>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a27      	ldr	r2, [pc, #156]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a26      	ldr	r2, [pc, #152]	@ (80052e4 <TIM_Base_SetConfig+0x130>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a25      	ldr	r2, [pc, #148]	@ (80052e8 <TIM_Base_SetConfig+0x134>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a24      	ldr	r2, [pc, #144]	@ (80052ec <TIM_Base_SetConfig+0x138>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a23      	ldr	r2, [pc, #140]	@ (80052f0 <TIM_Base_SetConfig+0x13c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0a      	ldr	r2, [pc, #40]	@ (80052c8 <TIM_Base_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0xf8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a0c      	ldr	r2, [pc, #48]	@ (80052d8 <TIM_Base_SetConfig+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d103      	bne.n	80052b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	615a      	str	r2, [r3, #20]
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40010400 	.word	0x40010400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800
 80052e8:	40001800 	.word	0x40001800
 80052ec:	40001c00 	.word	0x40001c00
 80052f0:	40002000 	.word	0x40002000

080052f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e03f      	b.n	80053ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fb ff4c 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2224      	movs	r2, #36	@ 0x24
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800535e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fd7b 	bl	8005e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b08a      	sub	sp, #40	@ 0x28
 80053ba:	af02      	add	r7, sp, #8
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d17c      	bne.n	80054d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_UART_Transmit+0x2c>
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e075      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_UART_Transmit+0x3e>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e06e      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2221      	movs	r2, #33	@ 0x21
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800540a:	f7fc f8db 	bl	80015c4 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005424:	d108      	bne.n	8005438 <HAL_UART_Transmit+0x82>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e003      	b.n	8005440 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005448:	e02a      	b.n	80054a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	2180      	movs	r1, #128	@ 0x80
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 faf9 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e036      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	3302      	adds	r3, #2
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	e007      	b.n	8005492 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1cf      	bne.n	800544a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2200      	movs	r2, #0
 80054b2:	2140      	movs	r1, #64	@ 0x40
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fac9 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e006      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b0ba      	sub	sp, #232	@ 0xe8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005508:	2300      	movs	r3, #0
 800550a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800551a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_UART_IRQHandler+0x66>
 800552e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fbd3 	bl	8005ce6 <UART_Receive_IT>
      return;
 8005540:	e256      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80de 	beq.w	8005708 <HAL_UART_IRQHandler+0x22c>
 800554c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800555c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80d1 	beq.w	8005708 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <HAL_UART_IRQHandler+0xae>
 8005572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	f043 0201 	orr.w	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_UART_IRQHandler+0xd2>
 8005596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a6:	f043 0202 	orr.w	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <HAL_UART_IRQHandler+0xf6>
 80055ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d011      	beq.n	8005602 <HAL_UART_IRQHandler+0x126>
 80055de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	f043 0208 	orr.w	r2, r3, #8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 81ed 	beq.w	80059e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800560c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <HAL_UART_IRQHandler+0x14e>
 8005618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fb5e 	bl	8005ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005634:	2b40      	cmp	r3, #64	@ 0x40
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <HAL_UART_IRQHandler+0x17a>
 800564e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d04f      	beq.n	80056f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa66 	bl	8005b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005666:	2b40      	cmp	r3, #64	@ 0x40
 8005668:	d141      	bne.n	80056ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005680:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3314      	adds	r3, #20
 8005692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005696:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800569a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1d9      	bne.n	800566a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	4a7d      	ldr	r2, [pc, #500]	@ (80058b8 <HAL_UART_IRQHandler+0x3dc>)
 80056c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fc f8fc 	bl	80018c8 <HAL_DMA_Abort_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e00e      	b.n	8005704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f99a 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	e00a      	b.n	8005704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f996 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e006      	b.n	8005704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f992 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005702:	e170      	b.n	80059e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	bf00      	nop
    return;
 8005706:	e16e      	b.n	80059e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	2b01      	cmp	r3, #1
 800570e:	f040 814a 	bne.w	80059a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8143 	beq.w	80059a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 813c 	beq.w	80059a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574e:	2b40      	cmp	r3, #64	@ 0x40
 8005750:	f040 80b4 	bne.w	80058bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8140 	beq.w	80059ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800576e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005772:	429a      	cmp	r2, r3
 8005774:	f080 8139 	bcs.w	80059ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800577e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800578a:	f000 8088 	beq.w	800589e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1d9      	bne.n	800578e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3314      	adds	r3, #20
 80057e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3314      	adds	r3, #20
 80057fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005802:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005806:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e1      	bne.n	80057da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3314      	adds	r3, #20
 800581c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800582c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3314      	adds	r3, #20
 8005836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800583a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800583c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005840:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e3      	bne.n	8005816 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800586c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800586e:	f023 0310 	bic.w	r3, r3, #16
 8005872:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005880:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005882:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005886:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800588e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e3      	bne.n	800585c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	4618      	mov	r0, r3
 800589a:	f7fb ffa5 	bl	80017e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f8c0 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058b4:	e099      	b.n	80059ea <HAL_UART_IRQHandler+0x50e>
 80058b6:	bf00      	nop
 80058b8:	08005bef 	.word	0x08005bef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 808b 	beq.w	80059ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8086 	beq.w	80059ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005906:	647a      	str	r2, [r7, #68]	@ 0x44
 8005908:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800590c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e3      	bne.n	80058e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	623b      	str	r3, [r7, #32]
   return(result);
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3314      	adds	r3, #20
 800593a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800593e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e3      	bne.n	800591a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005984:	61fa      	str	r2, [r7, #28]
 8005986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	617b      	str	r3, [r7, #20]
   return(result);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e3      	bne.n	8005960 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f848 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059a4:	e023      	b.n	80059ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <HAL_UART_IRQHandler+0x4ea>
 80059b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f929 	bl	8005c16 <UART_Transmit_IT>
    return;
 80059c4:	e014      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00e      	beq.n	80059f0 <HAL_UART_IRQHandler+0x514>
 80059d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f969 	bl	8005cb6 <UART_EndTransmit_IT>
    return;
 80059e4:	e004      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
    return;
 80059e6:	bf00      	nop
 80059e8:	e002      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
      return;
 80059ea:	bf00      	nop
 80059ec:	e000      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
      return;
 80059ee:	bf00      	nop
  }
}
 80059f0:	37e8      	adds	r7, #232	@ 0xe8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop

080059f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b090      	sub	sp, #64	@ 0x40
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5c:	e050      	b.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d04c      	beq.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a6c:	f7fb fdaa 	bl	80015c4 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d241      	bcs.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a9c:	637a      	str	r2, [r7, #52]	@ 0x34
 8005a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005aa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ad0:	623a      	str	r2, [r7, #32]
 8005ad2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	69f9      	ldr	r1, [r7, #28]
 8005ad6:	6a3a      	ldr	r2, [r7, #32]
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e5      	bne.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e00f      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d09f      	beq.n	8005a5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3740      	adds	r7, #64	@ 0x40
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b095      	sub	sp, #84	@ 0x54
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b50:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d119      	bne.n	8005bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f023 0310 	bic.w	r3, r3, #16
 8005bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc0:	61ba      	str	r2, [r7, #24]
 8005bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6979      	ldr	r1, [r7, #20]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e5      	bne.n	8005ba0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005be2:	bf00      	nop
 8005be4:	3754      	adds	r7, #84	@ 0x54
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff ff09 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b21      	cmp	r3, #33	@ 0x21
 8005c28:	d13e      	bne.n	8005ca8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c32:	d114      	bne.n	8005c5e <UART_Transmit_IT+0x48>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d110      	bne.n	8005c5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	1c9a      	adds	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	621a      	str	r2, [r3, #32]
 8005c5c:	e008      	b.n	8005c70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	1c59      	adds	r1, r3, #1
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6211      	str	r1, [r2, #32]
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10f      	bne.n	8005ca4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ca2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e000      	b.n	8005caa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff fe8e 	bl	80059f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b08c      	sub	sp, #48	@ 0x30
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b22      	cmp	r3, #34	@ 0x22
 8005cf8:	f040 80ab 	bne.w	8005e52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d04:	d117      	bne.n	8005d36 <UART_Receive_IT+0x50>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d113      	bne.n	8005d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2e:	1c9a      	adds	r2, r3, #2
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d34:	e026      	b.n	8005d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d48:	d007      	beq.n	8005d5a <UART_Receive_IT+0x74>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <UART_Receive_IT+0x82>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e008      	b.n	8005d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4619      	mov	r1, r3
 8005d92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d15a      	bne.n	8005e4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0220 	bic.w	r2, r2, #32
 8005da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d135      	bne.n	8005e44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	613b      	str	r3, [r7, #16]
   return(result);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f023 0310 	bic.w	r3, r3, #16
 8005df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dfe:	623a      	str	r2, [r7, #32]
 8005e00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	69f9      	ldr	r1, [r7, #28]
 8005e04:	6a3a      	ldr	r2, [r7, #32]
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e5      	bne.n	8005dde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d10a      	bne.n	8005e36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fdf9 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
 8005e42:	e002      	b.n	8005e4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff fde1 	bl	8005a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e002      	b.n	8005e54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e000      	b.n	8005e54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e52:	2302      	movs	r3, #2
  }
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3730      	adds	r7, #48	@ 0x30
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e60:	b0c0      	sub	sp, #256	@ 0x100
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	68d9      	ldr	r1, [r3, #12]
 8005e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	ea40 0301 	orr.w	r3, r0, r1
 8005e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005eb4:	f021 010c 	bic.w	r1, r1, #12
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed6:	6999      	ldr	r1, [r3, #24]
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	ea40 0301 	orr.w	r3, r0, r1
 8005ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4b8f      	ldr	r3, [pc, #572]	@ (8006128 <UART_SetConfig+0x2cc>)
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d005      	beq.n	8005efc <UART_SetConfig+0xa0>
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800612c <UART_SetConfig+0x2d0>)
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d104      	bne.n	8005f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005efc:	f7fe fd52 	bl	80049a4 <HAL_RCC_GetPCLK2Freq>
 8005f00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f04:	e003      	b.n	8005f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f06:	f7fe fd39 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8005f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f18:	f040 810c 	bne.w	8006134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f2e:	4622      	mov	r2, r4
 8005f30:	462b      	mov	r3, r5
 8005f32:	1891      	adds	r1, r2, r2
 8005f34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f36:	415b      	adcs	r3, r3
 8005f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f3e:	4621      	mov	r1, r4
 8005f40:	eb12 0801 	adds.w	r8, r2, r1
 8005f44:	4629      	mov	r1, r5
 8005f46:	eb43 0901 	adc.w	r9, r3, r1
 8005f4a:	f04f 0200 	mov.w	r2, #0
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f5e:	4690      	mov	r8, r2
 8005f60:	4699      	mov	r9, r3
 8005f62:	4623      	mov	r3, r4
 8005f64:	eb18 0303 	adds.w	r3, r8, r3
 8005f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	eb49 0303 	adc.w	r3, r9, r3
 8005f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	18db      	adds	r3, r3, r3
 8005f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f90:	4613      	mov	r3, r2
 8005f92:	eb42 0303 	adc.w	r3, r2, r3
 8005f96:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fa0:	f7fa f96e 	bl	8000280 <__aeabi_uldivmod>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4b61      	ldr	r3, [pc, #388]	@ (8006130 <UART_SetConfig+0x2d4>)
 8005faa:	fba3 2302 	umull	r2, r3, r3, r2
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	011c      	lsls	r4, r3, #4
 8005fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	1891      	adds	r1, r2, r2
 8005fca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fcc:	415b      	adcs	r3, r3
 8005fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	eb12 0a01 	adds.w	sl, r2, r1
 8005fda:	4649      	mov	r1, r9
 8005fdc:	eb43 0b01 	adc.w	fp, r3, r1
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ff4:	4692      	mov	sl, r2
 8005ff6:	469b      	mov	fp, r3
 8005ff8:	4643      	mov	r3, r8
 8005ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8005ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006002:	464b      	mov	r3, r9
 8006004:	eb4b 0303 	adc.w	r3, fp, r3
 8006008:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006018:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800601c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006020:	460b      	mov	r3, r1
 8006022:	18db      	adds	r3, r3, r3
 8006024:	643b      	str	r3, [r7, #64]	@ 0x40
 8006026:	4613      	mov	r3, r2
 8006028:	eb42 0303 	adc.w	r3, r2, r3
 800602c:	647b      	str	r3, [r7, #68]	@ 0x44
 800602e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006036:	f7fa f923 	bl	8000280 <__aeabi_uldivmod>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4611      	mov	r1, r2
 8006040:	4b3b      	ldr	r3, [pc, #236]	@ (8006130 <UART_SetConfig+0x2d4>)
 8006042:	fba3 2301 	umull	r2, r3, r3, r1
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	2264      	movs	r2, #100	@ 0x64
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	1acb      	subs	r3, r1, r3
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006056:	4b36      	ldr	r3, [pc, #216]	@ (8006130 <UART_SetConfig+0x2d4>)
 8006058:	fba3 2302 	umull	r2, r3, r3, r2
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006064:	441c      	add	r4, r3
 8006066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800606a:	2200      	movs	r2, #0
 800606c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006070:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006078:	4642      	mov	r2, r8
 800607a:	464b      	mov	r3, r9
 800607c:	1891      	adds	r1, r2, r2
 800607e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006080:	415b      	adcs	r3, r3
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006088:	4641      	mov	r1, r8
 800608a:	1851      	adds	r1, r2, r1
 800608c:	6339      	str	r1, [r7, #48]	@ 0x30
 800608e:	4649      	mov	r1, r9
 8006090:	414b      	adcs	r3, r1
 8006092:	637b      	str	r3, [r7, #52]	@ 0x34
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060a0:	4659      	mov	r1, fp
 80060a2:	00cb      	lsls	r3, r1, #3
 80060a4:	4651      	mov	r1, sl
 80060a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060aa:	4651      	mov	r1, sl
 80060ac:	00ca      	lsls	r2, r1, #3
 80060ae:	4610      	mov	r0, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	4642      	mov	r2, r8
 80060b6:	189b      	adds	r3, r3, r2
 80060b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060bc:	464b      	mov	r3, r9
 80060be:	460a      	mov	r2, r1
 80060c0:	eb42 0303 	adc.w	r3, r2, r3
 80060c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060dc:	460b      	mov	r3, r1
 80060de:	18db      	adds	r3, r3, r3
 80060e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060e2:	4613      	mov	r3, r2
 80060e4:	eb42 0303 	adc.w	r3, r2, r3
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060f2:	f7fa f8c5 	bl	8000280 <__aeabi_uldivmod>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <UART_SetConfig+0x2d4>)
 80060fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	2164      	movs	r1, #100	@ 0x64
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	3332      	adds	r3, #50	@ 0x32
 800610e:	4a08      	ldr	r2, [pc, #32]	@ (8006130 <UART_SetConfig+0x2d4>)
 8006110:	fba2 2303 	umull	r2, r3, r2, r3
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	f003 0207 	and.w	r2, r3, #7
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4422      	add	r2, r4
 8006122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006124:	e106      	b.n	8006334 <UART_SetConfig+0x4d8>
 8006126:	bf00      	nop
 8006128:	40011000 	.word	0x40011000
 800612c:	40011400 	.word	0x40011400
 8006130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006138:	2200      	movs	r2, #0
 800613a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800613e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006146:	4642      	mov	r2, r8
 8006148:	464b      	mov	r3, r9
 800614a:	1891      	adds	r1, r2, r2
 800614c:	6239      	str	r1, [r7, #32]
 800614e:	415b      	adcs	r3, r3
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
 8006152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006156:	4641      	mov	r1, r8
 8006158:	1854      	adds	r4, r2, r1
 800615a:	4649      	mov	r1, r9
 800615c:	eb43 0501 	adc.w	r5, r3, r1
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	00eb      	lsls	r3, r5, #3
 800616a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800616e:	00e2      	lsls	r2, r4, #3
 8006170:	4614      	mov	r4, r2
 8006172:	461d      	mov	r5, r3
 8006174:	4643      	mov	r3, r8
 8006176:	18e3      	adds	r3, r4, r3
 8006178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800617c:	464b      	mov	r3, r9
 800617e:	eb45 0303 	adc.w	r3, r5, r3
 8006182:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006192:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061a2:	4629      	mov	r1, r5
 80061a4:	008b      	lsls	r3, r1, #2
 80061a6:	4621      	mov	r1, r4
 80061a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ac:	4621      	mov	r1, r4
 80061ae:	008a      	lsls	r2, r1, #2
 80061b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061b4:	f7fa f864 	bl	8000280 <__aeabi_uldivmod>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4b60      	ldr	r3, [pc, #384]	@ (8006340 <UART_SetConfig+0x4e4>)
 80061be:	fba3 2302 	umull	r2, r3, r3, r2
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	011c      	lsls	r4, r3, #4
 80061c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061d8:	4642      	mov	r2, r8
 80061da:	464b      	mov	r3, r9
 80061dc:	1891      	adds	r1, r2, r2
 80061de:	61b9      	str	r1, [r7, #24]
 80061e0:	415b      	adcs	r3, r3
 80061e2:	61fb      	str	r3, [r7, #28]
 80061e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061e8:	4641      	mov	r1, r8
 80061ea:	1851      	adds	r1, r2, r1
 80061ec:	6139      	str	r1, [r7, #16]
 80061ee:	4649      	mov	r1, r9
 80061f0:	414b      	adcs	r3, r1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006200:	4659      	mov	r1, fp
 8006202:	00cb      	lsls	r3, r1, #3
 8006204:	4651      	mov	r1, sl
 8006206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800620a:	4651      	mov	r1, sl
 800620c:	00ca      	lsls	r2, r1, #3
 800620e:	4610      	mov	r0, r2
 8006210:	4619      	mov	r1, r3
 8006212:	4603      	mov	r3, r0
 8006214:	4642      	mov	r2, r8
 8006216:	189b      	adds	r3, r3, r2
 8006218:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800621c:	464b      	mov	r3, r9
 800621e:	460a      	mov	r2, r1
 8006220:	eb42 0303 	adc.w	r3, r2, r3
 8006224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006232:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006240:	4649      	mov	r1, r9
 8006242:	008b      	lsls	r3, r1, #2
 8006244:	4641      	mov	r1, r8
 8006246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800624a:	4641      	mov	r1, r8
 800624c:	008a      	lsls	r2, r1, #2
 800624e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006252:	f7fa f815 	bl	8000280 <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4611      	mov	r1, r2
 800625c:	4b38      	ldr	r3, [pc, #224]	@ (8006340 <UART_SetConfig+0x4e4>)
 800625e:	fba3 2301 	umull	r2, r3, r3, r1
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	2264      	movs	r2, #100	@ 0x64
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	1acb      	subs	r3, r1, r3
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	3332      	adds	r3, #50	@ 0x32
 8006270:	4a33      	ldr	r2, [pc, #204]	@ (8006340 <UART_SetConfig+0x4e4>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800627c:	441c      	add	r4, r3
 800627e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006282:	2200      	movs	r2, #0
 8006284:	673b      	str	r3, [r7, #112]	@ 0x70
 8006286:	677a      	str	r2, [r7, #116]	@ 0x74
 8006288:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800628c:	4642      	mov	r2, r8
 800628e:	464b      	mov	r3, r9
 8006290:	1891      	adds	r1, r2, r2
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	415b      	adcs	r3, r3
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800629c:	4641      	mov	r1, r8
 800629e:	1851      	adds	r1, r2, r1
 80062a0:	6039      	str	r1, [r7, #0]
 80062a2:	4649      	mov	r1, r9
 80062a4:	414b      	adcs	r3, r1
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062b4:	4659      	mov	r1, fp
 80062b6:	00cb      	lsls	r3, r1, #3
 80062b8:	4651      	mov	r1, sl
 80062ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062be:	4651      	mov	r1, sl
 80062c0:	00ca      	lsls	r2, r1, #3
 80062c2:	4610      	mov	r0, r2
 80062c4:	4619      	mov	r1, r3
 80062c6:	4603      	mov	r3, r0
 80062c8:	4642      	mov	r2, r8
 80062ca:	189b      	adds	r3, r3, r2
 80062cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ce:	464b      	mov	r3, r9
 80062d0:	460a      	mov	r2, r1
 80062d2:	eb42 0303 	adc.w	r3, r2, r3
 80062d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80062e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062f0:	4649      	mov	r1, r9
 80062f2:	008b      	lsls	r3, r1, #2
 80062f4:	4641      	mov	r1, r8
 80062f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062fa:	4641      	mov	r1, r8
 80062fc:	008a      	lsls	r2, r1, #2
 80062fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006302:	f7f9 ffbd 	bl	8000280 <__aeabi_uldivmod>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4b0d      	ldr	r3, [pc, #52]	@ (8006340 <UART_SetConfig+0x4e4>)
 800630c:	fba3 1302 	umull	r1, r3, r3, r2
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	2164      	movs	r1, #100	@ 0x64
 8006314:	fb01 f303 	mul.w	r3, r1, r3
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	3332      	adds	r3, #50	@ 0x32
 800631e:	4a08      	ldr	r2, [pc, #32]	@ (8006340 <UART_SetConfig+0x4e4>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	f003 020f 	and.w	r2, r3, #15
 800632a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4422      	add	r2, r4
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	bf00      	nop
 8006336:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800633a:	46bd      	mov	sp, r7
 800633c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006340:	51eb851f 	.word	0x51eb851f

08006344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006344:	b084      	sub	sp, #16
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	f107 001c 	add.w	r0, r7, #28
 8006352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	2b01      	cmp	r3, #1
 800635a:	d122      	bne.n	80063a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006360:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006386:	2b01      	cmp	r3, #1
 8006388:	d105      	bne.n	8006396 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f9c0 	bl	800671c <USB_CoreReset>
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]
 80063a0:	e01a      	b.n	80063d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9b4 	bl	800671c <USB_CoreReset>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80063ca:	e005      	b.n	80063d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d10b      	bne.n	80063f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f043 0206 	orr.w	r2, r3, #6
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f043 0220 	orr.w	r2, r3, #32
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006402:	b004      	add	sp, #16
 8006404:	4770      	bx	lr

08006406 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f043 0201 	orr.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f023 0201 	bic.w	r2, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d115      	bne.n	8006498 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006478:	2001      	movs	r0, #1
 800647a:	f7fb f8af 	bl	80015dc <HAL_Delay>
      ms++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f93a 	bl	80066fe <USB_GetMode>
 800648a:	4603      	mov	r3, r0
 800648c:	2b01      	cmp	r3, #1
 800648e:	d01e      	beq.n	80064ce <USB_SetCurrentMode+0x84>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b31      	cmp	r3, #49	@ 0x31
 8006494:	d9f0      	bls.n	8006478 <USB_SetCurrentMode+0x2e>
 8006496:	e01a      	b.n	80064ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d115      	bne.n	80064ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064aa:	2001      	movs	r0, #1
 80064ac:	f7fb f896 	bl	80015dc <HAL_Delay>
      ms++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f921 	bl	80066fe <USB_GetMode>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <USB_SetCurrentMode+0x84>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b31      	cmp	r3, #49	@ 0x31
 80064c6:	d9f0      	bls.n	80064aa <USB_SetCurrentMode+0x60>
 80064c8:	e001      	b.n	80064ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e005      	b.n	80064da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b32      	cmp	r3, #50	@ 0x32
 80064d2:	d101      	bne.n	80064d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4a13      	ldr	r2, [pc, #76]	@ (8006548 <USB_FlushTxFifo+0x64>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d901      	bls.n	8006504 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e01b      	b.n	800653c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	daf2      	bge.n	80064f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	019b      	lsls	r3, r3, #6
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4a08      	ldr	r2, [pc, #32]	@ (8006548 <USB_FlushTxFifo+0x64>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e006      	b.n	800653c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b20      	cmp	r3, #32
 8006538:	d0f0      	beq.n	800651c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	00030d40 	.word	0x00030d40

0800654c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a11      	ldr	r2, [pc, #68]	@ (80065a8 <USB_FlushRxFifo+0x5c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d901      	bls.n	800656a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e018      	b.n	800659c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	daf2      	bge.n	8006558 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2210      	movs	r2, #16
 800657a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3301      	adds	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4a08      	ldr	r2, [pc, #32]	@ (80065a8 <USB_FlushRxFifo+0x5c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d901      	bls.n	800658e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e006      	b.n	800659c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0310 	and.w	r3, r3, #16
 8006596:	2b10      	cmp	r3, #16
 8006598:	d0f0      	beq.n	800657c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	00030d40 	.word	0x00030d40

080065ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b089      	sub	sp, #36	@ 0x24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4611      	mov	r1, r2
 80065b8:	461a      	mov	r2, r3
 80065ba:	460b      	mov	r3, r1
 80065bc:	71fb      	strb	r3, [r7, #7]
 80065be:	4613      	mov	r3, r2
 80065c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80065ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d123      	bne.n	800661a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80065d2:	88bb      	ldrh	r3, [r7, #4]
 80065d4:	3303      	adds	r3, #3
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	e018      	b.n	8006612 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	031a      	lsls	r2, r3, #12
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ec:	461a      	mov	r2, r3
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	3301      	adds	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	3301      	adds	r3, #1
 80065fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	3301      	adds	r3, #1
 8006604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	3301      	adds	r3, #1
 800660a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	3301      	adds	r3, #1
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	429a      	cmp	r2, r3
 8006618:	d3e2      	bcc.n	80065e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3724      	adds	r7, #36	@ 0x24
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006628:	b480      	push	{r7}
 800662a:	b08b      	sub	sp, #44	@ 0x2c
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800663e:	88fb      	ldrh	r3, [r7, #6]
 8006640:	089b      	lsrs	r3, r3, #2
 8006642:	b29b      	uxth	r3, r3
 8006644:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	f003 0303 	and.w	r3, r3, #3
 800664c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800664e:	2300      	movs	r3, #0
 8006650:	623b      	str	r3, [r7, #32]
 8006652:	e014      	b.n	800667e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	3301      	adds	r3, #1
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	3301      	adds	r3, #1
 800666a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	3301      	adds	r3, #1
 8006670:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	3301      	adds	r3, #1
 8006676:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	3301      	adds	r3, #1
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	6a3a      	ldr	r2, [r7, #32]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	429a      	cmp	r2, r3
 8006684:	d3e6      	bcc.n	8006654 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006686:	8bfb      	ldrh	r3, [r7, #30]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01e      	beq.n	80066ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006696:	461a      	mov	r2, r3
 8006698:	f107 0310 	add.w	r3, r7, #16
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	701a      	strb	r2, [r3, #0]
      i++;
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	3301      	adds	r3, #1
 80066b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	3301      	adds	r3, #1
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80066be:	8bfb      	ldrh	r3, [r7, #30]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066c4:	8bfb      	ldrh	r3, [r7, #30]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1ea      	bne.n	80066a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	372c      	adds	r7, #44	@ 0x2c
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066f0:	68fb      	ldr	r3, [r7, #12]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f003 0301 	and.w	r3, r3, #1
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3301      	adds	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a13      	ldr	r2, [pc, #76]	@ (8006780 <USB_CoreReset+0x64>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e01b      	b.n	8006772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	daf2      	bge.n	8006728 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f043 0201 	orr.w	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3301      	adds	r3, #1
 8006756:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a09      	ldr	r2, [pc, #36]	@ (8006780 <USB_CoreReset+0x64>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d901      	bls.n	8006764 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e006      	b.n	8006772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b01      	cmp	r3, #1
 800676e:	d0f0      	beq.n	8006752 <USB_CoreReset+0x36>

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	00030d40 	.word	0x00030d40

08006784 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006784:	b084      	sub	sp, #16
 8006786:	b580      	push	{r7, lr}
 8006788:	b086      	sub	sp, #24
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067a4:	461a      	mov	r2, r3
 80067a6:	2300      	movs	r3, #0
 80067a8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d018      	beq.n	800680c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80067da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d10a      	bne.n	80067f6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067ee:	f043 0304 	orr.w	r3, r3, #4
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	e014      	b.n	8006820 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006804:	f023 0304 	bic.w	r3, r3, #4
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e009      	b.n	8006820 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800681a:	f023 0304 	bic.w	r3, r3, #4
 800681e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006820:	2110      	movs	r1, #16
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff fe5e 	bl	80064e4 <USB_FlushTxFifo>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff fe8a 	bl	800654c <USB_FlushRxFifo>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e015      	b.n	8006874 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006854:	461a      	mov	r2, r3
 8006856:	f04f 33ff 	mov.w	r3, #4294967295
 800685a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3e5      	bcc.n	8006848 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800689c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a13      	ldr	r2, [pc, #76]	@ (80068f0 <USB_HostInit+0x16c>)
 80068a2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a13      	ldr	r2, [pc, #76]	@ (80068f4 <USB_HostInit+0x170>)
 80068a8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80068ac:	e009      	b.n	80068c2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2280      	movs	r2, #128	@ 0x80
 80068b2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a10      	ldr	r2, [pc, #64]	@ (80068f8 <USB_HostInit+0x174>)
 80068b8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a0f      	ldr	r2, [pc, #60]	@ (80068fc <USB_HostInit+0x178>)
 80068be:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d105      	bne.n	80068d4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f043 0210 	orr.w	r2, r3, #16
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699a      	ldr	r2, [r3, #24]
 80068d8:	4b09      	ldr	r3, [pc, #36]	@ (8006900 <USB_HostInit+0x17c>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068ec:	b004      	add	sp, #16
 80068ee:	4770      	bx	lr
 80068f0:	01000200 	.word	0x01000200
 80068f4:	00e00300 	.word	0x00e00300
 80068f8:	00600080 	.word	0x00600080
 80068fc:	004000e0 	.word	0x004000e0
 8006900:	a3200008 	.word	0xa3200008

08006904 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800693c:	4313      	orrs	r3, r2
 800693e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d107      	bne.n	8006956 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800694c:	461a      	mov	r2, r3
 800694e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006952:	6053      	str	r3, [r2, #4]
 8006954:	e009      	b.n	800696a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d106      	bne.n	800696a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006962:	461a      	mov	r2, r3
 8006964:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006968:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006998:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80069a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80069a8:	2064      	movs	r0, #100	@ 0x64
 80069aa:	f7fa fe17 	bl	80015dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80069b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80069bc:	200a      	movs	r0, #10
 80069be:	f7fa fe0d 	bl	80015dc <HAL_Delay>

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80069f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d109      	bne.n	8006a10 <USB_DriveVbus+0x44>
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d106      	bne.n	8006a10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006a0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a1a:	d109      	bne.n	8006a30 <USB_DriveVbus+0x64>
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006a2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	0c5b      	lsrs	r3, r3, #17
 8006a5c:	f003 0303 	and.w	r3, r3, #3
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	b29b      	uxth	r3, r3
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	70fb      	strb	r3, [r7, #3]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70bb      	strb	r3, [r7, #2]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006ac6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d87e      	bhi.n	8006bcc <USB_HC_Init+0x13c>
 8006ace:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad4 <USB_HC_Init+0x44>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006b8f 	.word	0x08006b8f
 8006adc:	08006ae5 	.word	0x08006ae5
 8006ae0:	08006b51 	.word	0x08006b51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af0:	461a      	mov	r2, r3
 8006af2:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006af6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006af8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da10      	bge.n	8006b22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	0151      	lsls	r1, r2, #5
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	440a      	add	r2, r1
 8006b16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b1e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006b20:	e057      	b.n	8006bd2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d051      	beq.n	8006bd2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006b4c:	60d3      	str	r3, [r2, #12]
      break;
 8006b4e:	e040      	b.n	8006bd2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006b62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006b64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da34      	bge.n	8006bd6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006b8c:	e023      	b.n	8006bd6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f240 2325 	movw	r3, #549	@ 0x225
 8006ba0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da17      	bge.n	8006bda <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	78fa      	ldrb	r2, [r7, #3]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bc4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006bc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006bca:	e006      	b.n	8006bda <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	77fb      	strb	r3, [r7, #31]
      break;
 8006bd0:	e004      	b.n	8006bdc <USB_HC_Init+0x14c>
      break;
 8006bd2:	bf00      	nop
 8006bd4:	e002      	b.n	8006bdc <USB_HC_Init+0x14c>
      break;
 8006bd6:	bf00      	nop
 8006bd8:	e000      	b.n	8006bdc <USB_HC_Init+0x14c>
      break;
 8006bda:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bf6:	f043 0302 	orr.w	r3, r3, #2
 8006bfa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c02:	699a      	ldr	r2, [r3, #24]
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c10:	6939      	ldr	r1, [r7, #16]
 8006c12:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006c16:	4313      	orrs	r3, r2
 8006c18:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006c26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	da03      	bge.n	8006c36 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	e001      	b.n	8006c3a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff feff 	bl	8006a3e <USB_GetHostSpeed>
 8006c40:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006c42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d106      	bne.n	8006c58 <USB_HC_Init+0x1c8>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d003      	beq.n	8006c58 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006c50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	e001      	b.n	8006c5c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006c5c:	787b      	ldrb	r3, [r7, #1]
 8006c5e:	059b      	lsls	r3, r3, #22
 8006c60:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006c64:	78bb      	ldrb	r3, [r7, #2]
 8006c66:	02db      	lsls	r3, r3, #11
 8006c68:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006c6c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006c6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006c72:	049b      	lsls	r3, r3, #18
 8006c74:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006c78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006c7a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006c80:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	0159      	lsls	r1, r3, #5
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	440b      	add	r3, r1
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c92:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006c98:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006c9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d003      	beq.n	8006caa <USB_HC_Init+0x21a>
 8006ca2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d10f      	bne.n	8006cca <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	78fa      	ldrb	r2, [r7, #3]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cc4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006cc8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006cca:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08c      	sub	sp, #48	@ 0x30
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cf0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02d      	beq.n	8006d5a <USB_HC_StartXfer+0x86>
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	791b      	ldrb	r3, [r3, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d129      	bne.n	8006d5a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d117      	bne.n	8006d3c <USB_HC_StartXfer+0x68>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	79db      	ldrb	r3, [r3, #7]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <USB_HC_StartXfer+0x48>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	79db      	ldrb	r3, [r3, #7]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d10f      	bne.n	8006d3c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	6a3a      	ldr	r2, [r7, #32]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10b      	bne.n	8006d5a <USB_HC_StartXfer+0x86>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	795b      	ldrb	r3, [r3, #5]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d107      	bne.n	8006d5a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fa0f 	bl	8007174 <USB_DoPing>
      return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e0f8      	b.n	8006f4c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d018      	beq.n	8006d94 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	8912      	ldrh	r2, [r2, #8]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	8912      	ldrh	r2, [r2, #8]
 8006d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d76:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8006d78:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006d7a:	8b7b      	ldrh	r3, [r7, #26]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d90b      	bls.n	8006d98 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006d80:	8b7b      	ldrh	r3, [r7, #26]
 8006d82:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006d84:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	8912      	ldrh	r2, [r2, #8]
 8006d8a:	fb03 f202 	mul.w	r2, r3, r2
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	611a      	str	r2, [r3, #16]
 8006d92:	e001      	b.n	8006d98 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006d94:	2301      	movs	r3, #1
 8006d96:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	78db      	ldrb	r3, [r3, #3]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006da0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	8912      	ldrh	r2, [r2, #8]
 8006da6:	fb03 f202 	mul.w	r2, r3, r2
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	611a      	str	r2, [r3, #16]
 8006dae:	e003      	b.n	8006db8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006dc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006dc2:	04d9      	lsls	r1, r3, #19
 8006dc4:	4b63      	ldr	r3, [pc, #396]	@ (8006f54 <USB_HC_StartXfer+0x280>)
 8006dc6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006dc8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	7a9b      	ldrb	r3, [r3, #10]
 8006dce:	075b      	lsls	r3, r3, #29
 8006dd0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006dd4:	69f9      	ldr	r1, [r7, #28]
 8006dd6:	0148      	lsls	r0, r1, #5
 8006dd8:	6a39      	ldr	r1, [r7, #32]
 8006dda:	4401      	add	r1, r0
 8006ddc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006de0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006de2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	68d9      	ldr	r1, [r3, #12]
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dfa:	460a      	mov	r2, r1
 8006dfc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bf0c      	ite	eq
 8006e0e:	2301      	moveq	r3, #1
 8006e10:	2300      	movne	r3, #0
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69fa      	ldr	r2, [r7, #28]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	6a3a      	ldr	r2, [r7, #32]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006e34:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	7e7b      	ldrb	r3, [r7, #25]
 8006e46:	075b      	lsls	r3, r3, #29
 8006e48:	69f9      	ldr	r1, [r7, #28]
 8006e4a:	0148      	lsls	r0, r1, #5
 8006e4c:	6a39      	ldr	r1, [r7, #32]
 8006e4e:	4401      	add	r1, r0
 8006e50:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006e54:	4313      	orrs	r3, r2
 8006e56:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e6e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	78db      	ldrb	r3, [r3, #3]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	e003      	b.n	8006e8a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e88:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e90:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e04e      	b.n	8006f4c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	78db      	ldrb	r3, [r3, #3]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d149      	bne.n	8006f4a <USB_HC_StartXfer+0x276>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d045      	beq.n	8006f4a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	79db      	ldrb	r3, [r3, #7]
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d830      	bhi.n	8006f28 <USB_HC_StartXfer+0x254>
 8006ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <USB_HC_StartXfer+0x1f8>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006edd 	.word	0x08006edd
 8006ed0:	08006f01 	.word	0x08006f01
 8006ed4:	08006edd 	.word	0x08006edd
 8006ed8:	08006f01 	.word	0x08006f01
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	3303      	adds	r3, #3
 8006ee2:	089b      	lsrs	r3, r3, #2
 8006ee4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006ee6:	8afa      	ldrh	r2, [r7, #22]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d91c      	bls.n	8006f2c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f043 0220 	orr.w	r2, r3, #32
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006efe:	e015      	b.n	8006f2c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	3303      	adds	r3, #3
 8006f06:	089b      	lsrs	r3, r3, #2
 8006f08:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006f0a:	8afa      	ldrh	r2, [r7, #22]
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d90a      	bls.n	8006f30 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	619a      	str	r2, [r3, #24]
        }
        break;
 8006f26:	e003      	b.n	8006f30 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006f28:	bf00      	nop
 8006f2a:	e002      	b.n	8006f32 <USB_HC_StartXfer+0x25e>
        break;
 8006f2c:	bf00      	nop
 8006f2e:	e000      	b.n	8006f32 <USB_HC_StartXfer+0x25e>
        break;
 8006f30:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	68d9      	ldr	r1, [r3, #12]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	785a      	ldrb	r2, [r3, #1]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2000      	movs	r0, #0
 8006f42:	9000      	str	r0, [sp, #0]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff fb31 	bl	80065ac <USB_WritePacket>
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3728      	adds	r7, #40	@ 0x28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	1ff80000 	.word	0x1ff80000

08006f58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	b29b      	uxth	r3, r3
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b089      	sub	sp, #36	@ 0x24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	0c9b      	lsrs	r3, r3, #18
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	0fdb      	lsrs	r3, r3, #31
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d104      	bne.n	8006fd4 <USB_HC_Halt+0x5a>
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e0c8      	b.n	8007166 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <USB_HC_Halt+0x66>
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d163      	bne.n	80070a8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ffa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ffe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	f040 80ab 	bne.w	8007164 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d133      	bne.n	8007082 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	4413      	add	r3, r2
 8007022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	0151      	lsls	r1, r2, #5
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	440a      	add	r2, r1
 8007030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007034:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007038:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	440a      	add	r2, r1
 8007050:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007054:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007058:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007066:	d81d      	bhi.n	80070a4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800707a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800707e:	d0ec      	beq.n	800705a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007080:	e070      	b.n	8007164 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	440a      	add	r2, r1
 8007098:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800709c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070a2:	e05f      	b.n	8007164 <USB_HC_Halt+0x1ea>
            break;
 80070a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070a6:	e05d      	b.n	8007164 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	0151      	lsls	r1, r2, #5
 80070ba:	69fa      	ldr	r2, [r7, #28]
 80070bc:	440a      	add	r2, r1
 80070be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d133      	bne.n	8007140 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	440a      	add	r2, r1
 800710e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007112:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007116:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3301      	adds	r3, #1
 800711c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007124:	d81d      	bhi.n	8007162 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4413      	add	r3, r2
 800712e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800713c:	d0ec      	beq.n	8007118 <USB_HC_Halt+0x19e>
 800713e:	e011      	b.n	8007164 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	440a      	add	r2, r1
 8007156:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800715a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e000      	b.n	8007164 <USB_HC_Halt+0x1ea>
          break;
 8007162:	bf00      	nop
    }
  }

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3724      	adds	r7, #36	@ 0x24
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
	...

08007174 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007188:	2301      	movs	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	04da      	lsls	r2, r3, #19
 8007190:	4b15      	ldr	r3, [pc, #84]	@ (80071e8 <USB_DoPing+0x74>)
 8007192:	4013      	ands	r3, r2
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	440a      	add	r2, r1
 800719c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d2:	461a      	mov	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	1ff80000 	.word	0x1ff80000

080071ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff f911 	bl	8006428 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007206:	2110      	movs	r1, #16
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff f96b 	bl	80064e4 <USB_FlushTxFifo>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff f997 	bl	800654c <USB_FlushRxFifo>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007228:	2300      	movs	r3, #0
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	e01f      	b.n	800726e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	4413      	add	r3, r2
 8007236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007244:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800724c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007254:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007262:	461a      	mov	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	3301      	adds	r3, #1
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b0f      	cmp	r3, #15
 8007272:	d9dc      	bls.n	800722e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	e034      	b.n	80072e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007290:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007298:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ae:	461a      	mov	r2, r3
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072c0:	d80c      	bhi.n	80072dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072d8:	d0ec      	beq.n	80072b4 <USB_StopHost+0xc8>
 80072da:	e000      	b.n	80072de <USB_StopHost+0xf2>
        break;
 80072dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	3301      	adds	r3, #1
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d9c7      	bls.n	800727a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072f0:	461a      	mov	r2, r3
 80072f2:	f04f 33ff 	mov.w	r3, #4294967295
 80072f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f04f 32ff 	mov.w	r2, #4294967295
 80072fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff f880 	bl	8006406 <USB_EnableGlobalInt>

  return ret;
 8007306:	7ffb      	ldrb	r3, [r7, #31]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007310:	b590      	push	{r4, r7, lr}
 8007312:	b089      	sub	sp, #36	@ 0x24
 8007314:	af04      	add	r7, sp, #16
 8007316:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007318:	2301      	movs	r3, #1
 800731a:	2202      	movs	r2, #2
 800731c:	2102      	movs	r1, #2
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fcb2 	bl	8007c88 <USBH_FindInterface>
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	2bff      	cmp	r3, #255	@ 0xff
 800732c:	d002      	beq.n	8007334 <USBH_CDC_InterfaceInit+0x24>
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d901      	bls.n	8007338 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007334:	2302      	movs	r3, #2
 8007336:	e13d      	b.n	80075b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fc87 	bl	8007c50 <USBH_SelectInterface>
 8007342:	4603      	mov	r3, r0
 8007344:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800734c:	2302      	movs	r3, #2
 800734e:	e131      	b.n	80075b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007356:	2050      	movs	r0, #80	@ 0x50
 8007358:	f005 fcf8 	bl	800cd4c <malloc>
 800735c:	4603      	mov	r3, r0
 800735e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007370:	2302      	movs	r3, #2
 8007372:	e11f      	b.n	80075b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007374:	2250      	movs	r2, #80	@ 0x50
 8007376:	2100      	movs	r1, #0
 8007378:	68b8      	ldr	r0, [r7, #8]
 800737a:	f005 fe13 	bl	800cfa4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	211a      	movs	r1, #26
 8007384:	fb01 f303 	mul.w	r3, r1, r3
 8007388:	4413      	add	r3, r2
 800738a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b25b      	sxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	da15      	bge.n	80073c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	211a      	movs	r1, #26
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	211a      	movs	r1, #26
 80073b2:	fb01 f303 	mul.w	r3, r1, r3
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073bc:	881a      	ldrh	r2, [r3, #0]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f002 f976 	bl	80096ba <USBH_AllocPipe>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	7819      	ldrb	r1, [r3, #0]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	7858      	ldrb	r0, [r3, #1]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	8952      	ldrh	r2, [r2, #10]
 80073ee:	9202      	str	r2, [sp, #8]
 80073f0:	2203      	movs	r2, #3
 80073f2:	9201      	str	r2, [sp, #4]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4623      	mov	r3, r4
 80073f8:	4602      	mov	r2, r0
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f002 f92e 	bl	800965c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2200      	movs	r2, #0
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f005 fc1b 	bl	800cc44 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800740e:	2300      	movs	r3, #0
 8007410:	2200      	movs	r2, #0
 8007412:	210a      	movs	r1, #10
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fc37 	bl	8007c88 <USBH_FindInterface>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2bff      	cmp	r3, #255	@ 0xff
 8007422:	d002      	beq.n	800742a <USBH_CDC_InterfaceInit+0x11a>
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d901      	bls.n	800742e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800742a:	2302      	movs	r3, #2
 800742c:	e0c2      	b.n	80075b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	211a      	movs	r1, #26
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	4413      	add	r3, r2
 800743a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b25b      	sxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	da16      	bge.n	8007474 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	211a      	movs	r1, #26
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	4413      	add	r3, r2
 8007452:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007456:	781a      	ldrb	r2, [r3, #0]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	211a      	movs	r1, #26
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	4413      	add	r3, r2
 8007468:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800746c:	881a      	ldrh	r2, [r3, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	835a      	strh	r2, [r3, #26]
 8007472:	e015      	b.n	80074a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	211a      	movs	r1, #26
 800747a:	fb01 f303 	mul.w	r3, r1, r3
 800747e:	4413      	add	r3, r2
 8007480:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007484:	781a      	ldrb	r2, [r3, #0]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	211a      	movs	r1, #26
 8007490:	fb01 f303 	mul.w	r3, r1, r3
 8007494:	4413      	add	r3, r2
 8007496:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800749a:	881a      	ldrh	r2, [r3, #0]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	211a      	movs	r1, #26
 80074a6:	fb01 f303 	mul.w	r3, r1, r3
 80074aa:	4413      	add	r3, r2
 80074ac:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b25b      	sxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	da16      	bge.n	80074e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	211a      	movs	r1, #26
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	211a      	movs	r1, #26
 80074d4:	fb01 f303 	mul.w	r3, r1, r3
 80074d8:	4413      	add	r3, r2
 80074da:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80074de:	881a      	ldrh	r2, [r3, #0]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	835a      	strh	r2, [r3, #26]
 80074e4:	e015      	b.n	8007512 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	211a      	movs	r1, #26
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	211a      	movs	r1, #26
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	4413      	add	r3, r2
 8007508:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800750c:	881a      	ldrh	r2, [r3, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	7b9b      	ldrb	r3, [r3, #14]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f002 f8ce 	bl	80096ba <USBH_AllocPipe>
 800751e:	4603      	mov	r3, r0
 8007520:	461a      	mov	r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	7bdb      	ldrb	r3, [r3, #15]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f002 f8c4 	bl	80096ba <USBH_AllocPipe>
 8007532:	4603      	mov	r3, r0
 8007534:	461a      	mov	r2, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	7b59      	ldrb	r1, [r3, #13]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	7b98      	ldrb	r0, [r3, #14]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	8b12      	ldrh	r2, [r2, #24]
 8007552:	9202      	str	r2, [sp, #8]
 8007554:	2202      	movs	r2, #2
 8007556:	9201      	str	r2, [sp, #4]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4623      	mov	r3, r4
 800755c:	4602      	mov	r2, r0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f002 f87c 	bl	800965c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	7b19      	ldrb	r1, [r3, #12]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	7bd8      	ldrb	r0, [r3, #15]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	8b52      	ldrh	r2, [r2, #26]
 800757c:	9202      	str	r2, [sp, #8]
 800757e:	2202      	movs	r2, #2
 8007580:	9201      	str	r2, [sp, #4]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	4623      	mov	r3, r4
 8007586:	4602      	mov	r2, r0
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f002 f867 	bl	800965c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	7b5b      	ldrb	r3, [r3, #13]
 800759a:	2200      	movs	r2, #0
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f005 fb50 	bl	800cc44 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	7b1b      	ldrb	r3, [r3, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f005 fb49 	bl	800cc44 <USBH_LL_SetToggle>

  return USBH_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd90      	pop	{r4, r7, pc}

080075bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00e      	beq.n	80075f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f002 f85c 	bl	800969a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f002 f887 	bl	80096fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	7b1b      	ldrb	r3, [r3, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00e      	beq.n	800761a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	7b1b      	ldrb	r3, [r3, #12]
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f002 f849 	bl	800969a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	7b1b      	ldrb	r3, [r3, #12]
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f002 f874 	bl	80096fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	7b5b      	ldrb	r3, [r3, #13]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00e      	beq.n	8007640 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	7b5b      	ldrb	r3, [r3, #13]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f002 f836 	bl	800969a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	7b5b      	ldrb	r3, [r3, #13]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f002 f861 	bl	80096fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	4618      	mov	r0, r3
 8007656:	f005 fb81 	bl	800cd5c <free>
    phost->pActiveClass->pData = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007660:	2200      	movs	r2, #0
 8007662:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3340      	adds	r3, #64	@ 0x40
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f8b1 	bl	80077ee <GetLineCoding>
 800768c:	4603      	mov	r3, r0
 800768e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d105      	bne.n	80076a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800769c:	2102      	movs	r1, #2
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80076a2:	7afb      	ldrb	r3, [r7, #11]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d877      	bhi.n	80077c0 <USBH_CDC_Process+0x114>
 80076d0:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <USBH_CDC_Process+0x2c>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	080076ed 	.word	0x080076ed
 80076dc:	080076f3 	.word	0x080076f3
 80076e0:	08007723 	.word	0x08007723
 80076e4:	08007797 	.word	0x08007797
 80076e8:	080077a5 	.word	0x080077a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]
      break;
 80076f0:	e06d      	b.n	80077ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f897 	bl	800782c <SetLineCoding>
 80076fe:	4603      	mov	r3, r0
 8007700:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d104      	bne.n	8007712 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007710:	e058      	b.n	80077c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d055      	beq.n	80077c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2204      	movs	r2, #4
 800771c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007720:	e050      	b.n	80077c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3340      	adds	r3, #64	@ 0x40
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f860 	bl	80077ee <GetLineCoding>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d126      	bne.n	8007786 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774a:	791b      	ldrb	r3, [r3, #4]
 800774c:	429a      	cmp	r2, r3
 800774e:	d13b      	bne.n	80077c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800775a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800775c:	429a      	cmp	r2, r3
 800775e:	d133      	bne.n	80077c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800776a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800776c:	429a      	cmp	r2, r3
 800776e:	d12b      	bne.n	80077c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007778:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800777a:	429a      	cmp	r2, r3
 800777c:	d124      	bne.n	80077c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f982 	bl	8007a88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007784:	e020      	b.n	80077c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d01d      	beq.n	80077c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2204      	movs	r2, #4
 8007790:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007794:	e018      	b.n	80077c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f867 	bl	800786a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f8f6 	bl	800798e <CDC_ProcessReception>
      break;
 80077a2:	e014      	b.n	80077ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80077a4:	2100      	movs	r1, #0
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 f951 	bl	8008a4e <USBH_ClrFeature>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80077be:	e005      	b.n	80077cc <USBH_CDC_Process+0x120>

    default:
      break;
 80077c0:	bf00      	nop
 80077c2:	e004      	b.n	80077ce <USBH_CDC_Process+0x122>
      break;
 80077c4:	bf00      	nop
 80077c6:	e002      	b.n	80077ce <USBH_CDC_Process+0x122>
      break;
 80077c8:	bf00      	nop
 80077ca:	e000      	b.n	80077ce <USBH_CDC_Process+0x122>
      break;
 80077cc:	bf00      	nop

  }

  return status;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	22a1      	movs	r2, #161	@ 0xa1
 80077fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2221      	movs	r2, #33	@ 0x21
 8007802:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2207      	movs	r2, #7
 8007814:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2207      	movs	r2, #7
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fbdc 	bl	8008fda <USBH_CtlReq>
 8007822:	4603      	mov	r3, r0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2221      	movs	r2, #33	@ 0x21
 800783a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2207      	movs	r2, #7
 8007852:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2207      	movs	r2, #7
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fbbd 	bl	8008fda <USBH_CtlReq>
 8007860:	4603      	mov	r3, r0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b086      	sub	sp, #24
 800786e:	af02      	add	r7, sp, #8
 8007870:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800787c:	2300      	movs	r3, #0
 800787e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007886:	2b01      	cmp	r3, #1
 8007888:	d002      	beq.n	8007890 <CDC_ProcessTransmission+0x26>
 800788a:	2b02      	cmp	r3, #2
 800788c:	d023      	beq.n	80078d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800788e:	e07a      	b.n	8007986 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	8b12      	ldrh	r2, [r2, #24]
 8007898:	4293      	cmp	r3, r2
 800789a:	d90b      	bls.n	80078b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8b1a      	ldrh	r2, [r3, #24]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	7b5b      	ldrb	r3, [r3, #13]
 80078a8:	2001      	movs	r0, #1
 80078aa:	9000      	str	r0, [sp, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 fe92 	bl	80095d6 <USBH_BulkSendData>
 80078b2:	e00b      	b.n	80078cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	7b5b      	ldrb	r3, [r3, #13]
 80078c2:	2001      	movs	r0, #1
 80078c4:	9000      	str	r0, [sp, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fe85 	bl	80095d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078d4:	e057      	b.n	8007986 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	7b5b      	ldrb	r3, [r3, #13]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f005 f987 	bl	800cbf0 <USBH_LL_GetURBState>
 80078e2:	4603      	mov	r3, r0
 80078e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80078e6:	7afb      	ldrb	r3, [r7, #11]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d136      	bne.n	800795a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	8b12      	ldrh	r2, [r2, #24]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d90e      	bls.n	8007916 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	8b12      	ldrh	r2, [r2, #24]
 8007900:	1a9a      	subs	r2, r3, r2
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	8b12      	ldrh	r2, [r2, #24]
 800790e:	441a      	add	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	61da      	str	r2, [r3, #28]
 8007914:	e002      	b.n	800791c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	d004      	beq.n	800792e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800792c:	e006      	b.n	800793c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f892 	bl	8007a60 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2204      	movs	r2, #4
 8007940:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007950:	2300      	movs	r3, #0
 8007952:	2200      	movs	r2, #0
 8007954:	f002 f8c2 	bl	8009adc <osMessageQueuePut>
      break;
 8007958:	e014      	b.n	8007984 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d111      	bne.n	8007984 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2204      	movs	r2, #4
 800796c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800797c:	2300      	movs	r3, #0
 800797e:	2200      	movs	r2, #0
 8007980:	f002 f8ac 	bl	8009adc <osMessageQueuePut>
      break;
 8007984:	bf00      	nop
  }
}
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b086      	sub	sp, #24
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d002      	beq.n	80079b4 <CDC_ProcessReception+0x26>
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d00e      	beq.n	80079d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80079b2:	e051      	b.n	8007a58 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	6a19      	ldr	r1, [r3, #32]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	8b5a      	ldrh	r2, [r3, #26]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	7b1b      	ldrb	r3, [r3, #12]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fe2d 	bl	8009620 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2204      	movs	r2, #4
 80079ca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80079ce:	e043      	b.n	8007a58 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	7b1b      	ldrb	r3, [r3, #12]
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f005 f90a 	bl	800cbf0 <USBH_LL_GetURBState>
 80079dc:	4603      	mov	r3, r0
 80079de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80079e0:	7cfb      	ldrb	r3, [r7, #19]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d137      	bne.n	8007a56 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	7b1b      	ldrb	r3, [r3, #12]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f005 f86d 	bl	800cacc <USBH_LL_GetLastXferSize>
 80079f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d016      	beq.n	8007a2c <CDC_ProcessReception+0x9e>
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	8b5b      	ldrh	r3, [r3, #26]
 8007a02:	461a      	mov	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d910      	bls.n	8007a2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad2      	subs	r2, r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6a1a      	ldr	r2, [r3, #32]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	441a      	add	r2, r3
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2203      	movs	r2, #3
 8007a26:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8007a2a:	e006      	b.n	8007a3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f81d 	bl	8007a74 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2200      	movs	r2, #0
 8007a52:	f002 f843 	bl	8009adc <osMessageQueuePut>
      break;
 8007a56:	bf00      	nop
  }
}
 8007a58:	bf00      	nop
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e044      	b.n	8007b3e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	79fa      	ldrb	r2, [r7, #7]
 8007ab8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f841 	bl	8007b54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d003      	beq.n	8007b00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007b00:	2200      	movs	r2, #0
 8007b02:	2104      	movs	r1, #4
 8007b04:	2010      	movs	r0, #16
 8007b06:	f001 ff76 	bl	80099f6 <osMessageQueueNew>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007b12:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <USBH_Init+0xac>)
 8007b14:	4a0d      	ldr	r2, [pc, #52]	@ (8007b4c <USBH_Init+0xb0>)
 8007b16:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007b18:	4b0b      	ldr	r3, [pc, #44]	@ (8007b48 <USBH_Init+0xac>)
 8007b1a:	2280      	movs	r2, #128	@ 0x80
 8007b1c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b48 <USBH_Init+0xac>)
 8007b20:	2218      	movs	r2, #24
 8007b22:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007b24:	4a08      	ldr	r2, [pc, #32]	@ (8007b48 <USBH_Init+0xac>)
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	4809      	ldr	r0, [pc, #36]	@ (8007b50 <USBH_Init+0xb4>)
 8007b2a:	f001 feb7 	bl	800989c <osThreadNew>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f004 ff14 	bl	800c964 <USBH_LL_Init>

  return USBH_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000270 	.word	0x20000270
 8007b4c:	0800d928 	.word	0x0800d928
 8007b50:	080087c5 	.word	0x080087c5

08007b54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b60:	2300      	movs	r3, #0
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e009      	b.n	8007b7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	33e0      	adds	r3, #224	@ 0xe0
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	2200      	movs	r2, #0
 8007b72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3301      	adds	r3, #1
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b0f      	cmp	r3, #15
 8007b7e:	d9f2      	bls.n	8007b66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b80:	2300      	movs	r3, #0
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	e009      	b.n	8007b9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b90:	2200      	movs	r2, #0
 8007b92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ba0:	d3f1      	bcc.n	8007b86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2240      	movs	r2, #64	@ 0x40
 8007bc6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d016      	beq.n	8007c3e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10e      	bne.n	8007c38 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007c20:	1c59      	adds	r1, r3, #1
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	33de      	adds	r3, #222	@ 0xde
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
 8007c36:	e004      	b.n	8007c42 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	73fb      	strb	r3, [r7, #15]
 8007c3c:	e001      	b.n	8007c42 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c3e:	2302      	movs	r3, #2
 8007c40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007c66:	78fa      	ldrb	r2, [r7, #3]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d204      	bcs.n	8007c76 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007c74:	e001      	b.n	8007c7a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c76:	2302      	movs	r3, #2
 8007c78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	4608      	mov	r0, r1
 8007c92:	4611      	mov	r1, r2
 8007c94:	461a      	mov	r2, r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	70fb      	strb	r3, [r7, #3]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	70bb      	strb	r3, [r7, #2]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007cb0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cb2:	e025      	b.n	8007d00 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	221a      	movs	r2, #26
 8007cb8:	fb02 f303 	mul.w	r3, r2, r3
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	3302      	adds	r3, #2
 8007cc4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	795b      	ldrb	r3, [r3, #5]
 8007cca:	78fa      	ldrb	r2, [r7, #3]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d002      	beq.n	8007cd6 <USBH_FindInterface+0x4e>
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	2bff      	cmp	r3, #255	@ 0xff
 8007cd4:	d111      	bne.n	8007cfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cda:	78ba      	ldrb	r2, [r7, #2]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d002      	beq.n	8007ce6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ce0:	78bb      	ldrb	r3, [r7, #2]
 8007ce2:	2bff      	cmp	r3, #255	@ 0xff
 8007ce4:	d109      	bne.n	8007cfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cea:	787a      	ldrb	r2, [r7, #1]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d002      	beq.n	8007cf6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007cf0:	787b      	ldrb	r3, [r7, #1]
 8007cf2:	2bff      	cmp	r3, #255	@ 0xff
 8007cf4:	d101      	bne.n	8007cfa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	e006      	b.n	8007d08 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d9d6      	bls.n	8007cb4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d06:	23ff      	movs	r3, #255	@ 0xff
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f004 fe5d 	bl	800c9dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007d22:	2101      	movs	r1, #1
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f004 ff76 	bl	800cc16 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af04      	add	r7, sp, #16
 8007d3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d102      	bne.n	8007d56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2203      	movs	r2, #3
 8007d54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b0b      	cmp	r3, #11
 8007d5e:	f200 8244 	bhi.w	80081ea <USBH_Process+0x4b6>
 8007d62:	a201      	add	r2, pc, #4	@ (adr r2, 8007d68 <USBH_Process+0x34>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007de7 	.word	0x08007de7
 8007d70:	08007e6b 	.word	0x08007e6b
 8007d74:	08008169 	.word	0x08008169
 8007d78:	080081eb 	.word	0x080081eb
 8007d7c:	08007f27 	.word	0x08007f27
 8007d80:	080080f3 	.word	0x080080f3
 8007d84:	08007f79 	.word	0x08007f79
 8007d88:	08007fb5 	.word	0x08007fb5
 8007d8c:	08007fed 	.word	0x08007fed
 8007d90:	0800804b 	.word	0x0800804b
 8007d94:	08008151 	.word	0x08008151
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8224 	beq.w	80081ee <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007dac:	20c8      	movs	r0, #200	@ 0xc8
 8007dae:	f004 ff79 	bl	800cca4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f004 fe6f 	bl	800ca96 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2200      	movs	r2, #0
 8007de0:	f001 fe7c 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007de4:	e203      	b.n	80081ee <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d107      	bne.n	8007e00 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	e025      	b.n	8007e4c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007e06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e0a:	d914      	bls.n	8007e36 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007e12:	3301      	adds	r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d903      	bls.n	8007e2e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	220d      	movs	r2, #13
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	e00e      	b.n	8007e4c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	701a      	strb	r2, [r3, #0]
 8007e34:	e00a      	b.n	8007e4c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007e3c:	f103 020a 	add.w	r2, r3, #10
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007e46:	200a      	movs	r0, #10
 8007e48:	f004 ff2c 	bl	800cca4 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e60:	2300      	movs	r3, #0
 8007e62:	2200      	movs	r2, #0
 8007e64:	f001 fe3a 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      break;
 8007e68:	e1c8      	b.n	80081fc <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e7a:	2104      	movs	r1, #4
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e80:	2064      	movs	r0, #100	@ 0x64
 8007e82:	f004 ff0f 	bl	800cca4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f004 fdde 	bl	800ca48 <USBH_LL_GetSpeed>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	461a      	mov	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2205      	movs	r2, #5
 8007e9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fc0b 	bl	80096ba <USBH_AllocPipe>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007eac:	2180      	movs	r1, #128	@ 0x80
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 fc03 	bl	80096ba <USBH_AllocPipe>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	7919      	ldrb	r1, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ed0:	9202      	str	r2, [sp, #8]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	9201      	str	r2, [sp, #4]
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2280      	movs	r2, #128	@ 0x80
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fbbd 	bl	800965c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	7959      	ldrb	r1, [r3, #5]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ef6:	9202      	str	r2, [sp, #8]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	9201      	str	r2, [sp, #4]
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	4603      	mov	r3, r0
 8007f00:	2200      	movs	r2, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 fbaa 	bl	800965c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f001 fddc 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      break;
 8007f24:	e16a      	b.n	80081fc <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f96e 	bl	8008208 <USBH_HandleEnum>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f040 815c 	bne.w	80081f2 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d103      	bne.n	8007f54 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2208      	movs	r2, #8
 8007f50:	701a      	strb	r2, [r3, #0]
 8007f52:	e002      	b.n	8007f5a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2207      	movs	r2, #7
 8007f58:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2205      	movs	r2, #5
 8007f5e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	f001 fdb3 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007f76:	e13c      	b.n	80081f2 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8139 	beq.w	80081f6 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2208      	movs	r2, #8
 8007f94:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2205      	movs	r2, #5
 8007f9a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007faa:	2300      	movs	r3, #0
 8007fac:	2200      	movs	r2, #0
 8007fae:	f001 fd95 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007fb2:	e120      	b.n	80081f6 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fcff 	bl	80089c0 <USBH_SetCfg>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2209      	movs	r2, #9
 8007fcc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f001 fd79 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      break;
 8007fea:	e107      	b.n	80081fc <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d015      	beq.n	8008026 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fd02 	bl	8008a06 <USBH_SetFeature>
 8008002:	4603      	mov	r3, r0
 8008004:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	220a      	movs	r2, #10
 8008012:	701a      	strb	r2, [r3, #0]
 8008014:	e00a      	b.n	800802c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b03      	cmp	r3, #3
 800801c:	d106      	bne.n	800802c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	220a      	movs	r2, #10
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	e002      	b.n	800802c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	220a      	movs	r2, #10
 800802a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008040:	2300      	movs	r3, #0
 8008042:	2200      	movs	r2, #0
 8008044:	f001 fd4a 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      break;
 8008048:	e0d8      	b.n	80081fc <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008050:	2b00      	cmp	r3, #0
 8008052:	d03f      	beq.n	80080d4 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
 8008060:	e016      	b.n	8008090 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008062:	7bfa      	ldrb	r2, [r7, #15]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	32de      	adds	r2, #222	@ 0xde
 8008068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806c:	791a      	ldrb	r2, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008074:	429a      	cmp	r2, r3
 8008076:	d108      	bne.n	800808a <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008078:	7bfa      	ldrb	r2, [r7, #15]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	32de      	adds	r2, #222	@ 0xde
 800807e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008088:	e005      	b.n	8008096 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	3301      	adds	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0e5      	beq.n	8008062 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d016      	beq.n	80080ce <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d109      	bne.n	80080c6 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2206      	movs	r2, #6
 80080b6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080be:	2103      	movs	r1, #3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
 80080c4:	e006      	b.n	80080d4 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	220d      	movs	r2, #13
 80080ca:	701a      	strb	r2, [r3, #0]
 80080cc:	e002      	b.n	80080d4 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	220d      	movs	r2, #13
 80080d2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2205      	movs	r2, #5
 80080d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80080e8:	2300      	movs	r3, #0
 80080ea:	2200      	movs	r2, #0
 80080ec:	f001 fcf6 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      break;
 80080f0:	e084      	b.n	80081fc <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d017      	beq.n	800812c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
 8008108:	4603      	mov	r3, r0
 800810a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d103      	bne.n	800811c <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	220b      	movs	r2, #11
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	e00a      	b.n	8008132 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d106      	bne.n	8008132 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	220d      	movs	r2, #13
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	e002      	b.n	8008132 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	220d      	movs	r2, #13
 8008130:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2205      	movs	r2, #5
 8008136:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008146:	2300      	movs	r3, #0
 8008148:	2200      	movs	r2, #0
 800814a:	f001 fcc7 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      break;
 800814e:	e055      	b.n	80081fc <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d04f      	beq.n	80081fa <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	4798      	blx	r3
      }
      break;
 8008166:	e048      	b.n	80081fa <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff fcef 	bl	8007b54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d009      	beq.n	8008194 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80081a4:	2105      	movs	r1, #5
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d107      	bne.n	80081c6 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff fda8 	bl	8007d14 <USBH_Start>
 80081c4:	e002      	b.n	80081cc <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f004 fc08 	bl	800c9dc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80081e0:	2300      	movs	r3, #0
 80081e2:	2200      	movs	r2, #0
 80081e4:	f001 fc7a 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      break;
 80081e8:	e008      	b.n	80081fc <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80081ea:	bf00      	nop
 80081ec:	e006      	b.n	80081fc <USBH_Process+0x4c8>
      break;
 80081ee:	bf00      	nop
 80081f0:	e004      	b.n	80081fc <USBH_Process+0x4c8>
      break;
 80081f2:	bf00      	nop
 80081f4:	e002      	b.n	80081fc <USBH_Process+0x4c8>
    break;
 80081f6:	bf00      	nop
 80081f8:	e000      	b.n	80081fc <USBH_Process+0x4c8>
      break;
 80081fa:	bf00      	nop
  }
  return USBH_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop

08008208 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af04      	add	r7, sp, #16
 800820e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008210:	2301      	movs	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008214:	2301      	movs	r3, #1
 8008216:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b07      	cmp	r3, #7
 800821e:	f200 8204 	bhi.w	800862a <USBH_HandleEnum+0x422>
 8008222:	a201      	add	r2, pc, #4	@ (adr r2, 8008228 <USBH_HandleEnum+0x20>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	08008249 	.word	0x08008249
 800822c:	08008303 	.word	0x08008303
 8008230:	0800836d 	.word	0x0800836d
 8008234:	080083f7 	.word	0x080083f7
 8008238:	08008461 	.word	0x08008461
 800823c:	080084d1 	.word	0x080084d1
 8008240:	0800856d 	.word	0x0800856d
 8008244:	080085eb 	.word	0x080085eb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008248:	2108      	movs	r1, #8
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fae8 	bl	8008820 <USBH_Get_DevDesc>
 8008250:	4603      	mov	r3, r0
 8008252:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d12e      	bne.n	80082b8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	7919      	ldrb	r1, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800827e:	9202      	str	r2, [sp, #8]
 8008280:	2200      	movs	r2, #0
 8008282:	9201      	str	r2, [sp, #4]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	4603      	mov	r3, r0
 8008288:	2280      	movs	r2, #128	@ 0x80
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 f9e6 	bl	800965c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	7959      	ldrb	r1, [r3, #5]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082a4:	9202      	str	r2, [sp, #8]
 80082a6:	2200      	movs	r2, #0
 80082a8:	9201      	str	r2, [sp, #4]
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	4603      	mov	r3, r0
 80082ae:	2200      	movs	r2, #0
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f9d3 	bl	800965c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082b6:	e1ba      	b.n	800862e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	f040 81b7 	bne.w	800862e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082c6:	3301      	adds	r3, #1
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d903      	bls.n	80082e2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	220d      	movs	r2, #13
 80082de:	701a      	strb	r2, [r3, #0]
      break;
 80082e0:	e1a5      	b.n	800862e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	795b      	ldrb	r3, [r3, #5]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 fa07 	bl	80096fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	791b      	ldrb	r3, [r3, #4]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 fa01 	bl	80096fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	701a      	strb	r2, [r3, #0]
      break;
 8008300:	e195      	b.n	800862e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008302:	2112      	movs	r1, #18
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fa8b 	bl	8008820 <USBH_Get_DevDesc>
 800830a:	4603      	mov	r3, r0
 800830c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d103      	bne.n	800831c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800831a:	e18a      	b.n	8008632 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b03      	cmp	r3, #3
 8008320:	f040 8187 	bne.w	8008632 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800832a:	3301      	adds	r3, #1
 800832c:	b2da      	uxtb	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800833a:	2b03      	cmp	r3, #3
 800833c:	d903      	bls.n	8008346 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	220d      	movs	r2, #13
 8008342:	701a      	strb	r2, [r3, #0]
      break;
 8008344:	e175      	b.n	8008632 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	795b      	ldrb	r3, [r3, #5]
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 f9d5 	bl	80096fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	791b      	ldrb	r3, [r3, #4]
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 f9cf 	bl	80096fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
      break;
 800836a:	e162      	b.n	8008632 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800836c:	2101      	movs	r1, #1
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fb02 	bl	8008978 <USBH_SetAddress>
 8008374:	4603      	mov	r3, r0
 8008376:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d130      	bne.n	80083e0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800837e:	2002      	movs	r0, #2
 8008380:	f004 fc90 	bl	800cca4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2203      	movs	r2, #3
 8008390:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	7919      	ldrb	r1, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083a6:	9202      	str	r2, [sp, #8]
 80083a8:	2200      	movs	r2, #0
 80083aa:	9201      	str	r2, [sp, #4]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	4603      	mov	r3, r0
 80083b0:	2280      	movs	r2, #128	@ 0x80
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 f952 	bl	800965c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	7959      	ldrb	r1, [r3, #5]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083cc:	9202      	str	r2, [sp, #8]
 80083ce:	2200      	movs	r2, #0
 80083d0:	9201      	str	r2, [sp, #4]
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	4603      	mov	r3, r0
 80083d6:	2200      	movs	r2, #0
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 f93f 	bl	800965c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80083de:	e12a      	b.n	8008636 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	f040 8127 	bne.w	8008636 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	220d      	movs	r2, #13
 80083ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	705a      	strb	r2, [r3, #1]
      break;
 80083f4:	e11f      	b.n	8008636 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80083f6:	2109      	movs	r1, #9
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fa39 	bl	8008870 <USBH_Get_CfgDesc>
 80083fe:	4603      	mov	r3, r0
 8008400:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2204      	movs	r2, #4
 800840c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800840e:	e114      	b.n	800863a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	2b03      	cmp	r3, #3
 8008414:	f040 8111 	bne.w	800863a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800841e:	3301      	adds	r3, #1
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800842e:	2b03      	cmp	r3, #3
 8008430:	d903      	bls.n	800843a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	220d      	movs	r2, #13
 8008436:	701a      	strb	r2, [r3, #0]
      break;
 8008438:	e0ff      	b.n	800863a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	795b      	ldrb	r3, [r3, #5]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 f95b 	bl	80096fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	791b      	ldrb	r3, [r3, #4]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 f955 	bl	80096fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	701a      	strb	r2, [r3, #0]
      break;
 800845e:	e0ec      	b.n	800863a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fa01 	bl	8008870 <USBH_Get_CfgDesc>
 800846e:	4603      	mov	r3, r0
 8008470:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2205      	movs	r2, #5
 800847c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800847e:	e0de      	b.n	800863e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b03      	cmp	r3, #3
 8008484:	f040 80db 	bne.w	800863e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800848e:	3301      	adds	r3, #1
 8008490:	b2da      	uxtb	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d903      	bls.n	80084aa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	220d      	movs	r2, #13
 80084a6:	701a      	strb	r2, [r3, #0]
      break;
 80084a8:	e0c9      	b.n	800863e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	795b      	ldrb	r3, [r3, #5]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 f923 	bl	80096fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	791b      	ldrb	r3, [r3, #4]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 f91d 	bl	80096fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
      break;
 80084ce:	e0b6      	b.n	800863e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d036      	beq.n	8008548 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80084e6:	23ff      	movs	r3, #255	@ 0xff
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f9e5 	bl	80088b8 <USBH_Get_StringDesc>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d111      	bne.n	800851c <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2206      	movs	r2, #6
 80084fc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2205      	movs	r2, #5
 8008502:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008512:	2300      	movs	r3, #0
 8008514:	2200      	movs	r2, #0
 8008516:	f001 fae1 	bl	8009adc <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800851a:	e092      	b.n	8008642 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b03      	cmp	r3, #3
 8008520:	f040 808f 	bne.w	8008642 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2206      	movs	r2, #6
 8008528:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2205      	movs	r2, #5
 800852e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800853e:	2300      	movs	r3, #0
 8008540:	2200      	movs	r2, #0
 8008542:	f001 facb 	bl	8009adc <osMessageQueuePut>
      break;
 8008546:	e07c      	b.n	8008642 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2206      	movs	r2, #6
 800854c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2205      	movs	r2, #5
 8008552:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008562:	2300      	movs	r3, #0
 8008564:	2200      	movs	r2, #0
 8008566:	f001 fab9 	bl	8009adc <osMessageQueuePut>
      break;
 800856a:	e06a      	b.n	8008642 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008572:	2b00      	cmp	r3, #0
 8008574:	d027      	beq.n	80085c6 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008582:	23ff      	movs	r3, #255	@ 0xff
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f997 	bl	80088b8 <USBH_Get_StringDesc>
 800858a:	4603      	mov	r3, r0
 800858c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d103      	bne.n	800859c <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2207      	movs	r2, #7
 8008598:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800859a:	e054      	b.n	8008646 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d151      	bne.n	8008646 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2207      	movs	r2, #7
 80085a6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2205      	movs	r2, #5
 80085ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085bc:	2300      	movs	r3, #0
 80085be:	2200      	movs	r2, #0
 80085c0:	f001 fa8c 	bl	8009adc <osMessageQueuePut>
      break;
 80085c4:	e03f      	b.n	8008646 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2207      	movs	r2, #7
 80085ca:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2205      	movs	r2, #5
 80085d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085e0:	2300      	movs	r3, #0
 80085e2:	2200      	movs	r2, #0
 80085e4:	f001 fa7a 	bl	8009adc <osMessageQueuePut>
      break;
 80085e8:	e02d      	b.n	8008646 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d017      	beq.n	8008624 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008600:	23ff      	movs	r3, #255	@ 0xff
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f958 	bl	80088b8 <USBH_Get_StringDesc>
 8008608:	4603      	mov	r3, r0
 800860a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008616:	e018      	b.n	800864a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	2b03      	cmp	r3, #3
 800861c:	d115      	bne.n	800864a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	73fb      	strb	r3, [r7, #15]
      break;
 8008622:	e012      	b.n	800864a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
      break;
 8008628:	e00f      	b.n	800864a <USBH_HandleEnum+0x442>

    default:
      break;
 800862a:	bf00      	nop
 800862c:	e00e      	b.n	800864c <USBH_HandleEnum+0x444>
      break;
 800862e:	bf00      	nop
 8008630:	e00c      	b.n	800864c <USBH_HandleEnum+0x444>
      break;
 8008632:	bf00      	nop
 8008634:	e00a      	b.n	800864c <USBH_HandleEnum+0x444>
      break;
 8008636:	bf00      	nop
 8008638:	e008      	b.n	800864c <USBH_HandleEnum+0x444>
      break;
 800863a:	bf00      	nop
 800863c:	e006      	b.n	800864c <USBH_HandleEnum+0x444>
      break;
 800863e:	bf00      	nop
 8008640:	e004      	b.n	800864c <USBH_HandleEnum+0x444>
      break;
 8008642:	bf00      	nop
 8008644:	e002      	b.n	800864c <USBH_HandleEnum+0x444>
      break;
 8008646:	bf00      	nop
 8008648:	e000      	b.n	800864c <USBH_HandleEnum+0x444>
      break;
 800864a:	bf00      	nop
  }
  return Status;
 800864c:	7bfb      	ldrb	r3, [r7, #15]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop

08008658 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f804 	bl	800869a <USBH_HandleSof>
}
 8008692:	bf00      	nop
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b0b      	cmp	r3, #11
 80086aa:	d10a      	bne.n	80086c2 <USBH_HandleSof+0x28>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	4798      	blx	r3
  }
}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086ee:	2300      	movs	r3, #0
 80086f0:	2200      	movs	r2, #0
 80086f2:	f001 f9f3 	bl	8009adc <osMessageQueuePut>
#endif
#endif

  return;
 80086f6:	bf00      	nop
}
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800870e:	bf00      	nop
}
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800874e:	2300      	movs	r3, #0
 8008750:	2200      	movs	r2, #0
 8008752:	f001 f9c3 	bl	8009adc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f004 f946 	bl	800ca12 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	791b      	ldrb	r3, [r3, #4]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 ffb5 	bl	80096fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	795b      	ldrb	r3, [r3, #5]
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 ffaf 	bl	80096fc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087b2:	2300      	movs	r3, #0
 80087b4:	2200      	movs	r2, #0
 80087b6:	f001 f991 	bl	8009adc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80087d8:	f04f 33ff 	mov.w	r3, #4294967295
 80087dc:	2200      	movs	r2, #0
 80087de:	f001 f9dd 	bl	8009b9c <osMessageQueueGet>
 80087e2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1f0      	bne.n	80087cc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7ff faa2 	bl	8007d34 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80087f0:	e7ec      	b.n	80087cc <USBH_Process_OS+0x8>

080087f2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800880e:	2300      	movs	r3, #0
 8008810:	2200      	movs	r2, #0
 8008812:	f001 f963 	bl	8009adc <osMessageQueuePut>
#endif

  return USBH_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af02      	add	r7, sp, #8
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008832:	78fb      	ldrb	r3, [r7, #3]
 8008834:	b29b      	uxth	r3, r3
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	4613      	mov	r3, r2
 800883a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800883e:	2100      	movs	r1, #0
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f864 	bl	800890e <USBH_GetDescriptor>
 8008846:	4603      	mov	r3, r0
 8008848:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f203 3026 	addw	r0, r3, #806	@ 0x326
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	b292      	uxth	r2, r2
 8008860:	4619      	mov	r1, r3
 8008862:	f000 f919 	bl	8008a98 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af02      	add	r7, sp, #8
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	331c      	adds	r3, #28
 8008880:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008882:	887b      	ldrh	r3, [r7, #2]
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800888c:	2100      	movs	r1, #0
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f83d 	bl	800890e <USBH_GetDescriptor>
 8008894:	4603      	mov	r3, r0
 8008896:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d107      	bne.n	80088ae <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800889e:	887b      	ldrh	r3, [r7, #2]
 80088a0:	461a      	mov	r2, r3
 80088a2:	68b9      	ldr	r1, [r7, #8]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f985 	bl	8008bb4 <USBH_ParseCfgDesc>
 80088aa:	4603      	mov	r3, r0
 80088ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b088      	sub	sp, #32
 80088bc:	af02      	add	r7, sp, #8
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	461a      	mov	r2, r3
 80088c4:	460b      	mov	r3, r1
 80088c6:	72fb      	strb	r3, [r7, #11]
 80088c8:	4613      	mov	r3, r2
 80088ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80088cc:	7afb      	ldrb	r3, [r7, #11]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80088d4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80088dc:	893b      	ldrh	r3, [r7, #8]
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	460b      	mov	r3, r1
 80088e2:	2100      	movs	r1, #0
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f812 	bl	800890e <USBH_GetDescriptor>
 80088ea:	4603      	mov	r3, r0
 80088ec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d107      	bne.n	8008904 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80088fa:	893a      	ldrh	r2, [r7, #8]
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fb1e 	bl	8008f40 <USBH_ParseStringDesc>
  }

  return status;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	607b      	str	r3, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	72fb      	strb	r3, [r7, #11]
 800891c:	4613      	mov	r3, r2
 800891e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	789b      	ldrb	r3, [r3, #2]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d11c      	bne.n	8008962 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008928:	7afb      	ldrb	r3, [r7, #11]
 800892a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800892e:	b2da      	uxtb	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2206      	movs	r2, #6
 8008938:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	893a      	ldrh	r2, [r7, #8]
 800893e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008940:	893b      	ldrh	r3, [r7, #8]
 8008942:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008946:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800894a:	d104      	bne.n	8008956 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f240 4209 	movw	r2, #1033	@ 0x409
 8008952:	829a      	strh	r2, [r3, #20]
 8008954:	e002      	b.n	800895c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8b3a      	ldrh	r2, [r7, #24]
 8008960:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008962:	8b3b      	ldrh	r3, [r7, #24]
 8008964:	461a      	mov	r2, r3
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 fb36 	bl	8008fda <USBH_CtlReq>
 800896e:	4603      	mov	r3, r0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	789b      	ldrb	r3, [r3, #2]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d10f      	bne.n	80089ac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2205      	movs	r2, #5
 8008996:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	b29a      	uxth	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089ac:	2200      	movs	r2, #0
 80089ae:	2100      	movs	r1, #0
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fb12 	bl	8008fda <USBH_CtlReq>
 80089b6:	4603      	mov	r3, r0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	789b      	ldrb	r3, [r3, #2]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d10e      	bne.n	80089f2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2209      	movs	r2, #9
 80089de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	887a      	ldrh	r2, [r7, #2]
 80089e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089f2:	2200      	movs	r2, #0
 80089f4:	2100      	movs	r1, #0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 faef 	bl	8008fda <USBH_CtlReq>
 80089fc:	4603      	mov	r3, r0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	789b      	ldrb	r3, [r3, #2]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d10f      	bne.n	8008a3a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2203      	movs	r2, #3
 8008a24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 facb 	bl	8008fda <USBH_CtlReq>
 8008a44:	4603      	mov	r3, r0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	789b      	ldrb	r3, [r3, #2]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d10f      	bne.n	8008a82 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2202      	movs	r2, #2
 8008a66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008a82:	2200      	movs	r2, #0
 8008a84:	2100      	movs	r1, #0
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 faa7 	bl	8008fda <USBH_CtlReq>
 8008a8c:	4603      	mov	r3, r0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
	...

08008a98 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	781a      	ldrb	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	785a      	ldrb	r2, [r3, #1]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	3302      	adds	r3, #2
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	3303      	adds	r3, #3
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	021b      	lsls	r3, r3, #8
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	791a      	ldrb	r2, [r3, #4]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	795a      	ldrb	r2, [r3, #5]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	799a      	ldrb	r2, [r3, #6]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	79da      	ldrb	r2, [r3, #7]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	79db      	ldrb	r3, [r3, #7]
 8008af4:	2b20      	cmp	r3, #32
 8008af6:	dc0f      	bgt.n	8008b18 <USBH_ParseDevDesc+0x80>
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	db14      	blt.n	8008b26 <USBH_ParseDevDesc+0x8e>
 8008afc:	3b08      	subs	r3, #8
 8008afe:	4a2c      	ldr	r2, [pc, #176]	@ (8008bb0 <USBH_ParseDevDesc+0x118>)
 8008b00:	fa22 f303 	lsr.w	r3, r2, r3
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf14      	ite	ne
 8008b0c:	2301      	movne	r3, #1
 8008b0e:	2300      	moveq	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d102      	bne.n	8008b1c <USBH_ParseDevDesc+0x84>
 8008b16:	e006      	b.n	8008b26 <USBH_ParseDevDesc+0x8e>
 8008b18:	2b40      	cmp	r3, #64	@ 0x40
 8008b1a:	d104      	bne.n	8008b26 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	79da      	ldrb	r2, [r3, #7]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	71da      	strb	r2, [r3, #7]
      break;
 8008b24:	e003      	b.n	8008b2e <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2240      	movs	r2, #64	@ 0x40
 8008b2a:	71da      	strb	r2, [r3, #7]
      break;
 8008b2c:	bf00      	nop
  }

  if (length > 8U)
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d936      	bls.n	8008ba2 <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	3308      	adds	r3, #8
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	3309      	adds	r3, #9
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4313      	orrs	r3, r2
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	330a      	adds	r3, #10
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	461a      	mov	r2, r3
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	330b      	adds	r3, #11
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	4313      	orrs	r3, r2
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	330c      	adds	r3, #12
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	330d      	adds	r3, #13
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	021b      	lsls	r3, r3, #8
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	7b9a      	ldrb	r2, [r3, #14]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	7bda      	ldrb	r2, [r3, #15]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	7c1a      	ldrb	r2, [r3, #16]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	7c5a      	ldrb	r2, [r3, #17]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	745a      	strb	r2, [r3, #17]
  }
}
 8008ba2:	bf00      	nop
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	01000101 	.word	0x01000101

08008bb4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08c      	sub	sp, #48	@ 0x30
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008bc8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	785a      	ldrb	r2, [r3, #1]
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	3303      	adds	r3, #3
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	021b      	lsls	r3, r3, #8
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	4313      	orrs	r3, r2
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c0e:	bf28      	it	cs
 8008c10:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	791a      	ldrb	r2, [r3, #4]
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	795a      	ldrb	r2, [r3, #5]
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	799a      	ldrb	r2, [r3, #6]
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	79da      	ldrb	r2, [r3, #7]
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	7a1a      	ldrb	r2, [r3, #8]
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b09      	cmp	r3, #9
 8008c48:	d002      	beq.n	8008c50 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	2209      	movs	r2, #9
 8008c4e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	2b09      	cmp	r3, #9
 8008c54:	f240 809d 	bls.w	8008d92 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c58:	2309      	movs	r3, #9
 8008c5a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c60:	e081      	b.n	8008d66 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c62:	f107 0316 	add.w	r3, r7, #22
 8008c66:	4619      	mov	r1, r3
 8008c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c6a:	f000 f99c 	bl	8008fa6 <USBH_GetNextDesc>
 8008c6e:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d176      	bne.n	8008d66 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	d002      	beq.n	8008c86 <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c82:	2209      	movs	r2, #9
 8008c84:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c8a:	221a      	movs	r2, #26
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
 8008c90:	3308      	adds	r3, #8
 8008c92:	6a3a      	ldr	r2, [r7, #32]
 8008c94:	4413      	add	r3, r2
 8008c96:	3302      	adds	r3, #2
 8008c98:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008c9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c9c:	69f8      	ldr	r0, [r7, #28]
 8008c9e:	f000 f87e 	bl	8008d9e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cac:	e043      	b.n	8008d36 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008cae:	f107 0316 	add.w	r3, r7, #22
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cb6:	f000 f976 	bl	8008fa6 <USBH_GetNextDesc>
 8008cba:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	785b      	ldrb	r3, [r3, #1]
 8008cc0:	2b05      	cmp	r3, #5
 8008cc2:	d138      	bne.n	8008d36 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	795b      	ldrb	r3, [r3, #5]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d10f      	bne.n	8008cec <USBH_ParseCfgDesc+0x138>
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	799b      	ldrb	r3, [r3, #6]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d10b      	bne.n	8008cec <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	79db      	ldrb	r3, [r3, #7]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10f      	bne.n	8008cfc <USBH_ParseCfgDesc+0x148>
 8008cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b09      	cmp	r3, #9
 8008ce2:	d00b      	beq.n	8008cfc <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8008ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce6:	2209      	movs	r2, #9
 8008ce8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cea:	e007      	b.n	8008cfc <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b07      	cmp	r3, #7
 8008cf2:	d004      	beq.n	8008cfe <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf6:	2207      	movs	r2, #7
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e000      	b.n	8008cfe <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cfc:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d02:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008d06:	3201      	adds	r2, #1
 8008d08:	00d2      	lsls	r2, r2, #3
 8008d0a:	211a      	movs	r1, #26
 8008d0c:	fb01 f303 	mul.w	r3, r1, r3
 8008d10:	4413      	add	r3, r2
 8008d12:	3308      	adds	r3, #8
 8008d14:	6a3a      	ldr	r2, [r7, #32]
 8008d16:	4413      	add	r3, r2
 8008d18:	3304      	adds	r3, #4
 8008d1a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d1e:	69b9      	ldr	r1, [r7, #24]
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 f86b 	bl	8008dfc <USBH_ParseEPDesc>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d30:	3301      	adds	r3, #1
 8008d32:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	791b      	ldrb	r3, [r3, #4]
 8008d3a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d204      	bcs.n	8008d4c <USBH_ParseCfgDesc+0x198>
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	885a      	ldrh	r2, [r3, #2]
 8008d46:	8afb      	ldrh	r3, [r7, #22]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d8b0      	bhi.n	8008cae <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	791b      	ldrb	r3, [r3, #4]
 8008d50:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d201      	bcs.n	8008d5c <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e01c      	b.n	8008d96 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8008d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d60:	3301      	adds	r3, #1
 8008d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d805      	bhi.n	8008d7a <USBH_ParseCfgDesc+0x1c6>
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	885a      	ldrh	r2, [r3, #2]
 8008d72:	8afb      	ldrh	r3, [r7, #22]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	f63f af74 	bhi.w	8008c62 <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	791b      	ldrb	r3, [r3, #4]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	bf28      	it	cs
 8008d82:	2302      	movcs	r3, #2
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d201      	bcs.n	8008d92 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e001      	b.n	8008d96 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8008d92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3730      	adds	r7, #48	@ 0x30
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	781a      	ldrb	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	785a      	ldrb	r2, [r3, #1]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	789a      	ldrb	r2, [r3, #2]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	78da      	ldrb	r2, [r3, #3]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	791a      	ldrb	r2, [r3, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	795a      	ldrb	r2, [r3, #5]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	799a      	ldrb	r2, [r3, #6]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	79da      	ldrb	r2, [r3, #7]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	7a1a      	ldrb	r2, [r3, #8]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	721a      	strb	r2, [r3, #8]
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	781a      	ldrb	r2, [r3, #0]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	785a      	ldrb	r2, [r3, #1]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	789a      	ldrb	r2, [r3, #2]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	78da      	ldrb	r2, [r3, #3]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3305      	adds	r3, #5
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	021b      	lsls	r3, r3, #8
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	799a      	ldrb	r2, [r3, #6]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	889b      	ldrh	r3, [r3, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 8008e56:	2303      	movs	r3, #3
 8008e58:	75fb      	strb	r3, [r7, #23]
 8008e5a:	e031      	b.n	8008ec0 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	889b      	ldrh	r3, [r3, #4]
 8008e60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008e64:	f023 0307 	bic.w	r3, r3, #7
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	889b      	ldrh	r3, [r3, #4]
 8008e72:	b21a      	sxth	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3305      	adds	r3, #5
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	021b      	lsls	r3, r3, #8
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	430b      	orrs	r3, r1
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10f      	bne.n	8008eb2 <USBH_ParseEPDesc+0xb6>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3304      	adds	r3, #4
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3305      	adds	r3, #5
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	430b      	orrs	r3, r1
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	b21b      	sxth	r3, r3
 8008eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008eae:	b21b      	sxth	r3, r3
 8008eb0:	e001      	b.n	8008eb6 <USBH_ParseEPDesc+0xba>
 8008eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	b21b      	sxth	r3, r3
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d116      	bne.n	8008ef8 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	78db      	ldrb	r3, [r3, #3]
 8008ece:	f003 0303 	and.w	r3, r3, #3
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d005      	beq.n	8008ee2 <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	78db      	ldrb	r3, [r3, #3]
 8008eda:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d127      	bne.n	8008f32 <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	799b      	ldrb	r3, [r3, #6]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <USBH_ParseEPDesc+0xf6>
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	799b      	ldrb	r3, [r3, #6]
 8008eee:	2b10      	cmp	r3, #16
 8008ef0:	d91f      	bls.n	8008f32 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	75fb      	strb	r3, [r7, #23]
 8008ef6:	e01c      	b.n	8008f32 <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	78db      	ldrb	r3, [r3, #3]
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d10a      	bne.n	8008f1a <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	799b      	ldrb	r3, [r3, #6]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <USBH_ParseEPDesc+0x118>
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	799b      	ldrb	r3, [r3, #6]
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	d90e      	bls.n	8008f32 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8008f14:	2303      	movs	r3, #3
 8008f16:	75fb      	strb	r3, [r7, #23]
 8008f18:	e00b      	b.n	8008f32 <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	78db      	ldrb	r3, [r3, #3]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d105      	bne.n	8008f32 <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	799b      	ldrb	r3, [r3, #6]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	371c      	adds	r7, #28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3301      	adds	r3, #1
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d120      	bne.n	8008f9a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	1e9a      	subs	r2, r3, #2
 8008f5e:	88fb      	ldrh	r3, [r7, #6]
 8008f60:	4293      	cmp	r3, r2
 8008f62:	bf28      	it	cs
 8008f64:	4613      	movcs	r3, r2
 8008f66:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008f6e:	2300      	movs	r3, #0
 8008f70:	82fb      	strh	r3, [r7, #22]
 8008f72:	e00b      	b.n	8008f8c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008f74:	8afb      	ldrh	r3, [r7, #22]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f86:	8afb      	ldrh	r3, [r7, #22]
 8008f88:	3302      	adds	r3, #2
 8008f8a:	82fb      	strh	r3, [r7, #22]
 8008f8c:	8afa      	ldrh	r2, [r7, #22]
 8008f8e:	8abb      	ldrh	r3, [r7, #20]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d3ef      	bcc.n	8008f74 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	371c      	adds	r7, #28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b085      	sub	sp, #20
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	7812      	ldrb	r2, [r2, #0]
 8008fb8:	4413      	add	r3, r2
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4413      	add	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b086      	sub	sp, #24
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	789b      	ldrb	r3, [r3, #2]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d002      	beq.n	8008ffa <USBH_CtlReq+0x20>
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d01d      	beq.n	8009034 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008ff8:	e043      	b.n	8009082 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2202      	movs	r2, #2
 8009010:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009012:	2301      	movs	r3, #1
 8009014:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2203      	movs	r2, #3
 800901a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800902a:	2300      	movs	r3, #0
 800902c:	2200      	movs	r2, #0
 800902e:	f000 fd55 	bl	8009adc <osMessageQueuePut>
      break;
 8009032:	e026      	b.n	8009082 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 f829 	bl	800908c <USBH_HandleControl>
 800903a:	4603      	mov	r3, r0
 800903c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <USBH_CtlReq+0x70>
 8009044:	7dfb      	ldrb	r3, [r7, #23]
 8009046:	2b03      	cmp	r3, #3
 8009048:	d106      	bne.n	8009058 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2201      	movs	r2, #1
 800904e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	761a      	strb	r2, [r3, #24]
 8009056:	e005      	b.n	8009064 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d102      	bne.n	8009064 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2201      	movs	r2, #1
 8009062:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2203      	movs	r2, #3
 8009068:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009078:	2300      	movs	r3, #0
 800907a:	2200      	movs	r2, #0
 800907c:	f000 fd2e 	bl	8009adc <osMessageQueuePut>
      break;
 8009080:	bf00      	nop
  }
  return status;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af02      	add	r7, sp, #8
 8009092:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009098:	2300      	movs	r3, #0
 800909a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7e1b      	ldrb	r3, [r3, #24]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	2b0a      	cmp	r3, #10
 80090a4:	f200 8229 	bhi.w	80094fa <USBH_HandleControl+0x46e>
 80090a8:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <USBH_HandleControl+0x24>)
 80090aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ae:	bf00      	nop
 80090b0:	080090dd 	.word	0x080090dd
 80090b4:	080090f7 	.word	0x080090f7
 80090b8:	08009199 	.word	0x08009199
 80090bc:	080091bf 	.word	0x080091bf
 80090c0:	0800924b 	.word	0x0800924b
 80090c4:	08009275 	.word	0x08009275
 80090c8:	08009337 	.word	0x08009337
 80090cc:	08009359 	.word	0x08009359
 80090d0:	080093eb 	.word	0x080093eb
 80090d4:	08009411 	.word	0x08009411
 80090d8:	080094a3 	.word	0x080094a3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f103 0110 	add.w	r1, r3, #16
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	795b      	ldrb	r3, [r3, #5]
 80090e6:	461a      	mov	r2, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fa17 	bl	800951c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2202      	movs	r2, #2
 80090f2:	761a      	strb	r2, [r3, #24]
      break;
 80090f4:	e20c      	b.n	8009510 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	795b      	ldrb	r3, [r3, #5]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f003 fd77 	bl	800cbf0 <USBH_LL_GetURBState>
 8009102:	4603      	mov	r3, r0
 8009104:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d12c      	bne.n	8009166 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	7c1b      	ldrb	r3, [r3, #16]
 8009110:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009114:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	8adb      	ldrh	r3, [r3, #22]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800911e:	7b7b      	ldrb	r3, [r7, #13]
 8009120:	2b80      	cmp	r3, #128	@ 0x80
 8009122:	d103      	bne.n	800912c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2203      	movs	r2, #3
 8009128:	761a      	strb	r2, [r3, #24]
 800912a:	e00d      	b.n	8009148 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2205      	movs	r2, #5
 8009130:	761a      	strb	r2, [r3, #24]
 8009132:	e009      	b.n	8009148 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009134:	7b7b      	ldrb	r3, [r7, #13]
 8009136:	2b80      	cmp	r3, #128	@ 0x80
 8009138:	d103      	bne.n	8009142 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2209      	movs	r2, #9
 800913e:	761a      	strb	r2, [r3, #24]
 8009140:	e002      	b.n	8009148 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2207      	movs	r2, #7
 8009146:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2203      	movs	r2, #3
 800914c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800915c:	2300      	movs	r3, #0
 800915e:	2200      	movs	r2, #0
 8009160:	f000 fcbc 	bl	8009adc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009164:	e1cb      	b.n	80094fe <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	2b04      	cmp	r3, #4
 800916a:	d003      	beq.n	8009174 <USBH_HandleControl+0xe8>
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	2b02      	cmp	r3, #2
 8009170:	f040 81c5 	bne.w	80094fe <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	220b      	movs	r2, #11
 8009178:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2203      	movs	r2, #3
 800917e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800918e:	2300      	movs	r3, #0
 8009190:	2200      	movs	r2, #0
 8009192:	f000 fca3 	bl	8009adc <osMessageQueuePut>
      break;
 8009196:	e1b2      	b.n	80094fe <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800919e:	b29a      	uxth	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6899      	ldr	r1, [r3, #8]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	899a      	ldrh	r2, [r3, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	791b      	ldrb	r3, [r3, #4]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f9f2 	bl	800959a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2204      	movs	r2, #4
 80091ba:	761a      	strb	r2, [r3, #24]
      break;
 80091bc:	e1a8      	b.n	8009510 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	791b      	ldrb	r3, [r3, #4]
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f003 fd13 	bl	800cbf0 <USBH_LL_GetURBState>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d110      	bne.n	80091f6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2209      	movs	r2, #9
 80091d8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2203      	movs	r2, #3
 80091de:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80091ee:	2300      	movs	r3, #0
 80091f0:	2200      	movs	r2, #0
 80091f2:	f000 fc73 	bl	8009adc <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	2b05      	cmp	r3, #5
 80091fa:	d110      	bne.n	800921e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80091fc:	2303      	movs	r3, #3
 80091fe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2203      	movs	r2, #3
 8009204:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009214:	2300      	movs	r3, #0
 8009216:	2200      	movs	r2, #0
 8009218:	f000 fc60 	bl	8009adc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800921c:	e171      	b.n	8009502 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800921e:	7bbb      	ldrb	r3, [r7, #14]
 8009220:	2b04      	cmp	r3, #4
 8009222:	f040 816e 	bne.w	8009502 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	220b      	movs	r2, #11
 800922a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2203      	movs	r2, #3
 8009230:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009240:	2300      	movs	r3, #0
 8009242:	2200      	movs	r2, #0
 8009244:	f000 fc4a 	bl	8009adc <osMessageQueuePut>
      break;
 8009248:	e15b      	b.n	8009502 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6899      	ldr	r1, [r3, #8]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	899a      	ldrh	r2, [r3, #12]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	795b      	ldrb	r3, [r3, #5]
 8009256:	2001      	movs	r0, #1
 8009258:	9000      	str	r0, [sp, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f978 	bl	8009550 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009266:	b29a      	uxth	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2206      	movs	r2, #6
 8009270:	761a      	strb	r2, [r3, #24]
      break;
 8009272:	e14d      	b.n	8009510 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	795b      	ldrb	r3, [r3, #5]
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f003 fcb8 	bl	800cbf0 <USBH_LL_GetURBState>
 8009280:	4603      	mov	r3, r0
 8009282:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d111      	bne.n	80092ae <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2207      	movs	r2, #7
 800928e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2203      	movs	r2, #3
 8009294:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80092a4:	2300      	movs	r3, #0
 80092a6:	2200      	movs	r2, #0
 80092a8:	f000 fc18 	bl	8009adc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092ac:	e12b      	b.n	8009506 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80092ae:	7bbb      	ldrb	r3, [r7, #14]
 80092b0:	2b05      	cmp	r3, #5
 80092b2:	d113      	bne.n	80092dc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	220c      	movs	r2, #12
 80092b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80092ba:	2303      	movs	r3, #3
 80092bc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2203      	movs	r2, #3
 80092c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80092d2:	2300      	movs	r3, #0
 80092d4:	2200      	movs	r2, #0
 80092d6:	f000 fc01 	bl	8009adc <osMessageQueuePut>
      break;
 80092da:	e114      	b.n	8009506 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d111      	bne.n	8009306 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2205      	movs	r2, #5
 80092e6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2203      	movs	r2, #3
 80092ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80092fc:	2300      	movs	r3, #0
 80092fe:	2200      	movs	r2, #0
 8009300:	f000 fbec 	bl	8009adc <osMessageQueuePut>
      break;
 8009304:	e0ff      	b.n	8009506 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b04      	cmp	r3, #4
 800930a:	f040 80fc 	bne.w	8009506 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	220b      	movs	r2, #11
 8009312:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009314:	2302      	movs	r3, #2
 8009316:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2203      	movs	r2, #3
 800931c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800932c:	2300      	movs	r3, #0
 800932e:	2200      	movs	r2, #0
 8009330:	f000 fbd4 	bl	8009adc <osMessageQueuePut>
      break;
 8009334:	e0e7      	b.n	8009506 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	791b      	ldrb	r3, [r3, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	2100      	movs	r1, #0
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f92b 	bl	800959a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800934a:	b29a      	uxth	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2208      	movs	r2, #8
 8009354:	761a      	strb	r2, [r3, #24]

      break;
 8009356:	e0db      	b.n	8009510 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	791b      	ldrb	r3, [r3, #4]
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f003 fc46 	bl	800cbf0 <USBH_LL_GetURBState>
 8009364:	4603      	mov	r3, r0
 8009366:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009368:	7bbb      	ldrb	r3, [r7, #14]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d113      	bne.n	8009396 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	220d      	movs	r2, #13
 8009372:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2203      	movs	r2, #3
 800937c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800938c:	2300      	movs	r3, #0
 800938e:	2200      	movs	r2, #0
 8009390:	f000 fba4 	bl	8009adc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009394:	e0b9      	b.n	800950a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b04      	cmp	r3, #4
 800939a:	d111      	bne.n	80093c0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	220b      	movs	r2, #11
 80093a0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2203      	movs	r2, #3
 80093a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80093b6:	2300      	movs	r3, #0
 80093b8:	2200      	movs	r2, #0
 80093ba:	f000 fb8f 	bl	8009adc <osMessageQueuePut>
      break;
 80093be:	e0a4      	b.n	800950a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b05      	cmp	r3, #5
 80093c4:	f040 80a1 	bne.w	800950a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80093c8:	2303      	movs	r3, #3
 80093ca:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2203      	movs	r2, #3
 80093d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80093e0:	2300      	movs	r3, #0
 80093e2:	2200      	movs	r2, #0
 80093e4:	f000 fb7a 	bl	8009adc <osMessageQueuePut>
      break;
 80093e8:	e08f      	b.n	800950a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	795b      	ldrb	r3, [r3, #5]
 80093ee:	2201      	movs	r2, #1
 80093f0:	9200      	str	r2, [sp, #0]
 80093f2:	2200      	movs	r2, #0
 80093f4:	2100      	movs	r1, #0
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f8aa 	bl	8009550 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009402:	b29a      	uxth	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	220a      	movs	r2, #10
 800940c:	761a      	strb	r2, [r3, #24]
      break;
 800940e:	e07f      	b.n	8009510 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	795b      	ldrb	r3, [r3, #5]
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f003 fbea 	bl	800cbf0 <USBH_LL_GetURBState>
 800941c:	4603      	mov	r3, r0
 800941e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d113      	bne.n	800944e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	220d      	movs	r2, #13
 800942e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2203      	movs	r2, #3
 8009434:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009444:	2300      	movs	r3, #0
 8009446:	2200      	movs	r2, #0
 8009448:	f000 fb48 	bl	8009adc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800944c:	e05f      	b.n	800950e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	2b02      	cmp	r3, #2
 8009452:	d111      	bne.n	8009478 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2209      	movs	r2, #9
 8009458:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2203      	movs	r2, #3
 800945e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800946e:	2300      	movs	r3, #0
 8009470:	2200      	movs	r2, #0
 8009472:	f000 fb33 	bl	8009adc <osMessageQueuePut>
      break;
 8009476:	e04a      	b.n	800950e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	2b04      	cmp	r3, #4
 800947c:	d147      	bne.n	800950e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	220b      	movs	r2, #11
 8009482:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2203      	movs	r2, #3
 8009488:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009498:	2300      	movs	r3, #0
 800949a:	2200      	movs	r2, #0
 800949c:	f000 fb1e 	bl	8009adc <osMessageQueuePut>
      break;
 80094a0:	e035      	b.n	800950e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7e5b      	ldrb	r3, [r3, #25]
 80094a6:	3301      	adds	r3, #1
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	765a      	strb	r2, [r3, #25]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	7e5b      	ldrb	r3, [r3, #25]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d806      	bhi.n	80094c4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80094c2:	e025      	b.n	8009510 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80094ca:	2106      	movs	r1, #6
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	795b      	ldrb	r3, [r3, #5]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f90d 	bl	80096fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	791b      	ldrb	r3, [r3, #4]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f907 	bl	80096fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80094f4:	2302      	movs	r3, #2
 80094f6:	73fb      	strb	r3, [r7, #15]
      break;
 80094f8:	e00a      	b.n	8009510 <USBH_HandleControl+0x484>

    default:
      break;
 80094fa:	bf00      	nop
 80094fc:	e008      	b.n	8009510 <USBH_HandleControl+0x484>
      break;
 80094fe:	bf00      	nop
 8009500:	e006      	b.n	8009510 <USBH_HandleControl+0x484>
      break;
 8009502:	bf00      	nop
 8009504:	e004      	b.n	8009510 <USBH_HandleControl+0x484>
      break;
 8009506:	bf00      	nop
 8009508:	e002      	b.n	8009510 <USBH_HandleControl+0x484>
      break;
 800950a:	bf00      	nop
 800950c:	e000      	b.n	8009510 <USBH_HandleControl+0x484>
      break;
 800950e:	bf00      	nop
  }

  return status;
 8009510:	7bfb      	ldrb	r3, [r7, #15]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop

0800951c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af04      	add	r7, sp, #16
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	4613      	mov	r3, r2
 8009528:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800952a:	79f9      	ldrb	r1, [r7, #7]
 800952c:	2300      	movs	r3, #0
 800952e:	9303      	str	r3, [sp, #12]
 8009530:	2308      	movs	r3, #8
 8009532:	9302      	str	r3, [sp, #8]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	2300      	movs	r3, #0
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	2300      	movs	r3, #0
 800953e:	2200      	movs	r2, #0
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f003 fb24 	bl	800cb8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af04      	add	r7, sp, #16
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4611      	mov	r1, r2
 800955c:	461a      	mov	r2, r3
 800955e:	460b      	mov	r3, r1
 8009560:	80fb      	strh	r3, [r7, #6]
 8009562:	4613      	mov	r3, r2
 8009564:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009570:	2300      	movs	r3, #0
 8009572:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009574:	7979      	ldrb	r1, [r7, #5]
 8009576:	7e3b      	ldrb	r3, [r7, #24]
 8009578:	9303      	str	r3, [sp, #12]
 800957a:	88fb      	ldrh	r3, [r7, #6]
 800957c:	9302      	str	r3, [sp, #8]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	2301      	movs	r3, #1
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	2300      	movs	r3, #0
 8009588:	2200      	movs	r2, #0
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f003 faff 	bl	800cb8e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b088      	sub	sp, #32
 800959e:	af04      	add	r7, sp, #16
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	4611      	mov	r1, r2
 80095a6:	461a      	mov	r2, r3
 80095a8:	460b      	mov	r3, r1
 80095aa:	80fb      	strh	r3, [r7, #6]
 80095ac:	4613      	mov	r3, r2
 80095ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095b0:	7979      	ldrb	r1, [r7, #5]
 80095b2:	2300      	movs	r3, #0
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	88fb      	ldrh	r3, [r7, #6]
 80095b8:	9302      	str	r3, [sp, #8]
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	2301      	movs	r3, #1
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	2300      	movs	r3, #0
 80095c4:	2201      	movs	r2, #1
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f003 fae1 	bl	800cb8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80095cc:	2300      	movs	r3, #0

}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b088      	sub	sp, #32
 80095da:	af04      	add	r7, sp, #16
 80095dc:	60f8      	str	r0, [r7, #12]
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	4611      	mov	r1, r2
 80095e2:	461a      	mov	r2, r3
 80095e4:	460b      	mov	r3, r1
 80095e6:	80fb      	strh	r3, [r7, #6]
 80095e8:	4613      	mov	r3, r2
 80095ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095fa:	7979      	ldrb	r1, [r7, #5]
 80095fc:	7e3b      	ldrb	r3, [r7, #24]
 80095fe:	9303      	str	r3, [sp, #12]
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	9302      	str	r3, [sp, #8]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	2301      	movs	r3, #1
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	2302      	movs	r3, #2
 800960e:	2200      	movs	r2, #0
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f003 fabc 	bl	800cb8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af04      	add	r7, sp, #16
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4611      	mov	r1, r2
 800962c:	461a      	mov	r2, r3
 800962e:	460b      	mov	r3, r1
 8009630:	80fb      	strh	r3, [r7, #6]
 8009632:	4613      	mov	r3, r2
 8009634:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009636:	7979      	ldrb	r1, [r7, #5]
 8009638:	2300      	movs	r3, #0
 800963a:	9303      	str	r3, [sp, #12]
 800963c:	88fb      	ldrh	r3, [r7, #6]
 800963e:	9302      	str	r3, [sp, #8]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	2301      	movs	r3, #1
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	2302      	movs	r3, #2
 800964a:	2201      	movs	r2, #1
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f003 fa9e 	bl	800cb8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af04      	add	r7, sp, #16
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	4608      	mov	r0, r1
 8009666:	4611      	mov	r1, r2
 8009668:	461a      	mov	r2, r3
 800966a:	4603      	mov	r3, r0
 800966c:	70fb      	strb	r3, [r7, #3]
 800966e:	460b      	mov	r3, r1
 8009670:	70bb      	strb	r3, [r7, #2]
 8009672:	4613      	mov	r3, r2
 8009674:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009676:	7878      	ldrb	r0, [r7, #1]
 8009678:	78ba      	ldrb	r2, [r7, #2]
 800967a:	78f9      	ldrb	r1, [r7, #3]
 800967c:	8b3b      	ldrh	r3, [r7, #24]
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	7d3b      	ldrb	r3, [r7, #20]
 8009682:	9301      	str	r3, [sp, #4]
 8009684:	7c3b      	ldrb	r3, [r7, #16]
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	4603      	mov	r3, r0
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f003 fa31 	bl	800caf2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	460b      	mov	r3, r1
 80096a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f003 fa50 	bl	800cb50 <USBH_LL_ClosePipe>

  return USBH_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f836 	bl	8009738 <USBH_GetFreePipe>
 80096cc:	4603      	mov	r3, r0
 80096ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80096d0:	89fb      	ldrh	r3, [r7, #14]
 80096d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d00a      	beq.n	80096f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80096da:	78fa      	ldrb	r2, [r7, #3]
 80096dc:	89fb      	ldrh	r3, [r7, #14]
 80096de:	f003 030f 	and.w	r3, r3, #15
 80096e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	33e0      	adds	r3, #224	@ 0xe0
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80096f0:	89fb      	ldrh	r3, [r7, #14]
 80096f2:	b2db      	uxtb	r3, r3
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009708:	78fb      	ldrb	r3, [r7, #3]
 800970a:	2b0f      	cmp	r3, #15
 800970c:	d80d      	bhi.n	800972a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	33e0      	adds	r3, #224	@ 0xe0
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	78fb      	ldrb	r3, [r7, #3]
 800971c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009720:	6879      	ldr	r1, [r7, #4]
 8009722:	33e0      	adds	r3, #224	@ 0xe0
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	440b      	add	r3, r1
 8009728:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]
 8009748:	e00f      	b.n	800976a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	33e0      	adds	r3, #224	@ 0xe0
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d102      	bne.n	8009764 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	b29b      	uxth	r3, r3
 8009762:	e007      	b.n	8009774 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	3301      	adds	r3, #1
 8009768:	73fb      	strb	r3, [r7, #15]
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	2b0f      	cmp	r3, #15
 800976e:	d9ec      	bls.n	800974a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009774:	4618      	mov	r0, r3
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <__NVIC_SetPriority>:
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800978c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009790:	2b00      	cmp	r3, #0
 8009792:	db0a      	blt.n	80097aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	b2da      	uxtb	r2, r3
 8009798:	490c      	ldr	r1, [pc, #48]	@ (80097cc <__NVIC_SetPriority+0x4c>)
 800979a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800979e:	0112      	lsls	r2, r2, #4
 80097a0:	b2d2      	uxtb	r2, r2
 80097a2:	440b      	add	r3, r1
 80097a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80097a8:	e00a      	b.n	80097c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	4908      	ldr	r1, [pc, #32]	@ (80097d0 <__NVIC_SetPriority+0x50>)
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	3b04      	subs	r3, #4
 80097b8:	0112      	lsls	r2, r2, #4
 80097ba:	b2d2      	uxtb	r2, r2
 80097bc:	440b      	add	r3, r1
 80097be:	761a      	strb	r2, [r3, #24]
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	e000e100 	.word	0xe000e100
 80097d0:	e000ed00 	.word	0xe000ed00

080097d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80097d8:	4b05      	ldr	r3, [pc, #20]	@ (80097f0 <SysTick_Handler+0x1c>)
 80097da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80097dc:	f001 ff34 	bl	800b648 <xTaskGetSchedulerState>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d001      	beq.n	80097ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80097e6:	f002 fd2f 	bl	800c248 <xPortSysTickHandler>
  }
}
 80097ea:	bf00      	nop
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	e000e010 	.word	0xe000e010

080097f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80097f8:	2100      	movs	r1, #0
 80097fa:	f06f 0004 	mvn.w	r0, #4
 80097fe:	f7ff ffbf 	bl	8009780 <__NVIC_SetPriority>
#endif
}
 8009802:	bf00      	nop
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800980e:	f3ef 8305 	mrs	r3, IPSR
 8009812:	603b      	str	r3, [r7, #0]
  return(result);
 8009814:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800981a:	f06f 0305 	mvn.w	r3, #5
 800981e:	607b      	str	r3, [r7, #4]
 8009820:	e00c      	b.n	800983c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009822:	4b0a      	ldr	r3, [pc, #40]	@ (800984c <osKernelInitialize+0x44>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d105      	bne.n	8009836 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800982a:	4b08      	ldr	r3, [pc, #32]	@ (800984c <osKernelInitialize+0x44>)
 800982c:	2201      	movs	r2, #1
 800982e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009830:	2300      	movs	r3, #0
 8009832:	607b      	str	r3, [r7, #4]
 8009834:	e002      	b.n	800983c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009836:	f04f 33ff 	mov.w	r3, #4294967295
 800983a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800983c:	687b      	ldr	r3, [r7, #4]
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	20000294 	.word	0x20000294

08009850 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009856:	f3ef 8305 	mrs	r3, IPSR
 800985a:	603b      	str	r3, [r7, #0]
  return(result);
 800985c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009862:	f06f 0305 	mvn.w	r3, #5
 8009866:	607b      	str	r3, [r7, #4]
 8009868:	e010      	b.n	800988c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800986a:	4b0b      	ldr	r3, [pc, #44]	@ (8009898 <osKernelStart+0x48>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d109      	bne.n	8009886 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009872:	f7ff ffbf 	bl	80097f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009876:	4b08      	ldr	r3, [pc, #32]	@ (8009898 <osKernelStart+0x48>)
 8009878:	2202      	movs	r2, #2
 800987a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800987c:	f001 fa80 	bl	800ad80 <vTaskStartScheduler>
      stat = osOK;
 8009880:	2300      	movs	r3, #0
 8009882:	607b      	str	r3, [r7, #4]
 8009884:	e002      	b.n	800988c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009886:	f04f 33ff 	mov.w	r3, #4294967295
 800988a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800988c:	687b      	ldr	r3, [r7, #4]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20000294 	.word	0x20000294

0800989c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800989c:	b580      	push	{r7, lr}
 800989e:	b08e      	sub	sp, #56	@ 0x38
 80098a0:	af04      	add	r7, sp, #16
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098a8:	2300      	movs	r3, #0
 80098aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098ac:	f3ef 8305 	mrs	r3, IPSR
 80098b0:	617b      	str	r3, [r7, #20]
  return(result);
 80098b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d17e      	bne.n	80099b6 <osThreadNew+0x11a>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d07b      	beq.n	80099b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80098be:	2380      	movs	r3, #128	@ 0x80
 80098c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80098c2:	2318      	movs	r3, #24
 80098c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80098ca:	f04f 33ff 	mov.w	r3, #4294967295
 80098ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d045      	beq.n	8009962 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <osThreadNew+0x48>
        name = attr->name;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d008      	beq.n	800990a <osThreadNew+0x6e>
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	2b38      	cmp	r3, #56	@ 0x38
 80098fc:	d805      	bhi.n	800990a <osThreadNew+0x6e>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <osThreadNew+0x72>
        return (NULL);
 800990a:	2300      	movs	r3, #0
 800990c:	e054      	b.n	80099b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	089b      	lsrs	r3, r3, #2
 800991c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00e      	beq.n	8009944 <osThreadNew+0xa8>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	2ba7      	cmp	r3, #167	@ 0xa7
 800992c:	d90a      	bls.n	8009944 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009932:	2b00      	cmp	r3, #0
 8009934:	d006      	beq.n	8009944 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <osThreadNew+0xa8>
        mem = 1;
 800993e:	2301      	movs	r3, #1
 8009940:	61bb      	str	r3, [r7, #24]
 8009942:	e010      	b.n	8009966 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10c      	bne.n	8009966 <osThreadNew+0xca>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d108      	bne.n	8009966 <osThreadNew+0xca>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <osThreadNew+0xca>
          mem = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	61bb      	str	r3, [r7, #24]
 8009960:	e001      	b.n	8009966 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d110      	bne.n	800998e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009974:	9202      	str	r2, [sp, #8]
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	6a3a      	ldr	r2, [r7, #32]
 8009980:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f001 f808 	bl	800a998 <xTaskCreateStatic>
 8009988:	4603      	mov	r3, r0
 800998a:	613b      	str	r3, [r7, #16]
 800998c:	e013      	b.n	80099b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d110      	bne.n	80099b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	b29a      	uxth	r2, r3
 8009998:	f107 0310 	add.w	r3, r7, #16
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f001 f856 	bl	800aa58 <xTaskCreate>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d001      	beq.n	80099b6 <osThreadNew+0x11a>
            hTask = NULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099b6:	693b      	ldr	r3, [r7, #16]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3728      	adds	r7, #40	@ 0x28
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099c8:	f3ef 8305 	mrs	r3, IPSR
 80099cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80099ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <osDelay+0x1c>
    stat = osErrorISR;
 80099d4:	f06f 0305 	mvn.w	r3, #5
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	e007      	b.n	80099ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80099dc:	2300      	movs	r3, #0
 80099de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 f994 	bl	800ad14 <vTaskDelay>
    }
  }

  return (stat);
 80099ec:	68fb      	ldr	r3, [r7, #12]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b08a      	sub	sp, #40	@ 0x28
 80099fa:	af02      	add	r7, sp, #8
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a06:	f3ef 8305 	mrs	r3, IPSR
 8009a0a:	613b      	str	r3, [r7, #16]
  return(result);
 8009a0c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d15f      	bne.n	8009ad2 <osMessageQueueNew+0xdc>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d05c      	beq.n	8009ad2 <osMessageQueueNew+0xdc>
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d059      	beq.n	8009ad2 <osMessageQueueNew+0xdc>
    mem = -1;
 8009a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d029      	beq.n	8009a7e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d012      	beq.n	8009a58 <osMessageQueueNew+0x62>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	2b4f      	cmp	r3, #79	@ 0x4f
 8009a38:	d90e      	bls.n	8009a58 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	695a      	ldr	r2, [r3, #20]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	fb01 f303 	mul.w	r3, r1, r3
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d302      	bcc.n	8009a58 <osMessageQueueNew+0x62>
        mem = 1;
 8009a52:	2301      	movs	r3, #1
 8009a54:	61bb      	str	r3, [r7, #24]
 8009a56:	e014      	b.n	8009a82 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d110      	bne.n	8009a82 <osMessageQueueNew+0x8c>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10c      	bne.n	8009a82 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d108      	bne.n	8009a82 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d104      	bne.n	8009a82 <osMessageQueueNew+0x8c>
          mem = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	61bb      	str	r3, [r7, #24]
 8009a7c:	e001      	b.n	8009a82 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d10b      	bne.n	8009aa0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	691a      	ldr	r2, [r3, #16]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	2100      	movs	r1, #0
 8009a92:	9100      	str	r1, [sp, #0]
 8009a94:	68b9      	ldr	r1, [r7, #8]
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 fa30 	bl	8009efc <xQueueGenericCreateStatic>
 8009a9c:	61f8      	str	r0, [r7, #28]
 8009a9e:	e008      	b.n	8009ab2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d105      	bne.n	8009ab2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	68b9      	ldr	r1, [r7, #8]
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 faa3 	bl	8009ff6 <xQueueGenericCreate>
 8009ab0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00c      	beq.n	8009ad2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	e001      	b.n	8009aca <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009aca:	6979      	ldr	r1, [r7, #20]
 8009acc:	69f8      	ldr	r0, [r7, #28]
 8009ace:	f000 ff05 	bl	800a8dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009ad2:	69fb      	ldr	r3, [r7, #28]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3720      	adds	r7, #32
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	603b      	str	r3, [r7, #0]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af4:	f3ef 8305 	mrs	r3, IPSR
 8009af8:	617b      	str	r3, [r7, #20]
  return(result);
 8009afa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d028      	beq.n	8009b52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d005      	beq.n	8009b12 <osMessageQueuePut+0x36>
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <osMessageQueuePut+0x36>
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d003      	beq.n	8009b1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009b12:	f06f 0303 	mvn.w	r3, #3
 8009b16:	61fb      	str	r3, [r7, #28]
 8009b18:	e038      	b.n	8009b8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009b1e:	f107 0210 	add.w	r2, r7, #16
 8009b22:	2300      	movs	r3, #0
 8009b24:	68b9      	ldr	r1, [r7, #8]
 8009b26:	69b8      	ldr	r0, [r7, #24]
 8009b28:	f000 fbc6 	bl	800a2b8 <xQueueGenericSendFromISR>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d003      	beq.n	8009b3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009b32:	f06f 0302 	mvn.w	r3, #2
 8009b36:	61fb      	str	r3, [r7, #28]
 8009b38:	e028      	b.n	8009b8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d025      	beq.n	8009b8c <osMessageQueuePut+0xb0>
 8009b40:	4b15      	ldr	r3, [pc, #84]	@ (8009b98 <osMessageQueuePut+0xbc>)
 8009b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	e01c      	b.n	8009b8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <osMessageQueuePut+0x82>
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d103      	bne.n	8009b66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009b5e:	f06f 0303 	mvn.w	r3, #3
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	e012      	b.n	8009b8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009b66:	2300      	movs	r3, #0
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	69b8      	ldr	r0, [r7, #24]
 8009b6e:	f000 faa1 	bl	800a0b4 <xQueueGenericSend>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d009      	beq.n	8009b8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009b7e:	f06f 0301 	mvn.w	r3, #1
 8009b82:	61fb      	str	r3, [r7, #28]
 8009b84:	e002      	b.n	8009b8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009b86:	f06f 0302 	mvn.w	r3, #2
 8009b8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009b8c:	69fb      	ldr	r3, [r7, #28]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3720      	adds	r7, #32
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	e000ed04 	.word	0xe000ed04

08009b9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bb2:	f3ef 8305 	mrs	r3, IPSR
 8009bb6:	617b      	str	r3, [r7, #20]
  return(result);
 8009bb8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d028      	beq.n	8009c10 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d005      	beq.n	8009bd0 <osMessageQueueGet+0x34>
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <osMessageQueueGet+0x34>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009bd0:	f06f 0303 	mvn.w	r3, #3
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	e037      	b.n	8009c48 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009bdc:	f107 0310 	add.w	r3, r7, #16
 8009be0:	461a      	mov	r2, r3
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	69b8      	ldr	r0, [r7, #24]
 8009be6:	f000 fce7 	bl	800a5b8 <xQueueReceiveFromISR>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d003      	beq.n	8009bf8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009bf0:	f06f 0302 	mvn.w	r3, #2
 8009bf4:	61fb      	str	r3, [r7, #28]
 8009bf6:	e027      	b.n	8009c48 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d024      	beq.n	8009c48 <osMessageQueueGet+0xac>
 8009bfe:	4b15      	ldr	r3, [pc, #84]	@ (8009c54 <osMessageQueueGet+0xb8>)
 8009c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	e01b      	b.n	8009c48 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <osMessageQueueGet+0x80>
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d103      	bne.n	8009c24 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009c1c:	f06f 0303 	mvn.w	r3, #3
 8009c20:	61fb      	str	r3, [r7, #28]
 8009c22:	e011      	b.n	8009c48 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	68b9      	ldr	r1, [r7, #8]
 8009c28:	69b8      	ldr	r0, [r7, #24]
 8009c2a:	f000 fbe3 	bl	800a3f4 <xQueueReceive>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d009      	beq.n	8009c48 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009c3a:	f06f 0301 	mvn.w	r3, #1
 8009c3e:	61fb      	str	r3, [r7, #28]
 8009c40:	e002      	b.n	8009c48 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009c42:	f06f 0302 	mvn.w	r3, #2
 8009c46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009c48:	69fb      	ldr	r3, [r7, #28]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3720      	adds	r7, #32
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4a07      	ldr	r2, [pc, #28]	@ (8009c84 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	4a06      	ldr	r2, [pc, #24]	@ (8009c88 <vApplicationGetIdleTaskMemory+0x30>)
 8009c6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2280      	movs	r2, #128	@ 0x80
 8009c74:	601a      	str	r2, [r3, #0]
}
 8009c76:	bf00      	nop
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	20000298 	.word	0x20000298
 8009c88:	20000340 	.word	0x20000340

08009c8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4a07      	ldr	r2, [pc, #28]	@ (8009cb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009c9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	4a06      	ldr	r2, [pc, #24]	@ (8009cbc <vApplicationGetTimerTaskMemory+0x30>)
 8009ca2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009caa:	601a      	str	r2, [r3, #0]
}
 8009cac:	bf00      	nop
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	20000540 	.word	0x20000540
 8009cbc:	200005e8 	.word	0x200005e8

08009cc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f103 0208 	add.w	r2, r3, #8
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f103 0208 	add.w	r2, r3, #8
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f103 0208 	add.w	r2, r3, #8
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	601a      	str	r2, [r3, #0]
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d78:	d103      	bne.n	8009d82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	e00c      	b.n	8009d9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3308      	adds	r3, #8
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	e002      	b.n	8009d90 <vListInsert+0x2e>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d2f6      	bcs.n	8009d8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	601a      	str	r2, [r3, #0]
}
 8009dc8:	bf00      	nop
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	6892      	ldr	r2, [r2, #8]
 8009dea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	6852      	ldr	r2, [r2, #4]
 8009df4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d103      	bne.n	8009e08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	1e5a      	subs	r2, r3, #1
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	e7fd      	b.n	8009e50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e54:	f002 f968 	bl	800c128 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e60:	68f9      	ldr	r1, [r7, #12]
 8009e62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e64:	fb01 f303 	mul.w	r3, r1, r3
 8009e68:	441a      	add	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e84:	3b01      	subs	r3, #1
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e8a:	fb01 f303 	mul.w	r3, r1, r3
 8009e8e:	441a      	add	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	22ff      	movs	r2, #255	@ 0xff
 8009e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	22ff      	movs	r2, #255	@ 0xff
 8009ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d114      	bne.n	8009ed4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01a      	beq.n	8009ee8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3310      	adds	r3, #16
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 fa00 	bl	800b2bc <xTaskRemoveFromEventList>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d012      	beq.n	8009ee8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef8 <xQueueGenericReset+0xd0>)
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	e009      	b.n	8009ee8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	3310      	adds	r3, #16
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff fef1 	bl	8009cc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3324      	adds	r3, #36	@ 0x24
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff feec 	bl	8009cc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ee8:	f002 f950 	bl	800c18c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009eec:	2301      	movs	r3, #1
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	e000ed04 	.word	0xe000ed04

08009efc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b08e      	sub	sp, #56	@ 0x38
 8009f00:	af02      	add	r7, sp, #8
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10b      	bne.n	8009f28 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10b      	bne.n	8009f46 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f40:	bf00      	nop
 8009f42:	bf00      	nop
 8009f44:	e7fd      	b.n	8009f42 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <xQueueGenericCreateStatic+0x56>
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <xQueueGenericCreateStatic+0x5a>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e000      	b.n	8009f58 <xQueueGenericCreateStatic+0x5c>
 8009f56:	2300      	movs	r3, #0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10b      	bne.n	8009f74 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	623b      	str	r3, [r7, #32]
}
 8009f6e:	bf00      	nop
 8009f70:	bf00      	nop
 8009f72:	e7fd      	b.n	8009f70 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <xQueueGenericCreateStatic+0x84>
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <xQueueGenericCreateStatic+0x88>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <xQueueGenericCreateStatic+0x8a>
 8009f84:	2300      	movs	r3, #0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10b      	bne.n	8009fa2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	61fb      	str	r3, [r7, #28]
}
 8009f9c:	bf00      	nop
 8009f9e:	bf00      	nop
 8009fa0:	e7fd      	b.n	8009f9e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fa2:	2350      	movs	r3, #80	@ 0x50
 8009fa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2b50      	cmp	r3, #80	@ 0x50
 8009faa:	d00b      	beq.n	8009fc4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	61bb      	str	r3, [r7, #24]
}
 8009fbe:	bf00      	nop
 8009fc0:	bf00      	nop
 8009fc2:	e7fd      	b.n	8009fc0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009fc4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00d      	beq.n	8009fec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fd8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 f840 	bl	800a06c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3730      	adds	r7, #48	@ 0x30
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b08a      	sub	sp, #40	@ 0x28
 8009ffa:	af02      	add	r7, sp, #8
 8009ffc:	60f8      	str	r0, [r7, #12]
 8009ffe:	60b9      	str	r1, [r7, #8]
 800a000:	4613      	mov	r3, r2
 800a002:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10b      	bne.n	800a022 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	613b      	str	r3, [r7, #16]
}
 800a01c:	bf00      	nop
 800a01e:	bf00      	nop
 800a020:	e7fd      	b.n	800a01e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	fb02 f303 	mul.w	r3, r2, r3
 800a02a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	3350      	adds	r3, #80	@ 0x50
 800a030:	4618      	mov	r0, r3
 800a032:	f002 f99b 	bl	800c36c <pvPortMalloc>
 800a036:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d011      	beq.n	800a062 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	3350      	adds	r3, #80	@ 0x50
 800a046:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a050:	79fa      	ldrb	r2, [r7, #7]
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	4613      	mov	r3, r2
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	68b9      	ldr	r1, [r7, #8]
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 f805 	bl	800a06c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a062:	69bb      	ldr	r3, [r7, #24]
	}
 800a064:	4618      	mov	r0, r3
 800a066:	3720      	adds	r7, #32
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d103      	bne.n	800a088 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	69ba      	ldr	r2, [r7, #24]
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	e002      	b.n	800a08e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a09a:	2101      	movs	r1, #1
 800a09c:	69b8      	ldr	r0, [r7, #24]
 800a09e:	f7ff fec3 	bl	8009e28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	78fa      	ldrb	r2, [r7, #3]
 800a0a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0aa:	bf00      	nop
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08e      	sub	sp, #56	@ 0x38
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10b      	bne.n	800a0e8 <xQueueGenericSend+0x34>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d103      	bne.n	800a0f6 <xQueueGenericSend+0x42>
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <xQueueGenericSend+0x46>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e000      	b.n	800a0fc <xQueueGenericSend+0x48>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10b      	bne.n	800a118 <xQueueGenericSend+0x64>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a112:	bf00      	nop
 800a114:	bf00      	nop
 800a116:	e7fd      	b.n	800a114 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d103      	bne.n	800a126 <xQueueGenericSend+0x72>
 800a11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a122:	2b01      	cmp	r3, #1
 800a124:	d101      	bne.n	800a12a <xQueueGenericSend+0x76>
 800a126:	2301      	movs	r3, #1
 800a128:	e000      	b.n	800a12c <xQueueGenericSend+0x78>
 800a12a:	2300      	movs	r3, #0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10b      	bne.n	800a148 <xQueueGenericSend+0x94>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	623b      	str	r3, [r7, #32]
}
 800a142:	bf00      	nop
 800a144:	bf00      	nop
 800a146:	e7fd      	b.n	800a144 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a148:	f001 fa7e 	bl	800b648 <xTaskGetSchedulerState>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d102      	bne.n	800a158 <xQueueGenericSend+0xa4>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <xQueueGenericSend+0xa8>
 800a158:	2301      	movs	r3, #1
 800a15a:	e000      	b.n	800a15e <xQueueGenericSend+0xaa>
 800a15c:	2300      	movs	r3, #0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10b      	bne.n	800a17a <xQueueGenericSend+0xc6>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	61fb      	str	r3, [r7, #28]
}
 800a174:	bf00      	nop
 800a176:	bf00      	nop
 800a178:	e7fd      	b.n	800a176 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a17a:	f001 ffd5 	bl	800c128 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a186:	429a      	cmp	r2, r3
 800a188:	d302      	bcc.n	800a190 <xQueueGenericSend+0xdc>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d129      	bne.n	800a1e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a196:	f000 fa91 	bl	800a6bc <prvCopyDataToQueue>
 800a19a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d010      	beq.n	800a1c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a6:	3324      	adds	r3, #36	@ 0x24
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 f887 	bl	800b2bc <xTaskRemoveFromEventList>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d013      	beq.n	800a1dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1b4:	4b3f      	ldr	r3, [pc, #252]	@ (800a2b4 <xQueueGenericSend+0x200>)
 800a1b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	e00a      	b.n	800a1dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d007      	beq.n	800a1dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1cc:	4b39      	ldr	r3, [pc, #228]	@ (800a2b4 <xQueueGenericSend+0x200>)
 800a1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1dc:	f001 ffd6 	bl	800c18c <vPortExitCritical>
				return pdPASS;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e063      	b.n	800a2ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d103      	bne.n	800a1f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1ea:	f001 ffcf 	bl	800c18c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e05c      	b.n	800a2ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d106      	bne.n	800a206 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1f8:	f107 0314 	add.w	r3, r7, #20
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f001 f8c1 	bl	800b384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a202:	2301      	movs	r3, #1
 800a204:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a206:	f001 ffc1 	bl	800c18c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a20a:	f000 fe29 	bl	800ae60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a20e:	f001 ff8b 	bl	800c128 <vPortEnterCritical>
 800a212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a218:	b25b      	sxtb	r3, r3
 800a21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21e:	d103      	bne.n	800a228 <xQueueGenericSend+0x174>
 800a220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a22e:	b25b      	sxtb	r3, r3
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d103      	bne.n	800a23e <xQueueGenericSend+0x18a>
 800a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a23e:	f001 ffa5 	bl	800c18c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a242:	1d3a      	adds	r2, r7, #4
 800a244:	f107 0314 	add.w	r3, r7, #20
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f001 f8b0 	bl	800b3b0 <xTaskCheckForTimeOut>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d124      	bne.n	800a2a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a256:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a258:	f000 fb28 	bl	800a8ac <prvIsQueueFull>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d018      	beq.n	800a294 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	3310      	adds	r3, #16
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 ffd4 	bl	800b218 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a270:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a272:	f000 fab3 	bl	800a7dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a276:	f000 fe01 	bl	800ae7c <xTaskResumeAll>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f47f af7c 	bne.w	800a17a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a282:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b4 <xQueueGenericSend+0x200>)
 800a284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	e772      	b.n	800a17a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a296:	f000 faa1 	bl	800a7dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a29a:	f000 fdef 	bl	800ae7c <xTaskResumeAll>
 800a29e:	e76c      	b.n	800a17a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2a2:	f000 fa9b 	bl	800a7dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2a6:	f000 fde9 	bl	800ae7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3738      	adds	r7, #56	@ 0x38
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	e000ed04 	.word	0xe000ed04

0800a2b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b090      	sub	sp, #64	@ 0x40
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10b      	bne.n	800a2e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
 800a2e6:	e7fd      	b.n	800a2e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d103      	bne.n	800a2f6 <xQueueGenericSendFromISR+0x3e>
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <xQueueGenericSendFromISR+0x42>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e000      	b.n	800a2fc <xQueueGenericSendFromISR+0x44>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10b      	bne.n	800a318 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a312:	bf00      	nop
 800a314:	bf00      	nop
 800a316:	e7fd      	b.n	800a314 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d103      	bne.n	800a326 <xQueueGenericSendFromISR+0x6e>
 800a31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <xQueueGenericSendFromISR+0x72>
 800a326:	2301      	movs	r3, #1
 800a328:	e000      	b.n	800a32c <xQueueGenericSendFromISR+0x74>
 800a32a:	2300      	movs	r3, #0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10b      	bne.n	800a348 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	623b      	str	r3, [r7, #32]
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	e7fd      	b.n	800a344 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a348:	f001 ffce 	bl	800c2e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a34c:	f3ef 8211 	mrs	r2, BASEPRI
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	61fa      	str	r2, [r7, #28]
 800a362:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a364:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a366:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a370:	429a      	cmp	r2, r3
 800a372:	d302      	bcc.n	800a37a <xQueueGenericSendFromISR+0xc2>
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d12f      	bne.n	800a3da <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a380:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a388:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	68b9      	ldr	r1, [r7, #8]
 800a38e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a390:	f000 f994 	bl	800a6bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a394:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39c:	d112      	bne.n	800a3c4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d016      	beq.n	800a3d4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a8:	3324      	adds	r3, #36	@ 0x24
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f000 ff86 	bl	800b2bc <xTaskRemoveFromEventList>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00e      	beq.n	800a3d4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00b      	beq.n	800a3d4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	e007      	b.n	800a3d4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	b25a      	sxtb	r2, r3
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a3d8:	e001      	b.n	800a3de <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a3e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3740      	adds	r7, #64	@ 0x40
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08c      	sub	sp, #48	@ 0x30
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a400:	2300      	movs	r3, #0
 800a402:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10b      	bne.n	800a426 <xQueueReceive+0x32>
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	623b      	str	r3, [r7, #32]
}
 800a420:	bf00      	nop
 800a422:	bf00      	nop
 800a424:	e7fd      	b.n	800a422 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d103      	bne.n	800a434 <xQueueReceive+0x40>
 800a42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <xQueueReceive+0x44>
 800a434:	2301      	movs	r3, #1
 800a436:	e000      	b.n	800a43a <xQueueReceive+0x46>
 800a438:	2300      	movs	r3, #0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10b      	bne.n	800a456 <xQueueReceive+0x62>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	61fb      	str	r3, [r7, #28]
}
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	e7fd      	b.n	800a452 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a456:	f001 f8f7 	bl	800b648 <xTaskGetSchedulerState>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d102      	bne.n	800a466 <xQueueReceive+0x72>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <xQueueReceive+0x76>
 800a466:	2301      	movs	r3, #1
 800a468:	e000      	b.n	800a46c <xQueueReceive+0x78>
 800a46a:	2300      	movs	r3, #0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10b      	bne.n	800a488 <xQueueReceive+0x94>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	61bb      	str	r3, [r7, #24]
}
 800a482:	bf00      	nop
 800a484:	bf00      	nop
 800a486:	e7fd      	b.n	800a484 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a488:	f001 fe4e 	bl	800c128 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01f      	beq.n	800a4d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a498:	68b9      	ldr	r1, [r7, #8]
 800a49a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a49c:	f000 f978 	bl	800a790 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a2:	1e5a      	subs	r2, r3, #1
 800a4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00f      	beq.n	800a4d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b2:	3310      	adds	r3, #16
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 ff01 	bl	800b2bc <xTaskRemoveFromEventList>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d007      	beq.n	800a4d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4c0:	4b3c      	ldr	r3, [pc, #240]	@ (800a5b4 <xQueueReceive+0x1c0>)
 800a4c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4d0:	f001 fe5c 	bl	800c18c <vPortExitCritical>
				return pdPASS;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e069      	b.n	800a5ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d103      	bne.n	800a4e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4de:	f001 fe55 	bl	800c18c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e062      	b.n	800a5ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d106      	bne.n	800a4fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4ec:	f107 0310 	add.w	r3, r7, #16
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 ff47 	bl	800b384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4fa:	f001 fe47 	bl	800c18c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4fe:	f000 fcaf 	bl	800ae60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a502:	f001 fe11 	bl	800c128 <vPortEnterCritical>
 800a506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a50c:	b25b      	sxtb	r3, r3
 800a50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a512:	d103      	bne.n	800a51c <xQueueReceive+0x128>
 800a514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a522:	b25b      	sxtb	r3, r3
 800a524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a528:	d103      	bne.n	800a532 <xQueueReceive+0x13e>
 800a52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a532:	f001 fe2b 	bl	800c18c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a536:	1d3a      	adds	r2, r7, #4
 800a538:	f107 0310 	add.w	r3, r7, #16
 800a53c:	4611      	mov	r1, r2
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 ff36 	bl	800b3b0 <xTaskCheckForTimeOut>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d123      	bne.n	800a592 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a54a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a54c:	f000 f998 	bl	800a880 <prvIsQueueEmpty>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d017      	beq.n	800a586 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a558:	3324      	adds	r3, #36	@ 0x24
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fe5a 	bl	800b218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a566:	f000 f939 	bl	800a7dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a56a:	f000 fc87 	bl	800ae7c <xTaskResumeAll>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d189      	bne.n	800a488 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a574:	4b0f      	ldr	r3, [pc, #60]	@ (800a5b4 <xQueueReceive+0x1c0>)
 800a576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	e780      	b.n	800a488 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a588:	f000 f928 	bl	800a7dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a58c:	f000 fc76 	bl	800ae7c <xTaskResumeAll>
 800a590:	e77a      	b.n	800a488 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a594:	f000 f922 	bl	800a7dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a598:	f000 fc70 	bl	800ae7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a59c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a59e:	f000 f96f 	bl	800a880 <prvIsQueueEmpty>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f43f af6f 	beq.w	800a488 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3730      	adds	r7, #48	@ 0x30
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	e000ed04 	.word	0xe000ed04

0800a5b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08e      	sub	sp, #56	@ 0x38
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10b      	bne.n	800a5e6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	623b      	str	r3, [r7, #32]
}
 800a5e0:	bf00      	nop
 800a5e2:	bf00      	nop
 800a5e4:	e7fd      	b.n	800a5e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d103      	bne.n	800a5f4 <xQueueReceiveFromISR+0x3c>
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <xQueueReceiveFromISR+0x40>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e000      	b.n	800a5fa <xQueueReceiveFromISR+0x42>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10b      	bne.n	800a616 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	61fb      	str	r3, [r7, #28]
}
 800a610:	bf00      	nop
 800a612:	bf00      	nop
 800a614:	e7fd      	b.n	800a612 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a616:	f001 fe67 	bl	800c2e8 <vPortValidateInterruptPriority>
	__asm volatile
 800a61a:	f3ef 8211 	mrs	r2, BASEPRI
 800a61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	61ba      	str	r2, [r7, #24]
 800a630:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a632:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a634:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a63a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d02f      	beq.n	800a6a2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a64c:	68b9      	ldr	r1, [r7, #8]
 800a64e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a650:	f000 f89e 	bl	800a790 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a656:	1e5a      	subs	r2, r3, #1
 800a658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a65c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a664:	d112      	bne.n	800a68c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d016      	beq.n	800a69c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a670:	3310      	adds	r3, #16
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fe22 	bl	800b2bc <xTaskRemoveFromEventList>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00e      	beq.n	800a69c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00b      	beq.n	800a69c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	e007      	b.n	800a69c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a68c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a690:	3301      	adds	r3, #1
 800a692:	b2db      	uxtb	r3, r3
 800a694:	b25a      	sxtb	r2, r3
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a69c:	2301      	movs	r3, #1
 800a69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a0:	e001      	b.n	800a6a6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f383 8811 	msr	BASEPRI, r3
}
 800a6b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3738      	adds	r7, #56	@ 0x38
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10d      	bne.n	800a6f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d14d      	bne.n	800a77e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 ffcc 	bl	800b684 <xTaskPriorityDisinherit>
 800a6ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	609a      	str	r2, [r3, #8]
 800a6f4:	e043      	b.n	800a77e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d119      	bne.n	800a730 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6858      	ldr	r0, [r3, #4]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a704:	461a      	mov	r2, r3
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	f002 fce6 	bl	800d0d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a714:	441a      	add	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	429a      	cmp	r2, r3
 800a724:	d32b      	bcc.n	800a77e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	605a      	str	r2, [r3, #4]
 800a72e:	e026      	b.n	800a77e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	68d8      	ldr	r0, [r3, #12]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a738:	461a      	mov	r2, r3
 800a73a:	68b9      	ldr	r1, [r7, #8]
 800a73c:	f002 fccc 	bl	800d0d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a748:	425b      	negs	r3, r3
 800a74a:	441a      	add	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	68da      	ldr	r2, [r3, #12]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d207      	bcs.n	800a76c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a764:	425b      	negs	r3, r3
 800a766:	441a      	add	r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d105      	bne.n	800a77e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	1c5a      	adds	r2, r3, #1
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a786:	697b      	ldr	r3, [r7, #20]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3718      	adds	r7, #24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d018      	beq.n	800a7d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68da      	ldr	r2, [r3, #12]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7aa:	441a      	add	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d303      	bcc.n	800a7c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68d9      	ldr	r1, [r3, #12]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6838      	ldr	r0, [r7, #0]
 800a7d0:	f002 fc82 	bl	800d0d8 <memcpy>
	}
}
 800a7d4:	bf00      	nop
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7e4:	f001 fca0 	bl	800c128 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7f0:	e011      	b.n	800a816 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d012      	beq.n	800a820 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	3324      	adds	r3, #36	@ 0x24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fd5c 	bl	800b2bc <xTaskRemoveFromEventList>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a80a:	f000 fe35 	bl	800b478 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
 800a810:	3b01      	subs	r3, #1
 800a812:	b2db      	uxtb	r3, r3
 800a814:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dce9      	bgt.n	800a7f2 <prvUnlockQueue+0x16>
 800a81e:	e000      	b.n	800a822 <prvUnlockQueue+0x46>
					break;
 800a820:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	22ff      	movs	r2, #255	@ 0xff
 800a826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a82a:	f001 fcaf 	bl	800c18c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a82e:	f001 fc7b 	bl	800c128 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a838:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a83a:	e011      	b.n	800a860 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d012      	beq.n	800a86a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3310      	adds	r3, #16
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 fd37 	bl	800b2bc <xTaskRemoveFromEventList>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a854:	f000 fe10 	bl	800b478 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a864:	2b00      	cmp	r3, #0
 800a866:	dce9      	bgt.n	800a83c <prvUnlockQueue+0x60>
 800a868:	e000      	b.n	800a86c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a86a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	22ff      	movs	r2, #255	@ 0xff
 800a870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a874:	f001 fc8a 	bl	800c18c <vPortExitCritical>
}
 800a878:	bf00      	nop
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a888:	f001 fc4e 	bl	800c128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a894:	2301      	movs	r3, #1
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e001      	b.n	800a89e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a89e:	f001 fc75 	bl	800c18c <vPortExitCritical>

	return xReturn;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8b4:	f001 fc38 	bl	800c128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d102      	bne.n	800a8ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	e001      	b.n	800a8ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8ce:	f001 fc5d 	bl	800c18c <vPortExitCritical>

	return xReturn;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
 800a8ea:	e014      	b.n	800a916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8ec:	4a0f      	ldr	r2, [pc, #60]	@ (800a92c <vQueueAddToRegistry+0x50>)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8f8:	490c      	ldr	r1, [pc, #48]	@ (800a92c <vQueueAddToRegistry+0x50>)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	683a      	ldr	r2, [r7, #0]
 800a8fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a902:	4a0a      	ldr	r2, [pc, #40]	@ (800a92c <vQueueAddToRegistry+0x50>)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	00db      	lsls	r3, r3, #3
 800a908:	4413      	add	r3, r2
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a90e:	e006      	b.n	800a91e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	3301      	adds	r3, #1
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2b07      	cmp	r3, #7
 800a91a:	d9e7      	bls.n	800a8ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	200009e8 	.word	0x200009e8

0800a930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a940:	f001 fbf2 	bl	800c128 <vPortEnterCritical>
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a94a:	b25b      	sxtb	r3, r3
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d103      	bne.n	800a95a <vQueueWaitForMessageRestricted+0x2a>
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a960:	b25b      	sxtb	r3, r3
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a966:	d103      	bne.n	800a970 <vQueueWaitForMessageRestricted+0x40>
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a970:	f001 fc0c 	bl	800c18c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d106      	bne.n	800a98a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	3324      	adds	r3, #36	@ 0x24
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	68b9      	ldr	r1, [r7, #8]
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fc6d 	bl	800b264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a98a:	6978      	ldr	r0, [r7, #20]
 800a98c:	f7ff ff26 	bl	800a7dc <prvUnlockQueue>
	}
 800a990:	bf00      	nop
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08e      	sub	sp, #56	@ 0x38
 800a99c:	af04      	add	r7, sp, #16
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
 800a9a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10b      	bne.n	800a9c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	623b      	str	r3, [r7, #32]
}
 800a9be:	bf00      	nop
 800a9c0:	bf00      	nop
 800a9c2:	e7fd      	b.n	800a9c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10b      	bne.n	800a9e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	61fb      	str	r3, [r7, #28]
}
 800a9dc:	bf00      	nop
 800a9de:	bf00      	nop
 800a9e0:	e7fd      	b.n	800a9de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9e2:	23a8      	movs	r3, #168	@ 0xa8
 800a9e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2ba8      	cmp	r3, #168	@ 0xa8
 800a9ea:	d00b      	beq.n	800aa04 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f0:	f383 8811 	msr	BASEPRI, r3
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	61bb      	str	r3, [r7, #24]
}
 800a9fe:	bf00      	nop
 800aa00:	bf00      	nop
 800aa02:	e7fd      	b.n	800aa00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01e      	beq.n	800aa4a <xTaskCreateStatic+0xb2>
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d01b      	beq.n	800aa4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1e:	2202      	movs	r2, #2
 800aa20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa24:	2300      	movs	r3, #0
 800aa26:	9303      	str	r3, [sp, #12]
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	9302      	str	r3, [sp, #8]
 800aa2c:	f107 0314 	add.w	r3, r7, #20
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 f851 	bl	800aae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa44:	f000 f8f6 	bl	800ac34 <prvAddNewTaskToReadyList>
 800aa48:	e001      	b.n	800aa4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa4e:	697b      	ldr	r3, [r7, #20]
	}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3728      	adds	r7, #40	@ 0x28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08c      	sub	sp, #48	@ 0x30
 800aa5c:	af04      	add	r7, sp, #16
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	603b      	str	r3, [r7, #0]
 800aa64:	4613      	mov	r3, r2
 800aa66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa68:	88fb      	ldrh	r3, [r7, #6]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 fc7d 	bl	800c36c <pvPortMalloc>
 800aa72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00e      	beq.n	800aa98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa7a:	20a8      	movs	r0, #168	@ 0xa8
 800aa7c:	f001 fc76 	bl	800c36c <pvPortMalloc>
 800aa80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa8e:	e005      	b.n	800aa9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f001 fd39 	bl	800c508 <vPortFree>
 800aa96:	e001      	b.n	800aa9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d017      	beq.n	800aad2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aaaa:	88fa      	ldrh	r2, [r7, #6]
 800aaac:	2300      	movs	r3, #0
 800aaae:	9303      	str	r3, [sp, #12]
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	9302      	str	r3, [sp, #8]
 800aab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f000 f80f 	bl	800aae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aac6:	69f8      	ldr	r0, [r7, #28]
 800aac8:	f000 f8b4 	bl	800ac34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aacc:	2301      	movs	r3, #1
 800aace:	61bb      	str	r3, [r7, #24]
 800aad0:	e002      	b.n	800aad8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aad2:	f04f 33ff 	mov.w	r3, #4294967295
 800aad6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aad8:	69bb      	ldr	r3, [r7, #24]
	}
 800aada:	4618      	mov	r0, r3
 800aadc:	3720      	adds	r7, #32
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b088      	sub	sp, #32
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	461a      	mov	r2, r3
 800aafc:	21a5      	movs	r1, #165	@ 0xa5
 800aafe:	f002 fa51 	bl	800cfa4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	f023 0307 	bic.w	r3, r3, #7
 800ab1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00b      	beq.n	800ab3e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ab26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	617b      	str	r3, [r7, #20]
}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	e7fd      	b.n	800ab3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d01f      	beq.n	800ab84 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab44:	2300      	movs	r3, #0
 800ab46:	61fb      	str	r3, [r7, #28]
 800ab48:	e012      	b.n	800ab70 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	4413      	add	r3, r2
 800ab50:	7819      	ldrb	r1, [r3, #0]
 800ab52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	4413      	add	r3, r2
 800ab58:	3334      	adds	r3, #52	@ 0x34
 800ab5a:	460a      	mov	r2, r1
 800ab5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	4413      	add	r3, r2
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d006      	beq.n	800ab78 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	61fb      	str	r3, [r7, #28]
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	2b0f      	cmp	r3, #15
 800ab74:	d9e9      	bls.n	800ab4a <prvInitialiseNewTask+0x66>
 800ab76:	e000      	b.n	800ab7a <prvInitialiseNewTask+0x96>
			{
				break;
 800ab78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab82:	e003      	b.n	800ab8c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8e:	2b37      	cmp	r3, #55	@ 0x37
 800ab90:	d901      	bls.n	800ab96 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab92:	2337      	movs	r3, #55	@ 0x37
 800ab94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aba0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	2200      	movs	r2, #0
 800aba6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	3304      	adds	r3, #4
 800abac:	4618      	mov	r0, r3
 800abae:	f7ff f8a7 	bl	8009d00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	3318      	adds	r3, #24
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff f8a2 	bl	8009d00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800abc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abd0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800abe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe4:	3354      	adds	r3, #84	@ 0x54
 800abe6:	224c      	movs	r2, #76	@ 0x4c
 800abe8:	2100      	movs	r1, #0
 800abea:	4618      	mov	r0, r3
 800abec:	f002 f9da 	bl	800cfa4 <memset>
 800abf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf2:	4a0d      	ldr	r2, [pc, #52]	@ (800ac28 <prvInitialiseNewTask+0x144>)
 800abf4:	659a      	str	r2, [r3, #88]	@ 0x58
 800abf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf8:	4a0c      	ldr	r2, [pc, #48]	@ (800ac2c <prvInitialiseNewTask+0x148>)
 800abfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 800abfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfe:	4a0c      	ldr	r2, [pc, #48]	@ (800ac30 <prvInitialiseNewTask+0x14c>)
 800ac00:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	68f9      	ldr	r1, [r7, #12]
 800ac06:	69b8      	ldr	r0, [r7, #24]
 800ac08:	f001 f95a 	bl	800bec0 <pxPortInitialiseStack>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac1e:	bf00      	nop
 800ac20:	3720      	adds	r7, #32
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20005370 	.word	0x20005370
 800ac2c:	200053d8 	.word	0x200053d8
 800ac30:	20005440 	.word	0x20005440

0800ac34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac3c:	f001 fa74 	bl	800c128 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac40:	4b2d      	ldr	r3, [pc, #180]	@ (800acf8 <prvAddNewTaskToReadyList+0xc4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3301      	adds	r3, #1
 800ac46:	4a2c      	ldr	r2, [pc, #176]	@ (800acf8 <prvAddNewTaskToReadyList+0xc4>)
 800ac48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac4a:	4b2c      	ldr	r3, [pc, #176]	@ (800acfc <prvAddNewTaskToReadyList+0xc8>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d109      	bne.n	800ac66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac52:	4a2a      	ldr	r2, [pc, #168]	@ (800acfc <prvAddNewTaskToReadyList+0xc8>)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac58:	4b27      	ldr	r3, [pc, #156]	@ (800acf8 <prvAddNewTaskToReadyList+0xc4>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d110      	bne.n	800ac82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac60:	f000 fc2e 	bl	800b4c0 <prvInitialiseTaskLists>
 800ac64:	e00d      	b.n	800ac82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac66:	4b26      	ldr	r3, [pc, #152]	@ (800ad00 <prvAddNewTaskToReadyList+0xcc>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d109      	bne.n	800ac82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac6e:	4b23      	ldr	r3, [pc, #140]	@ (800acfc <prvAddNewTaskToReadyList+0xc8>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d802      	bhi.n	800ac82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac7c:	4a1f      	ldr	r2, [pc, #124]	@ (800acfc <prvAddNewTaskToReadyList+0xc8>)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac82:	4b20      	ldr	r3, [pc, #128]	@ (800ad04 <prvAddNewTaskToReadyList+0xd0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3301      	adds	r3, #1
 800ac88:	4a1e      	ldr	r2, [pc, #120]	@ (800ad04 <prvAddNewTaskToReadyList+0xd0>)
 800ac8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac8c:	4b1d      	ldr	r3, [pc, #116]	@ (800ad04 <prvAddNewTaskToReadyList+0xd0>)
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac98:	4b1b      	ldr	r3, [pc, #108]	@ (800ad08 <prvAddNewTaskToReadyList+0xd4>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d903      	bls.n	800aca8 <prvAddNewTaskToReadyList+0x74>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca4:	4a18      	ldr	r2, [pc, #96]	@ (800ad08 <prvAddNewTaskToReadyList+0xd4>)
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4a15      	ldr	r2, [pc, #84]	@ (800ad0c <prvAddNewTaskToReadyList+0xd8>)
 800acb6:	441a      	add	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3304      	adds	r3, #4
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f7ff f82b 	bl	8009d1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acc4:	f001 fa62 	bl	800c18c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acc8:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <prvAddNewTaskToReadyList+0xcc>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00e      	beq.n	800acee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800acd0:	4b0a      	ldr	r3, [pc, #40]	@ (800acfc <prvAddNewTaskToReadyList+0xc8>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acda:	429a      	cmp	r2, r3
 800acdc:	d207      	bcs.n	800acee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acde:	4b0c      	ldr	r3, [pc, #48]	@ (800ad10 <prvAddNewTaskToReadyList+0xdc>)
 800ace0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acee:	bf00      	nop
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20000efc 	.word	0x20000efc
 800acfc:	20000a28 	.word	0x20000a28
 800ad00:	20000f08 	.word	0x20000f08
 800ad04:	20000f18 	.word	0x20000f18
 800ad08:	20000f04 	.word	0x20000f04
 800ad0c:	20000a2c 	.word	0x20000a2c
 800ad10:	e000ed04 	.word	0xe000ed04

0800ad14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d018      	beq.n	800ad58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad26:	4b14      	ldr	r3, [pc, #80]	@ (800ad78 <vTaskDelay+0x64>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00b      	beq.n	800ad46 <vTaskDelay+0x32>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	60bb      	str	r3, [r7, #8]
}
 800ad40:	bf00      	nop
 800ad42:	bf00      	nop
 800ad44:	e7fd      	b.n	800ad42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad46:	f000 f88b 	bl	800ae60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 fd09 	bl	800b764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad52:	f000 f893 	bl	800ae7c <xTaskResumeAll>
 800ad56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d107      	bne.n	800ad6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ad5e:	4b07      	ldr	r3, [pc, #28]	@ (800ad7c <vTaskDelay+0x68>)
 800ad60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad64:	601a      	str	r2, [r3, #0]
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	20000f24 	.word	0x20000f24
 800ad7c:	e000ed04 	.word	0xe000ed04

0800ad80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08a      	sub	sp, #40	@ 0x28
 800ad84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad8e:	463a      	mov	r2, r7
 800ad90:	1d39      	adds	r1, r7, #4
 800ad92:	f107 0308 	add.w	r3, r7, #8
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fe ff5e 	bl	8009c58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	9202      	str	r2, [sp, #8]
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	2300      	movs	r3, #0
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	2300      	movs	r3, #0
 800adac:	460a      	mov	r2, r1
 800adae:	4924      	ldr	r1, [pc, #144]	@ (800ae40 <vTaskStartScheduler+0xc0>)
 800adb0:	4824      	ldr	r0, [pc, #144]	@ (800ae44 <vTaskStartScheduler+0xc4>)
 800adb2:	f7ff fdf1 	bl	800a998 <xTaskCreateStatic>
 800adb6:	4603      	mov	r3, r0
 800adb8:	4a23      	ldr	r2, [pc, #140]	@ (800ae48 <vTaskStartScheduler+0xc8>)
 800adba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800adbc:	4b22      	ldr	r3, [pc, #136]	@ (800ae48 <vTaskStartScheduler+0xc8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800adc4:	2301      	movs	r3, #1
 800adc6:	617b      	str	r3, [r7, #20]
 800adc8:	e001      	b.n	800adce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d102      	bne.n	800adda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800add4:	f000 fd1a 	bl	800b80c <xTimerCreateTimerTask>
 800add8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d11b      	bne.n	800ae18 <vTaskStartScheduler+0x98>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	613b      	str	r3, [r7, #16]
}
 800adf2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800adf4:	4b15      	ldr	r3, [pc, #84]	@ (800ae4c <vTaskStartScheduler+0xcc>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	3354      	adds	r3, #84	@ 0x54
 800adfa:	4a15      	ldr	r2, [pc, #84]	@ (800ae50 <vTaskStartScheduler+0xd0>)
 800adfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800adfe:	4b15      	ldr	r3, [pc, #84]	@ (800ae54 <vTaskStartScheduler+0xd4>)
 800ae00:	f04f 32ff 	mov.w	r2, #4294967295
 800ae04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae06:	4b14      	ldr	r3, [pc, #80]	@ (800ae58 <vTaskStartScheduler+0xd8>)
 800ae08:	2201      	movs	r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae0c:	4b13      	ldr	r3, [pc, #76]	@ (800ae5c <vTaskStartScheduler+0xdc>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae12:	f001 f8e5 	bl	800bfe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae16:	e00f      	b.n	800ae38 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1e:	d10b      	bne.n	800ae38 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	60fb      	str	r3, [r7, #12]
}
 800ae32:	bf00      	nop
 800ae34:	bf00      	nop
 800ae36:	e7fd      	b.n	800ae34 <vTaskStartScheduler+0xb4>
}
 800ae38:	bf00      	nop
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	0800d934 	.word	0x0800d934
 800ae44:	0800b491 	.word	0x0800b491
 800ae48:	20000f20 	.word	0x20000f20
 800ae4c:	20000a28 	.word	0x20000a28
 800ae50:	20000030 	.word	0x20000030
 800ae54:	20000f1c 	.word	0x20000f1c
 800ae58:	20000f08 	.word	0x20000f08
 800ae5c:	20000f00 	.word	0x20000f00

0800ae60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae64:	4b04      	ldr	r3, [pc, #16]	@ (800ae78 <vTaskSuspendAll+0x18>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	4a03      	ldr	r2, [pc, #12]	@ (800ae78 <vTaskSuspendAll+0x18>)
 800ae6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae6e:	bf00      	nop
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	20000f24 	.word	0x20000f24

0800ae7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae86:	2300      	movs	r3, #0
 800ae88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae8a:	4b42      	ldr	r3, [pc, #264]	@ (800af94 <xTaskResumeAll+0x118>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10b      	bne.n	800aeaa <xTaskResumeAll+0x2e>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	603b      	str	r3, [r7, #0]
}
 800aea4:	bf00      	nop
 800aea6:	bf00      	nop
 800aea8:	e7fd      	b.n	800aea6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aeaa:	f001 f93d 	bl	800c128 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aeae:	4b39      	ldr	r3, [pc, #228]	@ (800af94 <xTaskResumeAll+0x118>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	4a37      	ldr	r2, [pc, #220]	@ (800af94 <xTaskResumeAll+0x118>)
 800aeb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeb8:	4b36      	ldr	r3, [pc, #216]	@ (800af94 <xTaskResumeAll+0x118>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d162      	bne.n	800af86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aec0:	4b35      	ldr	r3, [pc, #212]	@ (800af98 <xTaskResumeAll+0x11c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d05e      	beq.n	800af86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aec8:	e02f      	b.n	800af2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeca:	4b34      	ldr	r3, [pc, #208]	@ (800af9c <xTaskResumeAll+0x120>)
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3318      	adds	r3, #24
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe ff7c 	bl	8009dd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3304      	adds	r3, #4
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fe ff77 	bl	8009dd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeea:	4b2d      	ldr	r3, [pc, #180]	@ (800afa0 <xTaskResumeAll+0x124>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d903      	bls.n	800aefa <xTaskResumeAll+0x7e>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef6:	4a2a      	ldr	r2, [pc, #168]	@ (800afa0 <xTaskResumeAll+0x124>)
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aefe:	4613      	mov	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4a27      	ldr	r2, [pc, #156]	@ (800afa4 <xTaskResumeAll+0x128>)
 800af08:	441a      	add	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3304      	adds	r3, #4
 800af0e:	4619      	mov	r1, r3
 800af10:	4610      	mov	r0, r2
 800af12:	f7fe ff02 	bl	8009d1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af1a:	4b23      	ldr	r3, [pc, #140]	@ (800afa8 <xTaskResumeAll+0x12c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af20:	429a      	cmp	r2, r3
 800af22:	d302      	bcc.n	800af2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800af24:	4b21      	ldr	r3, [pc, #132]	@ (800afac <xTaskResumeAll+0x130>)
 800af26:	2201      	movs	r2, #1
 800af28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af2a:	4b1c      	ldr	r3, [pc, #112]	@ (800af9c <xTaskResumeAll+0x120>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1cb      	bne.n	800aeca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af38:	f000 fb66 	bl	800b608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af3c:	4b1c      	ldr	r3, [pc, #112]	@ (800afb0 <xTaskResumeAll+0x134>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d010      	beq.n	800af6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af48:	f000 f846 	bl	800afd8 <xTaskIncrementTick>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d002      	beq.n	800af58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800af52:	4b16      	ldr	r3, [pc, #88]	@ (800afac <xTaskResumeAll+0x130>)
 800af54:	2201      	movs	r2, #1
 800af56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1f1      	bne.n	800af48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800af64:	4b12      	ldr	r3, [pc, #72]	@ (800afb0 <xTaskResumeAll+0x134>)
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af6a:	4b10      	ldr	r3, [pc, #64]	@ (800afac <xTaskResumeAll+0x130>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d009      	beq.n	800af86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af72:	2301      	movs	r3, #1
 800af74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af76:	4b0f      	ldr	r3, [pc, #60]	@ (800afb4 <xTaskResumeAll+0x138>)
 800af78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af86:	f001 f901 	bl	800c18c <vPortExitCritical>

	return xAlreadyYielded;
 800af8a:	68bb      	ldr	r3, [r7, #8]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	20000f24 	.word	0x20000f24
 800af98:	20000efc 	.word	0x20000efc
 800af9c:	20000ebc 	.word	0x20000ebc
 800afa0:	20000f04 	.word	0x20000f04
 800afa4:	20000a2c 	.word	0x20000a2c
 800afa8:	20000a28 	.word	0x20000a28
 800afac:	20000f10 	.word	0x20000f10
 800afb0:	20000f0c 	.word	0x20000f0c
 800afb4:	e000ed04 	.word	0xe000ed04

0800afb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afbe:	4b05      	ldr	r3, [pc, #20]	@ (800afd4 <xTaskGetTickCount+0x1c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afc4:	687b      	ldr	r3, [r7, #4]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	370c      	adds	r7, #12
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20000f00 	.word	0x20000f00

0800afd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afe2:	4b4f      	ldr	r3, [pc, #316]	@ (800b120 <xTaskIncrementTick+0x148>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f040 8090 	bne.w	800b10c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afec:	4b4d      	ldr	r3, [pc, #308]	@ (800b124 <xTaskIncrementTick+0x14c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3301      	adds	r3, #1
 800aff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aff4:	4a4b      	ldr	r2, [pc, #300]	@ (800b124 <xTaskIncrementTick+0x14c>)
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d121      	bne.n	800b044 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b000:	4b49      	ldr	r3, [pc, #292]	@ (800b128 <xTaskIncrementTick+0x150>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00b      	beq.n	800b022 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	603b      	str	r3, [r7, #0]
}
 800b01c:	bf00      	nop
 800b01e:	bf00      	nop
 800b020:	e7fd      	b.n	800b01e <xTaskIncrementTick+0x46>
 800b022:	4b41      	ldr	r3, [pc, #260]	@ (800b128 <xTaskIncrementTick+0x150>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	4b40      	ldr	r3, [pc, #256]	@ (800b12c <xTaskIncrementTick+0x154>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a3e      	ldr	r2, [pc, #248]	@ (800b128 <xTaskIncrementTick+0x150>)
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	4a3e      	ldr	r2, [pc, #248]	@ (800b12c <xTaskIncrementTick+0x154>)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6013      	str	r3, [r2, #0]
 800b036:	4b3e      	ldr	r3, [pc, #248]	@ (800b130 <xTaskIncrementTick+0x158>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3301      	adds	r3, #1
 800b03c:	4a3c      	ldr	r2, [pc, #240]	@ (800b130 <xTaskIncrementTick+0x158>)
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	f000 fae2 	bl	800b608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b044:	4b3b      	ldr	r3, [pc, #236]	@ (800b134 <xTaskIncrementTick+0x15c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d349      	bcc.n	800b0e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b04e:	4b36      	ldr	r3, [pc, #216]	@ (800b128 <xTaskIncrementTick+0x150>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d104      	bne.n	800b062 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b058:	4b36      	ldr	r3, [pc, #216]	@ (800b134 <xTaskIncrementTick+0x15c>)
 800b05a:	f04f 32ff 	mov.w	r2, #4294967295
 800b05e:	601a      	str	r2, [r3, #0]
					break;
 800b060:	e03f      	b.n	800b0e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b062:	4b31      	ldr	r3, [pc, #196]	@ (800b128 <xTaskIncrementTick+0x150>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	429a      	cmp	r2, r3
 800b078:	d203      	bcs.n	800b082 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b07a:	4a2e      	ldr	r2, [pc, #184]	@ (800b134 <xTaskIncrementTick+0x15c>)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b080:	e02f      	b.n	800b0e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	3304      	adds	r3, #4
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fea4 	bl	8009dd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	3318      	adds	r3, #24
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fe fe9b 	bl	8009dd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a2:	4b25      	ldr	r3, [pc, #148]	@ (800b138 <xTaskIncrementTick+0x160>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d903      	bls.n	800b0b2 <xTaskIncrementTick+0xda>
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ae:	4a22      	ldr	r2, [pc, #136]	@ (800b138 <xTaskIncrementTick+0x160>)
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4a1f      	ldr	r2, [pc, #124]	@ (800b13c <xTaskIncrementTick+0x164>)
 800b0c0:	441a      	add	r2, r3
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	f7fe fe26 	bl	8009d1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b140 <xTaskIncrementTick+0x168>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d3b8      	bcc.n	800b04e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0e0:	e7b5      	b.n	800b04e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0e2:	4b17      	ldr	r3, [pc, #92]	@ (800b140 <xTaskIncrementTick+0x168>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e8:	4914      	ldr	r1, [pc, #80]	@ (800b13c <xTaskIncrementTick+0x164>)
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d901      	bls.n	800b0fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0fe:	4b11      	ldr	r3, [pc, #68]	@ (800b144 <xTaskIncrementTick+0x16c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d007      	beq.n	800b116 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b106:	2301      	movs	r3, #1
 800b108:	617b      	str	r3, [r7, #20]
 800b10a:	e004      	b.n	800b116 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b10c:	4b0e      	ldr	r3, [pc, #56]	@ (800b148 <xTaskIncrementTick+0x170>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3301      	adds	r3, #1
 800b112:	4a0d      	ldr	r2, [pc, #52]	@ (800b148 <xTaskIncrementTick+0x170>)
 800b114:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b116:	697b      	ldr	r3, [r7, #20]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	20000f24 	.word	0x20000f24
 800b124:	20000f00 	.word	0x20000f00
 800b128:	20000eb4 	.word	0x20000eb4
 800b12c:	20000eb8 	.word	0x20000eb8
 800b130:	20000f14 	.word	0x20000f14
 800b134:	20000f1c 	.word	0x20000f1c
 800b138:	20000f04 	.word	0x20000f04
 800b13c:	20000a2c 	.word	0x20000a2c
 800b140:	20000a28 	.word	0x20000a28
 800b144:	20000f10 	.word	0x20000f10
 800b148:	20000f0c 	.word	0x20000f0c

0800b14c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b152:	4b2b      	ldr	r3, [pc, #172]	@ (800b200 <vTaskSwitchContext+0xb4>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b15a:	4b2a      	ldr	r3, [pc, #168]	@ (800b204 <vTaskSwitchContext+0xb8>)
 800b15c:	2201      	movs	r2, #1
 800b15e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b160:	e047      	b.n	800b1f2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b162:	4b28      	ldr	r3, [pc, #160]	@ (800b204 <vTaskSwitchContext+0xb8>)
 800b164:	2200      	movs	r2, #0
 800b166:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b168:	4b27      	ldr	r3, [pc, #156]	@ (800b208 <vTaskSwitchContext+0xbc>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	e011      	b.n	800b194 <vTaskSwitchContext+0x48>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10b      	bne.n	800b18e <vTaskSwitchContext+0x42>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	607b      	str	r3, [r7, #4]
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	e7fd      	b.n	800b18a <vTaskSwitchContext+0x3e>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3b01      	subs	r3, #1
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	491d      	ldr	r1, [pc, #116]	@ (800b20c <vTaskSwitchContext+0xc0>)
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	4613      	mov	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	440b      	add	r3, r1
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0e3      	beq.n	800b170 <vTaskSwitchContext+0x24>
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4a16      	ldr	r2, [pc, #88]	@ (800b20c <vTaskSwitchContext+0xc0>)
 800b1b4:	4413      	add	r3, r2
 800b1b6:	60bb      	str	r3, [r7, #8]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	605a      	str	r2, [r3, #4]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d104      	bne.n	800b1d8 <vTaskSwitchContext+0x8c>
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	605a      	str	r2, [r3, #4]
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	4a0c      	ldr	r2, [pc, #48]	@ (800b210 <vTaskSwitchContext+0xc4>)
 800b1e0:	6013      	str	r3, [r2, #0]
 800b1e2:	4a09      	ldr	r2, [pc, #36]	@ (800b208 <vTaskSwitchContext+0xbc>)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1e8:	4b09      	ldr	r3, [pc, #36]	@ (800b210 <vTaskSwitchContext+0xc4>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3354      	adds	r3, #84	@ 0x54
 800b1ee:	4a09      	ldr	r2, [pc, #36]	@ (800b214 <vTaskSwitchContext+0xc8>)
 800b1f0:	6013      	str	r3, [r2, #0]
}
 800b1f2:	bf00      	nop
 800b1f4:	3714      	adds	r7, #20
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	20000f24 	.word	0x20000f24
 800b204:	20000f10 	.word	0x20000f10
 800b208:	20000f04 	.word	0x20000f04
 800b20c:	20000a2c 	.word	0x20000a2c
 800b210:	20000a28 	.word	0x20000a28
 800b214:	20000030 	.word	0x20000030

0800b218 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10b      	bne.n	800b240 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	60fb      	str	r3, [r7, #12]
}
 800b23a:	bf00      	nop
 800b23c:	bf00      	nop
 800b23e:	e7fd      	b.n	800b23c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b240:	4b07      	ldr	r3, [pc, #28]	@ (800b260 <vTaskPlaceOnEventList+0x48>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3318      	adds	r3, #24
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7fe fd8a 	bl	8009d62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b24e:	2101      	movs	r1, #1
 800b250:	6838      	ldr	r0, [r7, #0]
 800b252:	f000 fa87 	bl	800b764 <prvAddCurrentTaskToDelayedList>
}
 800b256:	bf00      	nop
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20000a28 	.word	0x20000a28

0800b264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10b      	bne.n	800b28e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	617b      	str	r3, [r7, #20]
}
 800b288:	bf00      	nop
 800b28a:	bf00      	nop
 800b28c:	e7fd      	b.n	800b28a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b28e:	4b0a      	ldr	r3, [pc, #40]	@ (800b2b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3318      	adds	r3, #24
 800b294:	4619      	mov	r1, r3
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f7fe fd3f 	bl	8009d1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2a8:	6879      	ldr	r1, [r7, #4]
 800b2aa:	68b8      	ldr	r0, [r7, #8]
 800b2ac:	f000 fa5a 	bl	800b764 <prvAddCurrentTaskToDelayedList>
	}
 800b2b0:	bf00      	nop
 800b2b2:	3718      	adds	r7, #24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	20000a28 	.word	0x20000a28

0800b2bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10b      	bne.n	800b2ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	60fb      	str	r3, [r7, #12]
}
 800b2e4:	bf00      	nop
 800b2e6:	bf00      	nop
 800b2e8:	e7fd      	b.n	800b2e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	3318      	adds	r3, #24
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fd70 	bl	8009dd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b36c <xTaskRemoveFromEventList+0xb0>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d11d      	bne.n	800b338 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	3304      	adds	r3, #4
 800b300:	4618      	mov	r0, r3
 800b302:	f7fe fd67 	bl	8009dd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b30a:	4b19      	ldr	r3, [pc, #100]	@ (800b370 <xTaskRemoveFromEventList+0xb4>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d903      	bls.n	800b31a <xTaskRemoveFromEventList+0x5e>
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b316:	4a16      	ldr	r2, [pc, #88]	@ (800b370 <xTaskRemoveFromEventList+0xb4>)
 800b318:	6013      	str	r3, [r2, #0]
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31e:	4613      	mov	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4413      	add	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4a13      	ldr	r2, [pc, #76]	@ (800b374 <xTaskRemoveFromEventList+0xb8>)
 800b328:	441a      	add	r2, r3
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	3304      	adds	r3, #4
 800b32e:	4619      	mov	r1, r3
 800b330:	4610      	mov	r0, r2
 800b332:	f7fe fcf2 	bl	8009d1a <vListInsertEnd>
 800b336:	e005      	b.n	800b344 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	3318      	adds	r3, #24
 800b33c:	4619      	mov	r1, r3
 800b33e:	480e      	ldr	r0, [pc, #56]	@ (800b378 <xTaskRemoveFromEventList+0xbc>)
 800b340:	f7fe fceb 	bl	8009d1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b348:	4b0c      	ldr	r3, [pc, #48]	@ (800b37c <xTaskRemoveFromEventList+0xc0>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34e:	429a      	cmp	r2, r3
 800b350:	d905      	bls.n	800b35e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b352:	2301      	movs	r3, #1
 800b354:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b356:	4b0a      	ldr	r3, [pc, #40]	@ (800b380 <xTaskRemoveFromEventList+0xc4>)
 800b358:	2201      	movs	r2, #1
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	e001      	b.n	800b362 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b35e:	2300      	movs	r3, #0
 800b360:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b362:	697b      	ldr	r3, [r7, #20]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3718      	adds	r7, #24
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20000f24 	.word	0x20000f24
 800b370:	20000f04 	.word	0x20000f04
 800b374:	20000a2c 	.word	0x20000a2c
 800b378:	20000ebc 	.word	0x20000ebc
 800b37c:	20000a28 	.word	0x20000a28
 800b380:	20000f10 	.word	0x20000f10

0800b384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b38c:	4b06      	ldr	r3, [pc, #24]	@ (800b3a8 <vTaskInternalSetTimeOutState+0x24>)
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b394:	4b05      	ldr	r3, [pc, #20]	@ (800b3ac <vTaskInternalSetTimeOutState+0x28>)
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	605a      	str	r2, [r3, #4]
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	20000f14 	.word	0x20000f14
 800b3ac:	20000f00 	.word	0x20000f00

0800b3b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b088      	sub	sp, #32
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10b      	bne.n	800b3d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	613b      	str	r3, [r7, #16]
}
 800b3d2:	bf00      	nop
 800b3d4:	bf00      	nop
 800b3d6:	e7fd      	b.n	800b3d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10b      	bne.n	800b3f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	60fb      	str	r3, [r7, #12]
}
 800b3f0:	bf00      	nop
 800b3f2:	bf00      	nop
 800b3f4:	e7fd      	b.n	800b3f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b3f6:	f000 fe97 	bl	800c128 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b470 <xTaskCheckForTimeOut+0xc0>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	69ba      	ldr	r2, [r7, #24]
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b412:	d102      	bne.n	800b41a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b414:	2300      	movs	r3, #0
 800b416:	61fb      	str	r3, [r7, #28]
 800b418:	e023      	b.n	800b462 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	4b15      	ldr	r3, [pc, #84]	@ (800b474 <xTaskCheckForTimeOut+0xc4>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	429a      	cmp	r2, r3
 800b424:	d007      	beq.n	800b436 <xTaskCheckForTimeOut+0x86>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	69ba      	ldr	r2, [r7, #24]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d302      	bcc.n	800b436 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	61fb      	str	r3, [r7, #28]
 800b434:	e015      	b.n	800b462 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d20b      	bcs.n	800b458 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	1ad2      	subs	r2, r2, r3
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff ff99 	bl	800b384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b452:	2300      	movs	r3, #0
 800b454:	61fb      	str	r3, [r7, #28]
 800b456:	e004      	b.n	800b462 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2200      	movs	r2, #0
 800b45c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b45e:	2301      	movs	r3, #1
 800b460:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b462:	f000 fe93 	bl	800c18c <vPortExitCritical>

	return xReturn;
 800b466:	69fb      	ldr	r3, [r7, #28]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3720      	adds	r7, #32
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20000f00 	.word	0x20000f00
 800b474:	20000f14 	.word	0x20000f14

0800b478 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b478:	b480      	push	{r7}
 800b47a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b47c:	4b03      	ldr	r3, [pc, #12]	@ (800b48c <vTaskMissedYield+0x14>)
 800b47e:	2201      	movs	r2, #1
 800b480:	601a      	str	r2, [r3, #0]
}
 800b482:	bf00      	nop
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr
 800b48c:	20000f10 	.word	0x20000f10

0800b490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b498:	f000 f852 	bl	800b540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b49c:	4b06      	ldr	r3, [pc, #24]	@ (800b4b8 <prvIdleTask+0x28>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d9f9      	bls.n	800b498 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4a4:	4b05      	ldr	r3, [pc, #20]	@ (800b4bc <prvIdleTask+0x2c>)
 800b4a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4b4:	e7f0      	b.n	800b498 <prvIdleTask+0x8>
 800b4b6:	bf00      	nop
 800b4b8:	20000a2c 	.word	0x20000a2c
 800b4bc:	e000ed04 	.word	0xe000ed04

0800b4c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	607b      	str	r3, [r7, #4]
 800b4ca:	e00c      	b.n	800b4e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4a12      	ldr	r2, [pc, #72]	@ (800b520 <prvInitialiseTaskLists+0x60>)
 800b4d8:	4413      	add	r3, r2
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fe fbf0 	bl	8009cc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	607b      	str	r3, [r7, #4]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2b37      	cmp	r3, #55	@ 0x37
 800b4ea:	d9ef      	bls.n	800b4cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4ec:	480d      	ldr	r0, [pc, #52]	@ (800b524 <prvInitialiseTaskLists+0x64>)
 800b4ee:	f7fe fbe7 	bl	8009cc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4f2:	480d      	ldr	r0, [pc, #52]	@ (800b528 <prvInitialiseTaskLists+0x68>)
 800b4f4:	f7fe fbe4 	bl	8009cc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4f8:	480c      	ldr	r0, [pc, #48]	@ (800b52c <prvInitialiseTaskLists+0x6c>)
 800b4fa:	f7fe fbe1 	bl	8009cc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4fe:	480c      	ldr	r0, [pc, #48]	@ (800b530 <prvInitialiseTaskLists+0x70>)
 800b500:	f7fe fbde 	bl	8009cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b504:	480b      	ldr	r0, [pc, #44]	@ (800b534 <prvInitialiseTaskLists+0x74>)
 800b506:	f7fe fbdb 	bl	8009cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b50a:	4b0b      	ldr	r3, [pc, #44]	@ (800b538 <prvInitialiseTaskLists+0x78>)
 800b50c:	4a05      	ldr	r2, [pc, #20]	@ (800b524 <prvInitialiseTaskLists+0x64>)
 800b50e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b510:	4b0a      	ldr	r3, [pc, #40]	@ (800b53c <prvInitialiseTaskLists+0x7c>)
 800b512:	4a05      	ldr	r2, [pc, #20]	@ (800b528 <prvInitialiseTaskLists+0x68>)
 800b514:	601a      	str	r2, [r3, #0]
}
 800b516:	bf00      	nop
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20000a2c 	.word	0x20000a2c
 800b524:	20000e8c 	.word	0x20000e8c
 800b528:	20000ea0 	.word	0x20000ea0
 800b52c:	20000ebc 	.word	0x20000ebc
 800b530:	20000ed0 	.word	0x20000ed0
 800b534:	20000ee8 	.word	0x20000ee8
 800b538:	20000eb4 	.word	0x20000eb4
 800b53c:	20000eb8 	.word	0x20000eb8

0800b540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b546:	e019      	b.n	800b57c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b548:	f000 fdee 	bl	800c128 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b54c:	4b10      	ldr	r3, [pc, #64]	@ (800b590 <prvCheckTasksWaitingTermination+0x50>)
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3304      	adds	r3, #4
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe fc3b 	bl	8009dd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b55e:	4b0d      	ldr	r3, [pc, #52]	@ (800b594 <prvCheckTasksWaitingTermination+0x54>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3b01      	subs	r3, #1
 800b564:	4a0b      	ldr	r2, [pc, #44]	@ (800b594 <prvCheckTasksWaitingTermination+0x54>)
 800b566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b568:	4b0b      	ldr	r3, [pc, #44]	@ (800b598 <prvCheckTasksWaitingTermination+0x58>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	4a0a      	ldr	r2, [pc, #40]	@ (800b598 <prvCheckTasksWaitingTermination+0x58>)
 800b570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b572:	f000 fe0b 	bl	800c18c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f810 	bl	800b59c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b57c:	4b06      	ldr	r3, [pc, #24]	@ (800b598 <prvCheckTasksWaitingTermination+0x58>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1e1      	bne.n	800b548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	20000ed0 	.word	0x20000ed0
 800b594:	20000efc 	.word	0x20000efc
 800b598:	20000ee4 	.word	0x20000ee4

0800b59c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3354      	adds	r3, #84	@ 0x54
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f001 fd03 	bl	800cfb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d108      	bne.n	800b5ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 ffa3 	bl	800c508 <vPortFree>
				vPortFree( pxTCB );
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 ffa0 	bl	800c508 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5c8:	e019      	b.n	800b5fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d103      	bne.n	800b5dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 ff97 	bl	800c508 <vPortFree>
	}
 800b5da:	e010      	b.n	800b5fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d00b      	beq.n	800b5fe <prvDeleteTCB+0x62>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	60fb      	str	r3, [r7, #12]
}
 800b5f8:	bf00      	nop
 800b5fa:	bf00      	nop
 800b5fc:	e7fd      	b.n	800b5fa <prvDeleteTCB+0x5e>
	}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b60e:	4b0c      	ldr	r3, [pc, #48]	@ (800b640 <prvResetNextTaskUnblockTime+0x38>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d104      	bne.n	800b622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b618:	4b0a      	ldr	r3, [pc, #40]	@ (800b644 <prvResetNextTaskUnblockTime+0x3c>)
 800b61a:	f04f 32ff 	mov.w	r2, #4294967295
 800b61e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b620:	e008      	b.n	800b634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b622:	4b07      	ldr	r3, [pc, #28]	@ (800b640 <prvResetNextTaskUnblockTime+0x38>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	4a04      	ldr	r2, [pc, #16]	@ (800b644 <prvResetNextTaskUnblockTime+0x3c>)
 800b632:	6013      	str	r3, [r2, #0]
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	20000eb4 	.word	0x20000eb4
 800b644:	20000f1c 	.word	0x20000f1c

0800b648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b64e:	4b0b      	ldr	r3, [pc, #44]	@ (800b67c <xTaskGetSchedulerState+0x34>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d102      	bne.n	800b65c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b656:	2301      	movs	r3, #1
 800b658:	607b      	str	r3, [r7, #4]
 800b65a:	e008      	b.n	800b66e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b65c:	4b08      	ldr	r3, [pc, #32]	@ (800b680 <xTaskGetSchedulerState+0x38>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d102      	bne.n	800b66a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b664:	2302      	movs	r3, #2
 800b666:	607b      	str	r3, [r7, #4]
 800b668:	e001      	b.n	800b66e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b66a:	2300      	movs	r3, #0
 800b66c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b66e:	687b      	ldr	r3, [r7, #4]
	}
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	20000f08 	.word	0x20000f08
 800b680:	20000f24 	.word	0x20000f24

0800b684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b690:	2300      	movs	r3, #0
 800b692:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d058      	beq.n	800b74c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b69a:	4b2f      	ldr	r3, [pc, #188]	@ (800b758 <xTaskPriorityDisinherit+0xd4>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d00b      	beq.n	800b6bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	60fb      	str	r3, [r7, #12]
}
 800b6b6:	bf00      	nop
 800b6b8:	bf00      	nop
 800b6ba:	e7fd      	b.n	800b6b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10b      	bne.n	800b6dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	60bb      	str	r3, [r7, #8]
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	e7fd      	b.n	800b6d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6e0:	1e5a      	subs	r2, r3, #1
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d02c      	beq.n	800b74c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d128      	bne.n	800b74c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe fb68 	bl	8009dd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b710:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71c:	4b0f      	ldr	r3, [pc, #60]	@ (800b75c <xTaskPriorityDisinherit+0xd8>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	429a      	cmp	r2, r3
 800b722:	d903      	bls.n	800b72c <xTaskPriorityDisinherit+0xa8>
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b728:	4a0c      	ldr	r2, [pc, #48]	@ (800b75c <xTaskPriorityDisinherit+0xd8>)
 800b72a:	6013      	str	r3, [r2, #0]
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b730:	4613      	mov	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4a09      	ldr	r2, [pc, #36]	@ (800b760 <xTaskPriorityDisinherit+0xdc>)
 800b73a:	441a      	add	r2, r3
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	3304      	adds	r3, #4
 800b740:	4619      	mov	r1, r3
 800b742:	4610      	mov	r0, r2
 800b744:	f7fe fae9 	bl	8009d1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b748:	2301      	movs	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b74c:	697b      	ldr	r3, [r7, #20]
	}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20000a28 	.word	0x20000a28
 800b75c:	20000f04 	.word	0x20000f04
 800b760:	20000a2c 	.word	0x20000a2c

0800b764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b76e:	4b21      	ldr	r3, [pc, #132]	@ (800b7f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b774:	4b20      	ldr	r3, [pc, #128]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3304      	adds	r3, #4
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fe fb2a 	bl	8009dd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b786:	d10a      	bne.n	800b79e <prvAddCurrentTaskToDelayedList+0x3a>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d007      	beq.n	800b79e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b78e:	4b1a      	ldr	r3, [pc, #104]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3304      	adds	r3, #4
 800b794:	4619      	mov	r1, r3
 800b796:	4819      	ldr	r0, [pc, #100]	@ (800b7fc <prvAddCurrentTaskToDelayedList+0x98>)
 800b798:	f7fe fabf 	bl	8009d1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b79c:	e026      	b.n	800b7ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7a6:	4b14      	ldr	r3, [pc, #80]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d209      	bcs.n	800b7ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7b6:	4b12      	ldr	r3, [pc, #72]	@ (800b800 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	f7fe facd 	bl	8009d62 <vListInsert>
}
 800b7c8:	e010      	b.n	800b7ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b804 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f7fe fac3 	bl	8009d62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b808 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d202      	bcs.n	800b7ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b7e6:	4a08      	ldr	r2, [pc, #32]	@ (800b808 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	6013      	str	r3, [r2, #0]
}
 800b7ec:	bf00      	nop
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	20000f00 	.word	0x20000f00
 800b7f8:	20000a28 	.word	0x20000a28
 800b7fc:	20000ee8 	.word	0x20000ee8
 800b800:	20000eb8 	.word	0x20000eb8
 800b804:	20000eb4 	.word	0x20000eb4
 800b808:	20000f1c 	.word	0x20000f1c

0800b80c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08a      	sub	sp, #40	@ 0x28
 800b810:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b812:	2300      	movs	r3, #0
 800b814:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b816:	f000 fb13 	bl	800be40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b81a:	4b1d      	ldr	r3, [pc, #116]	@ (800b890 <xTimerCreateTimerTask+0x84>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d021      	beq.n	800b866 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b826:	2300      	movs	r3, #0
 800b828:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b82a:	1d3a      	adds	r2, r7, #4
 800b82c:	f107 0108 	add.w	r1, r7, #8
 800b830:	f107 030c 	add.w	r3, r7, #12
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe fa29 	bl	8009c8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b83a:	6879      	ldr	r1, [r7, #4]
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	9202      	str	r2, [sp, #8]
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	2302      	movs	r3, #2
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	2300      	movs	r3, #0
 800b84a:	460a      	mov	r2, r1
 800b84c:	4911      	ldr	r1, [pc, #68]	@ (800b894 <xTimerCreateTimerTask+0x88>)
 800b84e:	4812      	ldr	r0, [pc, #72]	@ (800b898 <xTimerCreateTimerTask+0x8c>)
 800b850:	f7ff f8a2 	bl	800a998 <xTaskCreateStatic>
 800b854:	4603      	mov	r3, r0
 800b856:	4a11      	ldr	r2, [pc, #68]	@ (800b89c <xTimerCreateTimerTask+0x90>)
 800b858:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b85a:	4b10      	ldr	r3, [pc, #64]	@ (800b89c <xTimerCreateTimerTask+0x90>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b862:	2301      	movs	r3, #1
 800b864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10b      	bne.n	800b884 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	613b      	str	r3, [r7, #16]
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	e7fd      	b.n	800b880 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b884:	697b      	ldr	r3, [r7, #20]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	20000f58 	.word	0x20000f58
 800b894:	0800d93c 	.word	0x0800d93c
 800b898:	0800b9d9 	.word	0x0800b9d9
 800b89c:	20000f5c 	.word	0x20000f5c

0800b8a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08a      	sub	sp, #40	@ 0x28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10b      	bne.n	800b8d0 <xTimerGenericCommand+0x30>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	623b      	str	r3, [r7, #32]
}
 800b8ca:	bf00      	nop
 800b8cc:	bf00      	nop
 800b8ce:	e7fd      	b.n	800b8cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b8d0:	4b19      	ldr	r3, [pc, #100]	@ (800b938 <xTimerGenericCommand+0x98>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d02a      	beq.n	800b92e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b05      	cmp	r3, #5
 800b8e8:	dc18      	bgt.n	800b91c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b8ea:	f7ff fead 	bl	800b648 <xTaskGetSchedulerState>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d109      	bne.n	800b908 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b8f4:	4b10      	ldr	r3, [pc, #64]	@ (800b938 <xTimerGenericCommand+0x98>)
 800b8f6:	6818      	ldr	r0, [r3, #0]
 800b8f8:	f107 0110 	add.w	r1, r7, #16
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b900:	f7fe fbd8 	bl	800a0b4 <xQueueGenericSend>
 800b904:	6278      	str	r0, [r7, #36]	@ 0x24
 800b906:	e012      	b.n	800b92e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b908:	4b0b      	ldr	r3, [pc, #44]	@ (800b938 <xTimerGenericCommand+0x98>)
 800b90a:	6818      	ldr	r0, [r3, #0]
 800b90c:	f107 0110 	add.w	r1, r7, #16
 800b910:	2300      	movs	r3, #0
 800b912:	2200      	movs	r2, #0
 800b914:	f7fe fbce 	bl	800a0b4 <xQueueGenericSend>
 800b918:	6278      	str	r0, [r7, #36]	@ 0x24
 800b91a:	e008      	b.n	800b92e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b91c:	4b06      	ldr	r3, [pc, #24]	@ (800b938 <xTimerGenericCommand+0x98>)
 800b91e:	6818      	ldr	r0, [r3, #0]
 800b920:	f107 0110 	add.w	r1, r7, #16
 800b924:	2300      	movs	r3, #0
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	f7fe fcc6 	bl	800a2b8 <xQueueGenericSendFromISR>
 800b92c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b930:	4618      	mov	r0, r3
 800b932:	3728      	adds	r7, #40	@ 0x28
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20000f58 	.word	0x20000f58

0800b93c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b088      	sub	sp, #32
 800b940:	af02      	add	r7, sp, #8
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b946:	4b23      	ldr	r3, [pc, #140]	@ (800b9d4 <prvProcessExpiredTimer+0x98>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	3304      	adds	r3, #4
 800b954:	4618      	mov	r0, r3
 800b956:	f7fe fa3d 	bl	8009dd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b00      	cmp	r3, #0
 800b966:	d023      	beq.n	800b9b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	699a      	ldr	r2, [r3, #24]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	18d1      	adds	r1, r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	6978      	ldr	r0, [r7, #20]
 800b976:	f000 f8d5 	bl	800bb24 <prvInsertTimerInActiveList>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d020      	beq.n	800b9c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b980:	2300      	movs	r3, #0
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	2300      	movs	r3, #0
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	2100      	movs	r1, #0
 800b98a:	6978      	ldr	r0, [r7, #20]
 800b98c:	f7ff ff88 	bl	800b8a0 <xTimerGenericCommand>
 800b990:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d114      	bne.n	800b9c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	60fb      	str	r3, [r7, #12]
}
 800b9aa:	bf00      	nop
 800b9ac:	bf00      	nop
 800b9ae:	e7fd      	b.n	800b9ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9b6:	f023 0301 	bic.w	r3, r3, #1
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	6978      	ldr	r0, [r7, #20]
 800b9c8:	4798      	blx	r3
}
 800b9ca:	bf00      	nop
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20000f50 	.word	0x20000f50

0800b9d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9e0:	f107 0308 	add.w	r3, r7, #8
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 f859 	bl	800ba9c <prvGetNextExpireTime>
 800b9ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 f805 	bl	800ba00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b9f6:	f000 f8d7 	bl	800bba8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9fa:	bf00      	nop
 800b9fc:	e7f0      	b.n	800b9e0 <prvTimerTask+0x8>
	...

0800ba00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba0a:	f7ff fa29 	bl	800ae60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba0e:	f107 0308 	add.w	r3, r7, #8
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 f866 	bl	800bae4 <prvSampleTimeNow>
 800ba18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d130      	bne.n	800ba82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10a      	bne.n	800ba3c <prvProcessTimerOrBlockTask+0x3c>
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d806      	bhi.n	800ba3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba2e:	f7ff fa25 	bl	800ae7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba32:	68f9      	ldr	r1, [r7, #12]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7ff ff81 	bl	800b93c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba3a:	e024      	b.n	800ba86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d008      	beq.n	800ba54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba42:	4b13      	ldr	r3, [pc, #76]	@ (800ba90 <prvProcessTimerOrBlockTask+0x90>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <prvProcessTimerOrBlockTask+0x50>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e000      	b.n	800ba52 <prvProcessTimerOrBlockTask+0x52>
 800ba50:	2300      	movs	r3, #0
 800ba52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba54:	4b0f      	ldr	r3, [pc, #60]	@ (800ba94 <prvProcessTimerOrBlockTask+0x94>)
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	4619      	mov	r1, r3
 800ba62:	f7fe ff65 	bl	800a930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba66:	f7ff fa09 	bl	800ae7c <xTaskResumeAll>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10a      	bne.n	800ba86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba70:	4b09      	ldr	r3, [pc, #36]	@ (800ba98 <prvProcessTimerOrBlockTask+0x98>)
 800ba72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	f3bf 8f6f 	isb	sy
}
 800ba80:	e001      	b.n	800ba86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba82:	f7ff f9fb 	bl	800ae7c <xTaskResumeAll>
}
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	20000f54 	.word	0x20000f54
 800ba94:	20000f58 	.word	0x20000f58
 800ba98:	e000ed04 	.word	0xe000ed04

0800ba9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800baa4:	4b0e      	ldr	r3, [pc, #56]	@ (800bae0 <prvGetNextExpireTime+0x44>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <prvGetNextExpireTime+0x16>
 800baae:	2201      	movs	r2, #1
 800bab0:	e000      	b.n	800bab4 <prvGetNextExpireTime+0x18>
 800bab2:	2200      	movs	r2, #0
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d105      	bne.n	800bacc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bac0:	4b07      	ldr	r3, [pc, #28]	@ (800bae0 <prvGetNextExpireTime+0x44>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	e001      	b.n	800bad0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bacc:	2300      	movs	r3, #0
 800bace:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bad0:	68fb      	ldr	r3, [r7, #12]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	20000f50 	.word	0x20000f50

0800bae4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800baec:	f7ff fa64 	bl	800afb8 <xTaskGetTickCount>
 800baf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800baf2:	4b0b      	ldr	r3, [pc, #44]	@ (800bb20 <prvSampleTimeNow+0x3c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d205      	bcs.n	800bb08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bafc:	f000 f93a 	bl	800bd74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	e002      	b.n	800bb0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb0e:	4a04      	ldr	r2, [pc, #16]	@ (800bb20 <prvSampleTimeNow+0x3c>)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb14:	68fb      	ldr	r3, [r7, #12]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000f60 	.word	0x20000f60

0800bb24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d812      	bhi.n	800bb70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	1ad2      	subs	r2, r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d302      	bcc.n	800bb5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	e01b      	b.n	800bb96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb5e:	4b10      	ldr	r3, [pc, #64]	@ (800bba0 <prvInsertTimerInActiveList+0x7c>)
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3304      	adds	r3, #4
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f7fe f8fa 	bl	8009d62 <vListInsert>
 800bb6e:	e012      	b.n	800bb96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d206      	bcs.n	800bb86 <prvInsertTimerInActiveList+0x62>
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d302      	bcc.n	800bb86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb80:	2301      	movs	r3, #1
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	e007      	b.n	800bb96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb86:	4b07      	ldr	r3, [pc, #28]	@ (800bba4 <prvInsertTimerInActiveList+0x80>)
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4610      	mov	r0, r2
 800bb92:	f7fe f8e6 	bl	8009d62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb96:	697b      	ldr	r3, [r7, #20]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20000f54 	.word	0x20000f54
 800bba4:	20000f50 	.word	0x20000f50

0800bba8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08e      	sub	sp, #56	@ 0x38
 800bbac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbae:	e0ce      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	da19      	bge.n	800bbea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbb6:	1d3b      	adds	r3, r7, #4
 800bbb8:	3304      	adds	r3, #4
 800bbba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10b      	bne.n	800bbda <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	61fb      	str	r3, [r7, #28]
}
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop
 800bbd8:	e7fd      	b.n	800bbd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbe0:	6850      	ldr	r0, [r2, #4]
 800bbe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbe4:	6892      	ldr	r2, [r2, #8]
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f2c0 80ae 	blt.w	800bd4e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf8:	695b      	ldr	r3, [r3, #20]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d004      	beq.n	800bc08 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc00:	3304      	adds	r3, #4
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fe f8e6 	bl	8009dd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc08:	463b      	mov	r3, r7
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7ff ff6a 	bl	800bae4 <prvSampleTimeNow>
 800bc10:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b09      	cmp	r3, #9
 800bc16:	f200 8097 	bhi.w	800bd48 <prvProcessReceivedCommands+0x1a0>
 800bc1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc20 <prvProcessReceivedCommands+0x78>)
 800bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc20:	0800bc49 	.word	0x0800bc49
 800bc24:	0800bc49 	.word	0x0800bc49
 800bc28:	0800bc49 	.word	0x0800bc49
 800bc2c:	0800bcbf 	.word	0x0800bcbf
 800bc30:	0800bcd3 	.word	0x0800bcd3
 800bc34:	0800bd1f 	.word	0x0800bd1f
 800bc38:	0800bc49 	.word	0x0800bc49
 800bc3c:	0800bc49 	.word	0x0800bc49
 800bc40:	0800bcbf 	.word	0x0800bcbf
 800bc44:	0800bcd3 	.word	0x0800bcd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc4e:	f043 0301 	orr.w	r3, r3, #1
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	18d1      	adds	r1, r2, r3
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc68:	f7ff ff5c 	bl	800bb24 <prvInsertTimerInActiveList>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d06c      	beq.n	800bd4c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d061      	beq.n	800bd4c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	441a      	add	r2, r3
 800bc90:	2300      	movs	r3, #0
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	2300      	movs	r3, #0
 800bc96:	2100      	movs	r1, #0
 800bc98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc9a:	f7ff fe01 	bl	800b8a0 <xTimerGenericCommand>
 800bc9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bca0:	6a3b      	ldr	r3, [r7, #32]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d152      	bne.n	800bd4c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	61bb      	str	r3, [r7, #24]
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	e7fd      	b.n	800bcba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcc4:	f023 0301 	bic.w	r3, r3, #1
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bcd0:	e03d      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcd8:	f043 0301 	orr.w	r3, r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10b      	bne.n	800bd0a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	617b      	str	r3, [r7, #20]
}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop
 800bd08:	e7fd      	b.n	800bd06 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0c:	699a      	ldr	r2, [r3, #24]
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd10:	18d1      	adds	r1, r2, r3
 800bd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd18:	f7ff ff04 	bl	800bb24 <prvInsertTimerInActiveList>
					break;
 800bd1c:	e017      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd24:	f003 0302 	and.w	r3, r3, #2
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d103      	bne.n	800bd34 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bd2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd2e:	f000 fbeb 	bl	800c508 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd32:	e00c      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd3a:	f023 0301 	bic.w	r3, r3, #1
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bd46:	e002      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bd48:	bf00      	nop
 800bd4a:	e000      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>
					break;
 800bd4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd4e:	4b08      	ldr	r3, [pc, #32]	@ (800bd70 <prvProcessReceivedCommands+0x1c8>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	1d39      	adds	r1, r7, #4
 800bd54:	2200      	movs	r2, #0
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fb4c 	bl	800a3f4 <xQueueReceive>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f47f af26 	bne.w	800bbb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop
 800bd68:	3730      	adds	r7, #48	@ 0x30
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20000f58 	.word	0x20000f58

0800bd74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd7a:	e049      	b.n	800be10 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd7c:	4b2e      	ldr	r3, [pc, #184]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd86:	4b2c      	ldr	r3, [pc, #176]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	3304      	adds	r3, #4
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fe f81d 	bl	8009dd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d02f      	beq.n	800be10 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	699b      	ldr	r3, [r3, #24]
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d90e      	bls.n	800bde0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdce:	4b1a      	ldr	r3, [pc, #104]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4610      	mov	r0, r2
 800bdda:	f7fd ffc2 	bl	8009d62 <vListInsert>
 800bdde:	e017      	b.n	800be10 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bde0:	2300      	movs	r3, #0
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	2300      	movs	r3, #0
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	2100      	movs	r1, #0
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f7ff fd58 	bl	800b8a0 <xTimerGenericCommand>
 800bdf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10b      	bne.n	800be10 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	603b      	str	r3, [r7, #0]
}
 800be0a:	bf00      	nop
 800be0c:	bf00      	nop
 800be0e:	e7fd      	b.n	800be0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be10:	4b09      	ldr	r3, [pc, #36]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1b0      	bne.n	800bd7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be1a:	4b07      	ldr	r3, [pc, #28]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be20:	4b06      	ldr	r3, [pc, #24]	@ (800be3c <prvSwitchTimerLists+0xc8>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a04      	ldr	r2, [pc, #16]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800be26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be28:	4a04      	ldr	r2, [pc, #16]	@ (800be3c <prvSwitchTimerLists+0xc8>)
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	6013      	str	r3, [r2, #0]
}
 800be2e:	bf00      	nop
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20000f50 	.word	0x20000f50
 800be3c:	20000f54 	.word	0x20000f54

0800be40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be46:	f000 f96f 	bl	800c128 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be4a:	4b15      	ldr	r3, [pc, #84]	@ (800bea0 <prvCheckForValidListAndQueue+0x60>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d120      	bne.n	800be94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be52:	4814      	ldr	r0, [pc, #80]	@ (800bea4 <prvCheckForValidListAndQueue+0x64>)
 800be54:	f7fd ff34 	bl	8009cc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be58:	4813      	ldr	r0, [pc, #76]	@ (800bea8 <prvCheckForValidListAndQueue+0x68>)
 800be5a:	f7fd ff31 	bl	8009cc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be5e:	4b13      	ldr	r3, [pc, #76]	@ (800beac <prvCheckForValidListAndQueue+0x6c>)
 800be60:	4a10      	ldr	r2, [pc, #64]	@ (800bea4 <prvCheckForValidListAndQueue+0x64>)
 800be62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be64:	4b12      	ldr	r3, [pc, #72]	@ (800beb0 <prvCheckForValidListAndQueue+0x70>)
 800be66:	4a10      	ldr	r2, [pc, #64]	@ (800bea8 <prvCheckForValidListAndQueue+0x68>)
 800be68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be6a:	2300      	movs	r3, #0
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	4b11      	ldr	r3, [pc, #68]	@ (800beb4 <prvCheckForValidListAndQueue+0x74>)
 800be70:	4a11      	ldr	r2, [pc, #68]	@ (800beb8 <prvCheckForValidListAndQueue+0x78>)
 800be72:	2110      	movs	r1, #16
 800be74:	200a      	movs	r0, #10
 800be76:	f7fe f841 	bl	8009efc <xQueueGenericCreateStatic>
 800be7a:	4603      	mov	r3, r0
 800be7c:	4a08      	ldr	r2, [pc, #32]	@ (800bea0 <prvCheckForValidListAndQueue+0x60>)
 800be7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be80:	4b07      	ldr	r3, [pc, #28]	@ (800bea0 <prvCheckForValidListAndQueue+0x60>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d005      	beq.n	800be94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be88:	4b05      	ldr	r3, [pc, #20]	@ (800bea0 <prvCheckForValidListAndQueue+0x60>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	490b      	ldr	r1, [pc, #44]	@ (800bebc <prvCheckForValidListAndQueue+0x7c>)
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fe fd24 	bl	800a8dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be94:	f000 f97a 	bl	800c18c <vPortExitCritical>
}
 800be98:	bf00      	nop
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20000f58 	.word	0x20000f58
 800bea4:	20000f28 	.word	0x20000f28
 800bea8:	20000f3c 	.word	0x20000f3c
 800beac:	20000f50 	.word	0x20000f50
 800beb0:	20000f54 	.word	0x20000f54
 800beb4:	20001004 	.word	0x20001004
 800beb8:	20000f64 	.word	0x20000f64
 800bebc:	0800d944 	.word	0x0800d944

0800bec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	3b04      	subs	r3, #4
 800bed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	3b04      	subs	r3, #4
 800bede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	f023 0201 	bic.w	r2, r3, #1
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3b04      	subs	r3, #4
 800beee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bef0:	4a0c      	ldr	r2, [pc, #48]	@ (800bf24 <pxPortInitialiseStack+0x64>)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	3b14      	subs	r3, #20
 800befa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	3b04      	subs	r3, #4
 800bf06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f06f 0202 	mvn.w	r2, #2
 800bf0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3b20      	subs	r3, #32
 800bf14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf16:	68fb      	ldr	r3, [r7, #12]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	0800bf29 	.word	0x0800bf29

0800bf28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf32:	4b13      	ldr	r3, [pc, #76]	@ (800bf80 <prvTaskExitError+0x58>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3a:	d00b      	beq.n	800bf54 <prvTaskExitError+0x2c>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	60fb      	str	r3, [r7, #12]
}
 800bf4e:	bf00      	nop
 800bf50:	bf00      	nop
 800bf52:	e7fd      	b.n	800bf50 <prvTaskExitError+0x28>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	60bb      	str	r3, [r7, #8]
}
 800bf66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf68:	bf00      	nop
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d0fc      	beq.n	800bf6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf70:	bf00      	nop
 800bf72:	bf00      	nop
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	2000002c 	.word	0x2000002c
	...

0800bf90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf90:	4b07      	ldr	r3, [pc, #28]	@ (800bfb0 <pxCurrentTCBConst2>)
 800bf92:	6819      	ldr	r1, [r3, #0]
 800bf94:	6808      	ldr	r0, [r1, #0]
 800bf96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9a:	f380 8809 	msr	PSP, r0
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f04f 0000 	mov.w	r0, #0
 800bfa6:	f380 8811 	msr	BASEPRI, r0
 800bfaa:	4770      	bx	lr
 800bfac:	f3af 8000 	nop.w

0800bfb0 <pxCurrentTCBConst2>:
 800bfb0:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop

0800bfb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfb8:	4808      	ldr	r0, [pc, #32]	@ (800bfdc <prvPortStartFirstTask+0x24>)
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	6800      	ldr	r0, [r0, #0]
 800bfbe:	f380 8808 	msr	MSP, r0
 800bfc2:	f04f 0000 	mov.w	r0, #0
 800bfc6:	f380 8814 	msr	CONTROL, r0
 800bfca:	b662      	cpsie	i
 800bfcc:	b661      	cpsie	f
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	df00      	svc	0
 800bfd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bfda:	bf00      	nop
 800bfdc:	e000ed08 	.word	0xe000ed08

0800bfe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bfe6:	4b47      	ldr	r3, [pc, #284]	@ (800c104 <xPortStartScheduler+0x124>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a47      	ldr	r2, [pc, #284]	@ (800c108 <xPortStartScheduler+0x128>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d10b      	bne.n	800c008 <xPortStartScheduler+0x28>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	613b      	str	r3, [r7, #16]
}
 800c002:	bf00      	nop
 800c004:	bf00      	nop
 800c006:	e7fd      	b.n	800c004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c008:	4b3e      	ldr	r3, [pc, #248]	@ (800c104 <xPortStartScheduler+0x124>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a3f      	ldr	r2, [pc, #252]	@ (800c10c <xPortStartScheduler+0x12c>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d10b      	bne.n	800c02a <xPortStartScheduler+0x4a>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60fb      	str	r3, [r7, #12]
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop
 800c028:	e7fd      	b.n	800c026 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c02a:	4b39      	ldr	r3, [pc, #228]	@ (800c110 <xPortStartScheduler+0x130>)
 800c02c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	b2db      	uxtb	r3, r3
 800c034:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	22ff      	movs	r2, #255	@ 0xff
 800c03a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	b2db      	uxtb	r3, r3
 800c042:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c044:	78fb      	ldrb	r3, [r7, #3]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	4b31      	ldr	r3, [pc, #196]	@ (800c114 <xPortStartScheduler+0x134>)
 800c050:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c052:	4b31      	ldr	r3, [pc, #196]	@ (800c118 <xPortStartScheduler+0x138>)
 800c054:	2207      	movs	r2, #7
 800c056:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c058:	e009      	b.n	800c06e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c05a:	4b2f      	ldr	r3, [pc, #188]	@ (800c118 <xPortStartScheduler+0x138>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3b01      	subs	r3, #1
 800c060:	4a2d      	ldr	r2, [pc, #180]	@ (800c118 <xPortStartScheduler+0x138>)
 800c062:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c06e:	78fb      	ldrb	r3, [r7, #3]
 800c070:	b2db      	uxtb	r3, r3
 800c072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c076:	2b80      	cmp	r3, #128	@ 0x80
 800c078:	d0ef      	beq.n	800c05a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c07a:	4b27      	ldr	r3, [pc, #156]	@ (800c118 <xPortStartScheduler+0x138>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f1c3 0307 	rsb	r3, r3, #7
 800c082:	2b04      	cmp	r3, #4
 800c084:	d00b      	beq.n	800c09e <xPortStartScheduler+0xbe>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	60bb      	str	r3, [r7, #8]
}
 800c098:	bf00      	nop
 800c09a:	bf00      	nop
 800c09c:	e7fd      	b.n	800c09a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c09e:	4b1e      	ldr	r3, [pc, #120]	@ (800c118 <xPortStartScheduler+0x138>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	021b      	lsls	r3, r3, #8
 800c0a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c118 <xPortStartScheduler+0x138>)
 800c0a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c118 <xPortStartScheduler+0x138>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0b0:	4a19      	ldr	r2, [pc, #100]	@ (800c118 <xPortStartScheduler+0x138>)
 800c0b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0bc:	4b17      	ldr	r3, [pc, #92]	@ (800c11c <xPortStartScheduler+0x13c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a16      	ldr	r2, [pc, #88]	@ (800c11c <xPortStartScheduler+0x13c>)
 800c0c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c0c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0c8:	4b14      	ldr	r3, [pc, #80]	@ (800c11c <xPortStartScheduler+0x13c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a13      	ldr	r2, [pc, #76]	@ (800c11c <xPortStartScheduler+0x13c>)
 800c0ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c0d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0d4:	f000 f8da 	bl	800c28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0d8:	4b11      	ldr	r3, [pc, #68]	@ (800c120 <xPortStartScheduler+0x140>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0de:	f000 f8f9 	bl	800c2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0e2:	4b10      	ldr	r3, [pc, #64]	@ (800c124 <xPortStartScheduler+0x144>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a0f      	ldr	r2, [pc, #60]	@ (800c124 <xPortStartScheduler+0x144>)
 800c0e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c0ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0ee:	f7ff ff63 	bl	800bfb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0f2:	f7ff f82b 	bl	800b14c <vTaskSwitchContext>
	prvTaskExitError();
 800c0f6:	f7ff ff17 	bl	800bf28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	e000ed00 	.word	0xe000ed00
 800c108:	410fc271 	.word	0x410fc271
 800c10c:	410fc270 	.word	0x410fc270
 800c110:	e000e400 	.word	0xe000e400
 800c114:	20001054 	.word	0x20001054
 800c118:	20001058 	.word	0x20001058
 800c11c:	e000ed20 	.word	0xe000ed20
 800c120:	2000002c 	.word	0x2000002c
 800c124:	e000ef34 	.word	0xe000ef34

0800c128 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	607b      	str	r3, [r7, #4]
}
 800c140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c142:	4b10      	ldr	r3, [pc, #64]	@ (800c184 <vPortEnterCritical+0x5c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	3301      	adds	r3, #1
 800c148:	4a0e      	ldr	r2, [pc, #56]	@ (800c184 <vPortEnterCritical+0x5c>)
 800c14a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c14c:	4b0d      	ldr	r3, [pc, #52]	@ (800c184 <vPortEnterCritical+0x5c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d110      	bne.n	800c176 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c154:	4b0c      	ldr	r3, [pc, #48]	@ (800c188 <vPortEnterCritical+0x60>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00b      	beq.n	800c176 <vPortEnterCritical+0x4e>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	603b      	str	r3, [r7, #0]
}
 800c170:	bf00      	nop
 800c172:	bf00      	nop
 800c174:	e7fd      	b.n	800c172 <vPortEnterCritical+0x4a>
	}
}
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	2000002c 	.word	0x2000002c
 800c188:	e000ed04 	.word	0xe000ed04

0800c18c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c192:	4b12      	ldr	r3, [pc, #72]	@ (800c1dc <vPortExitCritical+0x50>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10b      	bne.n	800c1b2 <vPortExitCritical+0x26>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	607b      	str	r3, [r7, #4]
}
 800c1ac:	bf00      	nop
 800c1ae:	bf00      	nop
 800c1b0:	e7fd      	b.n	800c1ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c1dc <vPortExitCritical+0x50>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	4a08      	ldr	r2, [pc, #32]	@ (800c1dc <vPortExitCritical+0x50>)
 800c1ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1bc:	4b07      	ldr	r3, [pc, #28]	@ (800c1dc <vPortExitCritical+0x50>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d105      	bne.n	800c1d0 <vPortExitCritical+0x44>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	f383 8811 	msr	BASEPRI, r3
}
 800c1ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	2000002c 	.word	0x2000002c

0800c1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1e0:	f3ef 8009 	mrs	r0, PSP
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	4b15      	ldr	r3, [pc, #84]	@ (800c240 <pxCurrentTCBConst>)
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	f01e 0f10 	tst.w	lr, #16
 800c1f0:	bf08      	it	eq
 800c1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fa:	6010      	str	r0, [r2, #0]
 800c1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c204:	f380 8811 	msr	BASEPRI, r0
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f7fe ff9c 	bl	800b14c <vTaskSwitchContext>
 800c214:	f04f 0000 	mov.w	r0, #0
 800c218:	f380 8811 	msr	BASEPRI, r0
 800c21c:	bc09      	pop	{r0, r3}
 800c21e:	6819      	ldr	r1, [r3, #0]
 800c220:	6808      	ldr	r0, [r1, #0]
 800c222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c226:	f01e 0f10 	tst.w	lr, #16
 800c22a:	bf08      	it	eq
 800c22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c230:	f380 8809 	msr	PSP, r0
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	f3af 8000 	nop.w

0800c240 <pxCurrentTCBConst>:
 800c240:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop

0800c248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	607b      	str	r3, [r7, #4]
}
 800c260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c262:	f7fe feb9 	bl	800afd8 <xTaskIncrementTick>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c26c:	4b06      	ldr	r3, [pc, #24]	@ (800c288 <xPortSysTickHandler+0x40>)
 800c26e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	2300      	movs	r3, #0
 800c276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	f383 8811 	msr	BASEPRI, r3
}
 800c27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c290:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c0 <vPortSetupTimerInterrupt+0x34>)
 800c292:	2200      	movs	r2, #0
 800c294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c296:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c4 <vPortSetupTimerInterrupt+0x38>)
 800c298:	2200      	movs	r2, #0
 800c29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c29c:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c8 <vPortSetupTimerInterrupt+0x3c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c2cc <vPortSetupTimerInterrupt+0x40>)
 800c2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a6:	099b      	lsrs	r3, r3, #6
 800c2a8:	4a09      	ldr	r2, [pc, #36]	@ (800c2d0 <vPortSetupTimerInterrupt+0x44>)
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ae:	4b04      	ldr	r3, [pc, #16]	@ (800c2c0 <vPortSetupTimerInterrupt+0x34>)
 800c2b0:	2207      	movs	r2, #7
 800c2b2:	601a      	str	r2, [r3, #0]
}
 800c2b4:	bf00      	nop
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	e000e010 	.word	0xe000e010
 800c2c4:	e000e018 	.word	0xe000e018
 800c2c8:	20000000 	.word	0x20000000
 800c2cc:	10624dd3 	.word	0x10624dd3
 800c2d0:	e000e014 	.word	0xe000e014

0800c2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c2e4 <vPortEnableVFP+0x10>
 800c2d8:	6801      	ldr	r1, [r0, #0]
 800c2da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c2de:	6001      	str	r1, [r0, #0]
 800c2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c2e2:	bf00      	nop
 800c2e4:	e000ed88 	.word	0xe000ed88

0800c2e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c2ee:	f3ef 8305 	mrs	r3, IPSR
 800c2f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b0f      	cmp	r3, #15
 800c2f8:	d915      	bls.n	800c326 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2fa:	4a18      	ldr	r2, [pc, #96]	@ (800c35c <vPortValidateInterruptPriority+0x74>)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	4413      	add	r3, r2
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c304:	4b16      	ldr	r3, [pc, #88]	@ (800c360 <vPortValidateInterruptPriority+0x78>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	7afa      	ldrb	r2, [r7, #11]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d20b      	bcs.n	800c326 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	607b      	str	r3, [r7, #4]
}
 800c320:	bf00      	nop
 800c322:	bf00      	nop
 800c324:	e7fd      	b.n	800c322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c326:	4b0f      	ldr	r3, [pc, #60]	@ (800c364 <vPortValidateInterruptPriority+0x7c>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c32e:	4b0e      	ldr	r3, [pc, #56]	@ (800c368 <vPortValidateInterruptPriority+0x80>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	429a      	cmp	r2, r3
 800c334:	d90b      	bls.n	800c34e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	603b      	str	r3, [r7, #0]
}
 800c348:	bf00      	nop
 800c34a:	bf00      	nop
 800c34c:	e7fd      	b.n	800c34a <vPortValidateInterruptPriority+0x62>
	}
 800c34e:	bf00      	nop
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	e000e3f0 	.word	0xe000e3f0
 800c360:	20001054 	.word	0x20001054
 800c364:	e000ed0c 	.word	0xe000ed0c
 800c368:	20001058 	.word	0x20001058

0800c36c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b08a      	sub	sp, #40	@ 0x28
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c374:	2300      	movs	r3, #0
 800c376:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c378:	f7fe fd72 	bl	800ae60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c37c:	4b5c      	ldr	r3, [pc, #368]	@ (800c4f0 <pvPortMalloc+0x184>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c384:	f000 f924 	bl	800c5d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c388:	4b5a      	ldr	r3, [pc, #360]	@ (800c4f4 <pvPortMalloc+0x188>)
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4013      	ands	r3, r2
 800c390:	2b00      	cmp	r3, #0
 800c392:	f040 8095 	bne.w	800c4c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d01e      	beq.n	800c3da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c39c:	2208      	movs	r2, #8
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f003 0307 	and.w	r3, r3, #7
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d015      	beq.n	800c3da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f023 0307 	bic.w	r3, r3, #7
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f003 0307 	and.w	r3, r3, #7
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00b      	beq.n	800c3da <pvPortMalloc+0x6e>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	617b      	str	r3, [r7, #20]
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop
 800c3d8:	e7fd      	b.n	800c3d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d06f      	beq.n	800c4c0 <pvPortMalloc+0x154>
 800c3e0:	4b45      	ldr	r3, [pc, #276]	@ (800c4f8 <pvPortMalloc+0x18c>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d86a      	bhi.n	800c4c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3ea:	4b44      	ldr	r3, [pc, #272]	@ (800c4fc <pvPortMalloc+0x190>)
 800c3ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3ee:	4b43      	ldr	r3, [pc, #268]	@ (800c4fc <pvPortMalloc+0x190>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3f4:	e004      	b.n	800c400 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	429a      	cmp	r2, r3
 800c408:	d903      	bls.n	800c412 <pvPortMalloc+0xa6>
 800c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1f1      	bne.n	800c3f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c412:	4b37      	ldr	r3, [pc, #220]	@ (800c4f0 <pvPortMalloc+0x184>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c418:	429a      	cmp	r2, r3
 800c41a:	d051      	beq.n	800c4c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c41c:	6a3b      	ldr	r3, [r7, #32]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2208      	movs	r2, #8
 800c422:	4413      	add	r3, r2
 800c424:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	6a3b      	ldr	r3, [r7, #32]
 800c42c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c430:	685a      	ldr	r2, [r3, #4]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	1ad2      	subs	r2, r2, r3
 800c436:	2308      	movs	r3, #8
 800c438:	005b      	lsls	r3, r3, #1
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d920      	bls.n	800c480 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4413      	add	r3, r2
 800c444:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	f003 0307 	and.w	r3, r3, #7
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00b      	beq.n	800c468 <pvPortMalloc+0xfc>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	613b      	str	r3, [r7, #16]
}
 800c462:	bf00      	nop
 800c464:	bf00      	nop
 800c466:	e7fd      	b.n	800c464 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	1ad2      	subs	r2, r2, r3
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c47a:	69b8      	ldr	r0, [r7, #24]
 800c47c:	f000 f90a 	bl	800c694 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c480:	4b1d      	ldr	r3, [pc, #116]	@ (800c4f8 <pvPortMalloc+0x18c>)
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	4a1b      	ldr	r2, [pc, #108]	@ (800c4f8 <pvPortMalloc+0x18c>)
 800c48c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c48e:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f8 <pvPortMalloc+0x18c>)
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	4b1b      	ldr	r3, [pc, #108]	@ (800c500 <pvPortMalloc+0x194>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d203      	bcs.n	800c4a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c49a:	4b17      	ldr	r3, [pc, #92]	@ (800c4f8 <pvPortMalloc+0x18c>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a18      	ldr	r2, [pc, #96]	@ (800c500 <pvPortMalloc+0x194>)
 800c4a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	4b13      	ldr	r3, [pc, #76]	@ (800c4f4 <pvPortMalloc+0x188>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	431a      	orrs	r2, r3
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4b6:	4b13      	ldr	r3, [pc, #76]	@ (800c504 <pvPortMalloc+0x198>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	4a11      	ldr	r2, [pc, #68]	@ (800c504 <pvPortMalloc+0x198>)
 800c4be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4c0:	f7fe fcdc 	bl	800ae7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	f003 0307 	and.w	r3, r3, #7
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00b      	beq.n	800c4e6 <pvPortMalloc+0x17a>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	60fb      	str	r3, [r7, #12]
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	e7fd      	b.n	800c4e2 <pvPortMalloc+0x176>
	return pvReturn;
 800c4e6:	69fb      	ldr	r3, [r7, #28]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3728      	adds	r7, #40	@ 0x28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	20004c64 	.word	0x20004c64
 800c4f4:	20004c78 	.word	0x20004c78
 800c4f8:	20004c68 	.word	0x20004c68
 800c4fc:	20004c5c 	.word	0x20004c5c
 800c500:	20004c6c 	.word	0x20004c6c
 800c504:	20004c70 	.word	0x20004c70

0800c508 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d04f      	beq.n	800c5ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c51a:	2308      	movs	r3, #8
 800c51c:	425b      	negs	r3, r3
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	4413      	add	r3, r2
 800c522:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	4b25      	ldr	r3, [pc, #148]	@ (800c5c4 <vPortFree+0xbc>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4013      	ands	r3, r2
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10b      	bne.n	800c54e <vPortFree+0x46>
	__asm volatile
 800c536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	60fb      	str	r3, [r7, #12]
}
 800c548:	bf00      	nop
 800c54a:	bf00      	nop
 800c54c:	e7fd      	b.n	800c54a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00b      	beq.n	800c56e <vPortFree+0x66>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	60bb      	str	r3, [r7, #8]
}
 800c568:	bf00      	nop
 800c56a:	bf00      	nop
 800c56c:	e7fd      	b.n	800c56a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	4b14      	ldr	r3, [pc, #80]	@ (800c5c4 <vPortFree+0xbc>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4013      	ands	r3, r2
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d01e      	beq.n	800c5ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d11a      	bne.n	800c5ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	4b0e      	ldr	r3, [pc, #56]	@ (800c5c4 <vPortFree+0xbc>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	43db      	mvns	r3, r3
 800c58e:	401a      	ands	r2, r3
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c594:	f7fe fc64 	bl	800ae60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5c8 <vPortFree+0xc0>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	4a09      	ldr	r2, [pc, #36]	@ (800c5c8 <vPortFree+0xc0>)
 800c5a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5a6:	6938      	ldr	r0, [r7, #16]
 800c5a8:	f000 f874 	bl	800c694 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5ac:	4b07      	ldr	r3, [pc, #28]	@ (800c5cc <vPortFree+0xc4>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	4a06      	ldr	r2, [pc, #24]	@ (800c5cc <vPortFree+0xc4>)
 800c5b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5b6:	f7fe fc61 	bl	800ae7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5ba:	bf00      	nop
 800c5bc:	3718      	adds	r7, #24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20004c78 	.word	0x20004c78
 800c5c8:	20004c68 	.word	0x20004c68
 800c5cc:	20004c74 	.word	0x20004c74

0800c5d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c5da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5dc:	4b27      	ldr	r3, [pc, #156]	@ (800c67c <prvHeapInit+0xac>)
 800c5de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f003 0307 	and.w	r3, r3, #7
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00c      	beq.n	800c604 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	3307      	adds	r3, #7
 800c5ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f023 0307 	bic.w	r3, r3, #7
 800c5f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5f8:	68ba      	ldr	r2, [r7, #8]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	4a1f      	ldr	r2, [pc, #124]	@ (800c67c <prvHeapInit+0xac>)
 800c600:	4413      	add	r3, r2
 800c602:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c608:	4a1d      	ldr	r2, [pc, #116]	@ (800c680 <prvHeapInit+0xb0>)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c60e:	4b1c      	ldr	r3, [pc, #112]	@ (800c680 <prvHeapInit+0xb0>)
 800c610:	2200      	movs	r2, #0
 800c612:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	4413      	add	r3, r2
 800c61a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c61c:	2208      	movs	r2, #8
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	1a9b      	subs	r3, r3, r2
 800c622:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f023 0307 	bic.w	r3, r3, #7
 800c62a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4a15      	ldr	r2, [pc, #84]	@ (800c684 <prvHeapInit+0xb4>)
 800c630:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c632:	4b14      	ldr	r3, [pc, #80]	@ (800c684 <prvHeapInit+0xb4>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2200      	movs	r2, #0
 800c638:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c63a:	4b12      	ldr	r3, [pc, #72]	@ (800c684 <prvHeapInit+0xb4>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	1ad2      	subs	r2, r2, r3
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c650:	4b0c      	ldr	r3, [pc, #48]	@ (800c684 <prvHeapInit+0xb4>)
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	4a0a      	ldr	r2, [pc, #40]	@ (800c688 <prvHeapInit+0xb8>)
 800c65e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	4a09      	ldr	r2, [pc, #36]	@ (800c68c <prvHeapInit+0xbc>)
 800c666:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c668:	4b09      	ldr	r3, [pc, #36]	@ (800c690 <prvHeapInit+0xc0>)
 800c66a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c66e:	601a      	str	r2, [r3, #0]
}
 800c670:	bf00      	nop
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	2000105c 	.word	0x2000105c
 800c680:	20004c5c 	.word	0x20004c5c
 800c684:	20004c64 	.word	0x20004c64
 800c688:	20004c6c 	.word	0x20004c6c
 800c68c:	20004c68 	.word	0x20004c68
 800c690:	20004c78 	.word	0x20004c78

0800c694 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c69c:	4b28      	ldr	r3, [pc, #160]	@ (800c740 <prvInsertBlockIntoFreeList+0xac>)
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	e002      	b.n	800c6a8 <prvInsertBlockIntoFreeList+0x14>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d8f7      	bhi.n	800c6a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	4413      	add	r3, r2
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d108      	bne.n	800c6d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	685a      	ldr	r2, [r3, #4]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	441a      	add	r2, r3
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	441a      	add	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d118      	bne.n	800c71c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	4b15      	ldr	r3, [pc, #84]	@ (800c744 <prvInsertBlockIntoFreeList+0xb0>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d00d      	beq.n	800c712 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685a      	ldr	r2, [r3, #4]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	441a      	add	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	601a      	str	r2, [r3, #0]
 800c710:	e008      	b.n	800c724 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c712:	4b0c      	ldr	r3, [pc, #48]	@ (800c744 <prvInsertBlockIntoFreeList+0xb0>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	601a      	str	r2, [r3, #0]
 800c71a:	e003      	b.n	800c724 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d002      	beq.n	800c732 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c732:	bf00      	nop
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	20004c5c 	.word	0x20004c5c
 800c744:	20004c64 	.word	0x20004c64

0800c748 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c74c:	2201      	movs	r2, #1
 800c74e:	490e      	ldr	r1, [pc, #56]	@ (800c788 <MX_USB_HOST_Init+0x40>)
 800c750:	480e      	ldr	r0, [pc, #56]	@ (800c78c <MX_USB_HOST_Init+0x44>)
 800c752:	f7fb f9a3 	bl	8007a9c <USBH_Init>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c75c:	f7f4 fbfe 	bl	8000f5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c760:	490b      	ldr	r1, [pc, #44]	@ (800c790 <MX_USB_HOST_Init+0x48>)
 800c762:	480a      	ldr	r0, [pc, #40]	@ (800c78c <MX_USB_HOST_Init+0x44>)
 800c764:	f7fb fa4a 	bl	8007bfc <USBH_RegisterClass>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c76e:	f7f4 fbf5 	bl	8000f5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c772:	4806      	ldr	r0, [pc, #24]	@ (800c78c <MX_USB_HOST_Init+0x44>)
 800c774:	f7fb face 	bl	8007d14 <USBH_Start>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c77e:	f7f4 fbed 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c782:	bf00      	nop
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	0800c795 	.word	0x0800c795
 800c78c:	20004c7c 	.word	0x20004c7c
 800c790:	2000000c 	.word	0x2000000c

0800c794 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c7a0:	78fb      	ldrb	r3, [r7, #3]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	2b04      	cmp	r3, #4
 800c7a6:	d819      	bhi.n	800c7dc <USBH_UserProcess+0x48>
 800c7a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b0 <USBH_UserProcess+0x1c>)
 800c7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ae:	bf00      	nop
 800c7b0:	0800c7dd 	.word	0x0800c7dd
 800c7b4:	0800c7cd 	.word	0x0800c7cd
 800c7b8:	0800c7dd 	.word	0x0800c7dd
 800c7bc:	0800c7d5 	.word	0x0800c7d5
 800c7c0:	0800c7c5 	.word	0x0800c7c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c7c4:	4b09      	ldr	r3, [pc, #36]	@ (800c7ec <USBH_UserProcess+0x58>)
 800c7c6:	2203      	movs	r2, #3
 800c7c8:	701a      	strb	r2, [r3, #0]
  break;
 800c7ca:	e008      	b.n	800c7de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c7cc:	4b07      	ldr	r3, [pc, #28]	@ (800c7ec <USBH_UserProcess+0x58>)
 800c7ce:	2202      	movs	r2, #2
 800c7d0:	701a      	strb	r2, [r3, #0]
  break;
 800c7d2:	e004      	b.n	800c7de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c7d4:	4b05      	ldr	r3, [pc, #20]	@ (800c7ec <USBH_UserProcess+0x58>)
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	701a      	strb	r2, [r3, #0]
  break;
 800c7da:	e000      	b.n	800c7de <USBH_UserProcess+0x4a>

  default:
  break;
 800c7dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	20005060 	.word	0x20005060

0800c7f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b08a      	sub	sp, #40	@ 0x28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7f8:	f107 0314 	add.w	r3, r7, #20
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	605a      	str	r2, [r3, #4]
 800c802:	609a      	str	r2, [r3, #8]
 800c804:	60da      	str	r2, [r3, #12]
 800c806:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c810:	d147      	bne.n	800c8a2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c812:	2300      	movs	r3, #0
 800c814:	613b      	str	r3, [r7, #16]
 800c816:	4b25      	ldr	r3, [pc, #148]	@ (800c8ac <HAL_HCD_MspInit+0xbc>)
 800c818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c81a:	4a24      	ldr	r2, [pc, #144]	@ (800c8ac <HAL_HCD_MspInit+0xbc>)
 800c81c:	f043 0301 	orr.w	r3, r3, #1
 800c820:	6313      	str	r3, [r2, #48]	@ 0x30
 800c822:	4b22      	ldr	r3, [pc, #136]	@ (800c8ac <HAL_HCD_MspInit+0xbc>)
 800c824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	613b      	str	r3, [r7, #16]
 800c82c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c82e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c834:	2300      	movs	r3, #0
 800c836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c838:	2300      	movs	r3, #0
 800c83a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c83c:	f107 0314 	add.w	r3, r7, #20
 800c840:	4619      	mov	r1, r3
 800c842:	481b      	ldr	r0, [pc, #108]	@ (800c8b0 <HAL_HCD_MspInit+0xc0>)
 800c844:	f7f5 f862 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c848:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c84c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c84e:	2302      	movs	r3, #2
 800c850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c852:	2300      	movs	r3, #0
 800c854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c856:	2300      	movs	r3, #0
 800c858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c85a:	230a      	movs	r3, #10
 800c85c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c85e:	f107 0314 	add.w	r3, r7, #20
 800c862:	4619      	mov	r1, r3
 800c864:	4812      	ldr	r0, [pc, #72]	@ (800c8b0 <HAL_HCD_MspInit+0xc0>)
 800c866:	f7f5 f851 	bl	800190c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c86a:	4b10      	ldr	r3, [pc, #64]	@ (800c8ac <HAL_HCD_MspInit+0xbc>)
 800c86c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c86e:	4a0f      	ldr	r2, [pc, #60]	@ (800c8ac <HAL_HCD_MspInit+0xbc>)
 800c870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c874:	6353      	str	r3, [r2, #52]	@ 0x34
 800c876:	2300      	movs	r3, #0
 800c878:	60fb      	str	r3, [r7, #12]
 800c87a:	4b0c      	ldr	r3, [pc, #48]	@ (800c8ac <HAL_HCD_MspInit+0xbc>)
 800c87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c87e:	4a0b      	ldr	r2, [pc, #44]	@ (800c8ac <HAL_HCD_MspInit+0xbc>)
 800c880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c884:	6453      	str	r3, [r2, #68]	@ 0x44
 800c886:	4b09      	ldr	r3, [pc, #36]	@ (800c8ac <HAL_HCD_MspInit+0xbc>)
 800c888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c88a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c892:	2200      	movs	r2, #0
 800c894:	2105      	movs	r1, #5
 800c896:	2043      	movs	r0, #67	@ 0x43
 800c898:	f7f4 ff7c 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c89c:	2043      	movs	r0, #67	@ 0x43
 800c89e:	f7f4 ff95 	bl	80017cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c8a2:	bf00      	nop
 800c8a4:	3728      	adds	r7, #40	@ 0x28
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	40023800 	.word	0x40023800
 800c8b0:	40020000 	.word	0x40020000

0800c8b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fb fed7 	bl	8008676 <USBH_LL_IncTimer>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fb ff1b 	bl	800871a <USBH_LL_Connect>
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fb ff30 	bl	8008760 <USBH_LL_Disconnect>
}
 800c900:	bf00      	nop
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	460b      	mov	r3, r1
 800c912:	70fb      	strb	r3, [r7, #3]
 800c914:	4613      	mov	r3, r2
 800c916:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fb ff67 	bl	80087f2 <USBH_LL_NotifyURBChange>
#endif
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7fb fec5 	bl	80086ca <USBH_LL_PortEnabled>
}
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800c956:	4618      	mov	r0, r3
 800c958:	f7fb fed1 	bl	80086fe <USBH_LL_PortDisabled>
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c972:	2b01      	cmp	r3, #1
 800c974:	d12a      	bne.n	800c9cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c976:	4a18      	ldr	r2, [pc, #96]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a15      	ldr	r2, [pc, #84]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c982:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c986:	4b14      	ldr	r3, [pc, #80]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c988:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c98c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c98e:	4b12      	ldr	r3, [pc, #72]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c990:	2208      	movs	r2, #8
 800c992:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c994:	4b10      	ldr	r3, [pc, #64]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c996:	2201      	movs	r2, #1
 800c998:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c99a:	4b0f      	ldr	r3, [pc, #60]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c9a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c9a2:	2202      	movs	r2, #2
 800c9a4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c9a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c9ac:	480a      	ldr	r0, [pc, #40]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c9ae:	f7f5 f986 	bl	8001cbe <HAL_HCD_Init>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d001      	beq.n	800c9bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c9b8:	f7f4 fad0 	bl	8000f5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c9bc:	4806      	ldr	r0, [pc, #24]	@ (800c9d8 <USBH_LL_Init+0x74>)
 800c9be:	f7f5 fd6a 	bl	8002496 <HAL_HCD_GetCurrentFrame>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7fb fe46 	bl	8008658 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20005064 	.word	0x20005064

0800c9dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7f5 fcd9 	bl	80023aa <HAL_HCD_Start>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9fc:	7bfb      	ldrb	r3, [r7, #15]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 f95c 	bl	800ccbc <USBH_Get_USB_Status>
 800ca04:	4603      	mov	r3, r0
 800ca06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b084      	sub	sp, #16
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7f5 fce1 	bl	80023f0 <HAL_HCD_Stop>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 f941 	bl	800ccbc <USBH_Get_USB_Status>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ca50:	2301      	movs	r3, #1
 800ca52:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7f5 fd29 	bl	80024b2 <HAL_HCD_GetCurrentSpeed>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	d00c      	beq.n	800ca80 <USBH_LL_GetSpeed+0x38>
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	d80d      	bhi.n	800ca86 <USBH_LL_GetSpeed+0x3e>
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <USBH_LL_GetSpeed+0x2c>
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d003      	beq.n	800ca7a <USBH_LL_GetSpeed+0x32>
 800ca72:	e008      	b.n	800ca86 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ca74:	2300      	movs	r3, #0
 800ca76:	73fb      	strb	r3, [r7, #15]
    break;
 800ca78:	e008      	b.n	800ca8c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca7e:	e005      	b.n	800ca8c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ca80:	2302      	movs	r3, #2
 800ca82:	73fb      	strb	r3, [r7, #15]
    break;
 800ca84:	e002      	b.n	800ca8c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ca86:	2301      	movs	r3, #1
 800ca88:	73fb      	strb	r3, [r7, #15]
    break;
 800ca8a:	bf00      	nop
  }
  return  speed;
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800caac:	4618      	mov	r0, r3
 800caae:	f7f5 fcbc 	bl	800242a <HAL_HCD_ResetPort>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 f8ff 	bl	800ccbc <USBH_Get_USB_Status>
 800cabe:	4603      	mov	r3, r0
 800cac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cac2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cade:	78fa      	ldrb	r2, [r7, #3]
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7f5 fcc3 	bl	800246e <HAL_HCD_HC_GetXferCount>
 800cae8:	4603      	mov	r3, r0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800caf2:	b590      	push	{r4, r7, lr}
 800caf4:	b089      	sub	sp, #36	@ 0x24
 800caf6:	af04      	add	r7, sp, #16
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	4608      	mov	r0, r1
 800cafc:	4611      	mov	r1, r2
 800cafe:	461a      	mov	r2, r3
 800cb00:	4603      	mov	r3, r0
 800cb02:	70fb      	strb	r3, [r7, #3]
 800cb04:	460b      	mov	r3, r1
 800cb06:	70bb      	strb	r3, [r7, #2]
 800cb08:	4613      	mov	r3, r2
 800cb0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cb1a:	787c      	ldrb	r4, [r7, #1]
 800cb1c:	78ba      	ldrb	r2, [r7, #2]
 800cb1e:	78f9      	ldrb	r1, [r7, #3]
 800cb20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb22:	9302      	str	r3, [sp, #8]
 800cb24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	4623      	mov	r3, r4
 800cb32:	f7f5 f926 	bl	8001d82 <HAL_HCD_HC_Init>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 f8bd 	bl	800ccbc <USBH_Get_USB_Status>
 800cb42:	4603      	mov	r3, r0
 800cb44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd90      	pop	{r4, r7, pc}

0800cb50 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb60:	2300      	movs	r3, #0
 800cb62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cb6a:	78fa      	ldrb	r2, [r7, #3]
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7f5 f996 	bl	8001ea0 <HAL_HCD_HC_Halt>
 800cb74:	4603      	mov	r3, r0
 800cb76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f000 f89e 	bl	800ccbc <USBH_Get_USB_Status>
 800cb80:	4603      	mov	r3, r0
 800cb82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb84:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cb8e:	b590      	push	{r4, r7, lr}
 800cb90:	b089      	sub	sp, #36	@ 0x24
 800cb92:	af04      	add	r7, sp, #16
 800cb94:	6078      	str	r0, [r7, #4]
 800cb96:	4608      	mov	r0, r1
 800cb98:	4611      	mov	r1, r2
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	70fb      	strb	r3, [r7, #3]
 800cba0:	460b      	mov	r3, r1
 800cba2:	70bb      	strb	r3, [r7, #2]
 800cba4:	4613      	mov	r3, r2
 800cba6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cbb6:	787c      	ldrb	r4, [r7, #1]
 800cbb8:	78ba      	ldrb	r2, [r7, #2]
 800cbba:	78f9      	ldrb	r1, [r7, #3]
 800cbbc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cbc0:	9303      	str	r3, [sp, #12]
 800cbc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbc4:	9302      	str	r3, [sp, #8]
 800cbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc8:	9301      	str	r3, [sp, #4]
 800cbca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	4623      	mov	r3, r4
 800cbd2:	f7f5 f989 	bl	8001ee8 <HAL_HCD_HC_SubmitRequest>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f000 f86d 	bl	800ccbc <USBH_Get_USB_Status>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd90      	pop	{r4, r7, pc}

0800cbf0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cc02:	78fa      	ldrb	r2, [r7, #3]
 800cc04:	4611      	mov	r1, r2
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7f5 fc1d 	bl	8002446 <HAL_HCD_HC_GetURBState>
 800cc0c:	4603      	mov	r3, r0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	460b      	mov	r3, r1
 800cc20:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d103      	bne.n	800cc34 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 f870 	bl	800cd14 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cc34:	20c8      	movs	r0, #200	@ 0xc8
 800cc36:	f7f4 fcd1 	bl	80015dc <HAL_Delay>
  return USBH_OK;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	70fb      	strb	r3, [r7, #3]
 800cc50:	4613      	mov	r3, r2
 800cc52:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cc5a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cc5c:	78fb      	ldrb	r3, [r7, #3]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	212c      	movs	r1, #44	@ 0x2c
 800cc62:	fb01 f303 	mul.w	r3, r1, r3
 800cc66:	4413      	add	r3, r2
 800cc68:	333b      	adds	r3, #59	@ 0x3b
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d009      	beq.n	800cc84 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cc70:	78fb      	ldrb	r3, [r7, #3]
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	212c      	movs	r1, #44	@ 0x2c
 800cc76:	fb01 f303 	mul.w	r3, r1, r3
 800cc7a:	4413      	add	r3, r2
 800cc7c:	3354      	adds	r3, #84	@ 0x54
 800cc7e:	78ba      	ldrb	r2, [r7, #2]
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	e008      	b.n	800cc96 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	212c      	movs	r1, #44	@ 0x2c
 800cc8a:	fb01 f303 	mul.w	r3, r1, r3
 800cc8e:	4413      	add	r3, r2
 800cc90:	3355      	adds	r3, #85	@ 0x55
 800cc92:	78ba      	ldrb	r2, [r7, #2]
 800cc94:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7f4 fc95 	bl	80015dc <HAL_Delay>
}
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
	...

0800ccbc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	2b03      	cmp	r3, #3
 800ccce:	d817      	bhi.n	800cd00 <USBH_Get_USB_Status+0x44>
 800ccd0:	a201      	add	r2, pc, #4	@ (adr r2, 800ccd8 <USBH_Get_USB_Status+0x1c>)
 800ccd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd6:	bf00      	nop
 800ccd8:	0800cce9 	.word	0x0800cce9
 800ccdc:	0800ccef 	.word	0x0800ccef
 800cce0:	0800ccf5 	.word	0x0800ccf5
 800cce4:	0800ccfb 	.word	0x0800ccfb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cce8:	2300      	movs	r3, #0
 800ccea:	73fb      	strb	r3, [r7, #15]
    break;
 800ccec:	e00b      	b.n	800cd06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ccee:	2302      	movs	r3, #2
 800ccf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf2:	e008      	b.n	800cd06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf8:	e005      	b.n	800cd06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ccfe:	e002      	b.n	800cd06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cd00:	2302      	movs	r3, #2
 800cd02:	73fb      	strb	r3, [r7, #15]
    break;
 800cd04:	bf00      	nop
  }
  return usb_status;
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3714      	adds	r7, #20
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cd1e:	79fb      	ldrb	r3, [r7, #7]
 800cd20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cd22:	79fb      	ldrb	r3, [r7, #7]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73fb      	strb	r3, [r7, #15]
 800cd2c:	e001      	b.n	800cd32 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	461a      	mov	r2, r3
 800cd36:	2101      	movs	r1, #1
 800cd38:	4803      	ldr	r0, [pc, #12]	@ (800cd48 <MX_DriverVbusFS+0x34>)
 800cd3a:	f7f4 ff83 	bl	8001c44 <HAL_GPIO_WritePin>
}
 800cd3e:	bf00      	nop
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	40020800 	.word	0x40020800

0800cd4c <malloc>:
 800cd4c:	4b02      	ldr	r3, [pc, #8]	@ (800cd58 <malloc+0xc>)
 800cd4e:	4601      	mov	r1, r0
 800cd50:	6818      	ldr	r0, [r3, #0]
 800cd52:	f000 b82d 	b.w	800cdb0 <_malloc_r>
 800cd56:	bf00      	nop
 800cd58:	20000030 	.word	0x20000030

0800cd5c <free>:
 800cd5c:	4b02      	ldr	r3, [pc, #8]	@ (800cd68 <free+0xc>)
 800cd5e:	4601      	mov	r1, r0
 800cd60:	6818      	ldr	r0, [r3, #0]
 800cd62:	f000 b9c7 	b.w	800d0f4 <_free_r>
 800cd66:	bf00      	nop
 800cd68:	20000030 	.word	0x20000030

0800cd6c <sbrk_aligned>:
 800cd6c:	b570      	push	{r4, r5, r6, lr}
 800cd6e:	4e0f      	ldr	r6, [pc, #60]	@ (800cdac <sbrk_aligned+0x40>)
 800cd70:	460c      	mov	r4, r1
 800cd72:	6831      	ldr	r1, [r6, #0]
 800cd74:	4605      	mov	r5, r0
 800cd76:	b911      	cbnz	r1, 800cd7e <sbrk_aligned+0x12>
 800cd78:	f000 f972 	bl	800d060 <_sbrk_r>
 800cd7c:	6030      	str	r0, [r6, #0]
 800cd7e:	4621      	mov	r1, r4
 800cd80:	4628      	mov	r0, r5
 800cd82:	f000 f96d 	bl	800d060 <_sbrk_r>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	d103      	bne.n	800cd92 <sbrk_aligned+0x26>
 800cd8a:	f04f 34ff 	mov.w	r4, #4294967295
 800cd8e:	4620      	mov	r0, r4
 800cd90:	bd70      	pop	{r4, r5, r6, pc}
 800cd92:	1cc4      	adds	r4, r0, #3
 800cd94:	f024 0403 	bic.w	r4, r4, #3
 800cd98:	42a0      	cmp	r0, r4
 800cd9a:	d0f8      	beq.n	800cd8e <sbrk_aligned+0x22>
 800cd9c:	1a21      	subs	r1, r4, r0
 800cd9e:	4628      	mov	r0, r5
 800cda0:	f000 f95e 	bl	800d060 <_sbrk_r>
 800cda4:	3001      	adds	r0, #1
 800cda6:	d1f2      	bne.n	800cd8e <sbrk_aligned+0x22>
 800cda8:	e7ef      	b.n	800cd8a <sbrk_aligned+0x1e>
 800cdaa:	bf00      	nop
 800cdac:	20005368 	.word	0x20005368

0800cdb0 <_malloc_r>:
 800cdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb4:	1ccd      	adds	r5, r1, #3
 800cdb6:	f025 0503 	bic.w	r5, r5, #3
 800cdba:	3508      	adds	r5, #8
 800cdbc:	2d0c      	cmp	r5, #12
 800cdbe:	bf38      	it	cc
 800cdc0:	250c      	movcc	r5, #12
 800cdc2:	2d00      	cmp	r5, #0
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	db01      	blt.n	800cdcc <_malloc_r+0x1c>
 800cdc8:	42a9      	cmp	r1, r5
 800cdca:	d904      	bls.n	800cdd6 <_malloc_r+0x26>
 800cdcc:	230c      	movs	r3, #12
 800cdce:	6033      	str	r3, [r6, #0]
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ceac <_malloc_r+0xfc>
 800cdda:	f000 f869 	bl	800ceb0 <__malloc_lock>
 800cdde:	f8d8 3000 	ldr.w	r3, [r8]
 800cde2:	461c      	mov	r4, r3
 800cde4:	bb44      	cbnz	r4, 800ce38 <_malloc_r+0x88>
 800cde6:	4629      	mov	r1, r5
 800cde8:	4630      	mov	r0, r6
 800cdea:	f7ff ffbf 	bl	800cd6c <sbrk_aligned>
 800cdee:	1c43      	adds	r3, r0, #1
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	d158      	bne.n	800cea6 <_malloc_r+0xf6>
 800cdf4:	f8d8 4000 	ldr.w	r4, [r8]
 800cdf8:	4627      	mov	r7, r4
 800cdfa:	2f00      	cmp	r7, #0
 800cdfc:	d143      	bne.n	800ce86 <_malloc_r+0xd6>
 800cdfe:	2c00      	cmp	r4, #0
 800ce00:	d04b      	beq.n	800ce9a <_malloc_r+0xea>
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	4639      	mov	r1, r7
 800ce06:	4630      	mov	r0, r6
 800ce08:	eb04 0903 	add.w	r9, r4, r3
 800ce0c:	f000 f928 	bl	800d060 <_sbrk_r>
 800ce10:	4581      	cmp	r9, r0
 800ce12:	d142      	bne.n	800ce9a <_malloc_r+0xea>
 800ce14:	6821      	ldr	r1, [r4, #0]
 800ce16:	1a6d      	subs	r5, r5, r1
 800ce18:	4629      	mov	r1, r5
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f7ff ffa6 	bl	800cd6c <sbrk_aligned>
 800ce20:	3001      	adds	r0, #1
 800ce22:	d03a      	beq.n	800ce9a <_malloc_r+0xea>
 800ce24:	6823      	ldr	r3, [r4, #0]
 800ce26:	442b      	add	r3, r5
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	bb62      	cbnz	r2, 800ce8c <_malloc_r+0xdc>
 800ce32:	f8c8 7000 	str.w	r7, [r8]
 800ce36:	e00f      	b.n	800ce58 <_malloc_r+0xa8>
 800ce38:	6822      	ldr	r2, [r4, #0]
 800ce3a:	1b52      	subs	r2, r2, r5
 800ce3c:	d420      	bmi.n	800ce80 <_malloc_r+0xd0>
 800ce3e:	2a0b      	cmp	r2, #11
 800ce40:	d917      	bls.n	800ce72 <_malloc_r+0xc2>
 800ce42:	1961      	adds	r1, r4, r5
 800ce44:	42a3      	cmp	r3, r4
 800ce46:	6025      	str	r5, [r4, #0]
 800ce48:	bf18      	it	ne
 800ce4a:	6059      	strne	r1, [r3, #4]
 800ce4c:	6863      	ldr	r3, [r4, #4]
 800ce4e:	bf08      	it	eq
 800ce50:	f8c8 1000 	streq.w	r1, [r8]
 800ce54:	5162      	str	r2, [r4, r5]
 800ce56:	604b      	str	r3, [r1, #4]
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f000 f82f 	bl	800cebc <__malloc_unlock>
 800ce5e:	f104 000b 	add.w	r0, r4, #11
 800ce62:	1d23      	adds	r3, r4, #4
 800ce64:	f020 0007 	bic.w	r0, r0, #7
 800ce68:	1ac2      	subs	r2, r0, r3
 800ce6a:	bf1c      	itt	ne
 800ce6c:	1a1b      	subne	r3, r3, r0
 800ce6e:	50a3      	strne	r3, [r4, r2]
 800ce70:	e7af      	b.n	800cdd2 <_malloc_r+0x22>
 800ce72:	6862      	ldr	r2, [r4, #4]
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	bf0c      	ite	eq
 800ce78:	f8c8 2000 	streq.w	r2, [r8]
 800ce7c:	605a      	strne	r2, [r3, #4]
 800ce7e:	e7eb      	b.n	800ce58 <_malloc_r+0xa8>
 800ce80:	4623      	mov	r3, r4
 800ce82:	6864      	ldr	r4, [r4, #4]
 800ce84:	e7ae      	b.n	800cde4 <_malloc_r+0x34>
 800ce86:	463c      	mov	r4, r7
 800ce88:	687f      	ldr	r7, [r7, #4]
 800ce8a:	e7b6      	b.n	800cdfa <_malloc_r+0x4a>
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	42a3      	cmp	r3, r4
 800ce92:	d1fb      	bne.n	800ce8c <_malloc_r+0xdc>
 800ce94:	2300      	movs	r3, #0
 800ce96:	6053      	str	r3, [r2, #4]
 800ce98:	e7de      	b.n	800ce58 <_malloc_r+0xa8>
 800ce9a:	230c      	movs	r3, #12
 800ce9c:	6033      	str	r3, [r6, #0]
 800ce9e:	4630      	mov	r0, r6
 800cea0:	f000 f80c 	bl	800cebc <__malloc_unlock>
 800cea4:	e794      	b.n	800cdd0 <_malloc_r+0x20>
 800cea6:	6005      	str	r5, [r0, #0]
 800cea8:	e7d6      	b.n	800ce58 <_malloc_r+0xa8>
 800ceaa:	bf00      	nop
 800ceac:	2000536c 	.word	0x2000536c

0800ceb0 <__malloc_lock>:
 800ceb0:	4801      	ldr	r0, [pc, #4]	@ (800ceb8 <__malloc_lock+0x8>)
 800ceb2:	f000 b90f 	b.w	800d0d4 <__retarget_lock_acquire_recursive>
 800ceb6:	bf00      	nop
 800ceb8:	200054ac 	.word	0x200054ac

0800cebc <__malloc_unlock>:
 800cebc:	4801      	ldr	r0, [pc, #4]	@ (800cec4 <__malloc_unlock+0x8>)
 800cebe:	f000 b90a 	b.w	800d0d6 <__retarget_lock_release_recursive>
 800cec2:	bf00      	nop
 800cec4:	200054ac 	.word	0x200054ac

0800cec8 <sniprintf>:
 800cec8:	b40c      	push	{r2, r3}
 800ceca:	b530      	push	{r4, r5, lr}
 800cecc:	4b17      	ldr	r3, [pc, #92]	@ (800cf2c <sniprintf+0x64>)
 800cece:	1e0c      	subs	r4, r1, #0
 800ced0:	681d      	ldr	r5, [r3, #0]
 800ced2:	b09d      	sub	sp, #116	@ 0x74
 800ced4:	da08      	bge.n	800cee8 <sniprintf+0x20>
 800ced6:	238b      	movs	r3, #139	@ 0x8b
 800ced8:	602b      	str	r3, [r5, #0]
 800ceda:	f04f 30ff 	mov.w	r0, #4294967295
 800cede:	b01d      	add	sp, #116	@ 0x74
 800cee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cee4:	b002      	add	sp, #8
 800cee6:	4770      	bx	lr
 800cee8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ceec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cef0:	bf14      	ite	ne
 800cef2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cef6:	4623      	moveq	r3, r4
 800cef8:	9304      	str	r3, [sp, #16]
 800cefa:	9307      	str	r3, [sp, #28]
 800cefc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf00:	9002      	str	r0, [sp, #8]
 800cf02:	9006      	str	r0, [sp, #24]
 800cf04:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cf08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cf0a:	ab21      	add	r3, sp, #132	@ 0x84
 800cf0c:	a902      	add	r1, sp, #8
 800cf0e:	4628      	mov	r0, r5
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	f000 f995 	bl	800d240 <_svfiprintf_r>
 800cf16:	1c43      	adds	r3, r0, #1
 800cf18:	bfbc      	itt	lt
 800cf1a:	238b      	movlt	r3, #139	@ 0x8b
 800cf1c:	602b      	strlt	r3, [r5, #0]
 800cf1e:	2c00      	cmp	r4, #0
 800cf20:	d0dd      	beq.n	800cede <sniprintf+0x16>
 800cf22:	9b02      	ldr	r3, [sp, #8]
 800cf24:	2200      	movs	r2, #0
 800cf26:	701a      	strb	r2, [r3, #0]
 800cf28:	e7d9      	b.n	800cede <sniprintf+0x16>
 800cf2a:	bf00      	nop
 800cf2c:	20000030 	.word	0x20000030

0800cf30 <_vsniprintf_r>:
 800cf30:	b530      	push	{r4, r5, lr}
 800cf32:	4614      	mov	r4, r2
 800cf34:	2c00      	cmp	r4, #0
 800cf36:	b09b      	sub	sp, #108	@ 0x6c
 800cf38:	4605      	mov	r5, r0
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	da05      	bge.n	800cf4a <_vsniprintf_r+0x1a>
 800cf3e:	238b      	movs	r3, #139	@ 0x8b
 800cf40:	6003      	str	r3, [r0, #0]
 800cf42:	f04f 30ff 	mov.w	r0, #4294967295
 800cf46:	b01b      	add	sp, #108	@ 0x6c
 800cf48:	bd30      	pop	{r4, r5, pc}
 800cf4a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cf4e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cf52:	bf14      	ite	ne
 800cf54:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cf58:	4623      	moveq	r3, r4
 800cf5a:	9302      	str	r3, [sp, #8]
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf62:	9100      	str	r1, [sp, #0]
 800cf64:	9104      	str	r1, [sp, #16]
 800cf66:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cf6a:	4669      	mov	r1, sp
 800cf6c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cf6e:	f000 f967 	bl	800d240 <_svfiprintf_r>
 800cf72:	1c43      	adds	r3, r0, #1
 800cf74:	bfbc      	itt	lt
 800cf76:	238b      	movlt	r3, #139	@ 0x8b
 800cf78:	602b      	strlt	r3, [r5, #0]
 800cf7a:	2c00      	cmp	r4, #0
 800cf7c:	d0e3      	beq.n	800cf46 <_vsniprintf_r+0x16>
 800cf7e:	9b00      	ldr	r3, [sp, #0]
 800cf80:	2200      	movs	r2, #0
 800cf82:	701a      	strb	r2, [r3, #0]
 800cf84:	e7df      	b.n	800cf46 <_vsniprintf_r+0x16>
	...

0800cf88 <vsniprintf>:
 800cf88:	b507      	push	{r0, r1, r2, lr}
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	460a      	mov	r2, r1
 800cf90:	4601      	mov	r1, r0
 800cf92:	4803      	ldr	r0, [pc, #12]	@ (800cfa0 <vsniprintf+0x18>)
 800cf94:	6800      	ldr	r0, [r0, #0]
 800cf96:	f7ff ffcb 	bl	800cf30 <_vsniprintf_r>
 800cf9a:	b003      	add	sp, #12
 800cf9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfa0:	20000030 	.word	0x20000030

0800cfa4 <memset>:
 800cfa4:	4402      	add	r2, r0
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d100      	bne.n	800cfae <memset+0xa>
 800cfac:	4770      	bx	lr
 800cfae:	f803 1b01 	strb.w	r1, [r3], #1
 800cfb2:	e7f9      	b.n	800cfa8 <memset+0x4>

0800cfb4 <_reclaim_reent>:
 800cfb4:	4b29      	ldr	r3, [pc, #164]	@ (800d05c <_reclaim_reent+0xa8>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4283      	cmp	r3, r0
 800cfba:	b570      	push	{r4, r5, r6, lr}
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	d04b      	beq.n	800d058 <_reclaim_reent+0xa4>
 800cfc0:	69c3      	ldr	r3, [r0, #28]
 800cfc2:	b1ab      	cbz	r3, 800cff0 <_reclaim_reent+0x3c>
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	b16b      	cbz	r3, 800cfe4 <_reclaim_reent+0x30>
 800cfc8:	2500      	movs	r5, #0
 800cfca:	69e3      	ldr	r3, [r4, #28]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	5959      	ldr	r1, [r3, r5]
 800cfd0:	2900      	cmp	r1, #0
 800cfd2:	d13b      	bne.n	800d04c <_reclaim_reent+0x98>
 800cfd4:	3504      	adds	r5, #4
 800cfd6:	2d80      	cmp	r5, #128	@ 0x80
 800cfd8:	d1f7      	bne.n	800cfca <_reclaim_reent+0x16>
 800cfda:	69e3      	ldr	r3, [r4, #28]
 800cfdc:	4620      	mov	r0, r4
 800cfde:	68d9      	ldr	r1, [r3, #12]
 800cfe0:	f000 f888 	bl	800d0f4 <_free_r>
 800cfe4:	69e3      	ldr	r3, [r4, #28]
 800cfe6:	6819      	ldr	r1, [r3, #0]
 800cfe8:	b111      	cbz	r1, 800cff0 <_reclaim_reent+0x3c>
 800cfea:	4620      	mov	r0, r4
 800cfec:	f000 f882 	bl	800d0f4 <_free_r>
 800cff0:	6961      	ldr	r1, [r4, #20]
 800cff2:	b111      	cbz	r1, 800cffa <_reclaim_reent+0x46>
 800cff4:	4620      	mov	r0, r4
 800cff6:	f000 f87d 	bl	800d0f4 <_free_r>
 800cffa:	69e1      	ldr	r1, [r4, #28]
 800cffc:	b111      	cbz	r1, 800d004 <_reclaim_reent+0x50>
 800cffe:	4620      	mov	r0, r4
 800d000:	f000 f878 	bl	800d0f4 <_free_r>
 800d004:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d006:	b111      	cbz	r1, 800d00e <_reclaim_reent+0x5a>
 800d008:	4620      	mov	r0, r4
 800d00a:	f000 f873 	bl	800d0f4 <_free_r>
 800d00e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d010:	b111      	cbz	r1, 800d018 <_reclaim_reent+0x64>
 800d012:	4620      	mov	r0, r4
 800d014:	f000 f86e 	bl	800d0f4 <_free_r>
 800d018:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d01a:	b111      	cbz	r1, 800d022 <_reclaim_reent+0x6e>
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 f869 	bl	800d0f4 <_free_r>
 800d022:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d024:	b111      	cbz	r1, 800d02c <_reclaim_reent+0x78>
 800d026:	4620      	mov	r0, r4
 800d028:	f000 f864 	bl	800d0f4 <_free_r>
 800d02c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d02e:	b111      	cbz	r1, 800d036 <_reclaim_reent+0x82>
 800d030:	4620      	mov	r0, r4
 800d032:	f000 f85f 	bl	800d0f4 <_free_r>
 800d036:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d038:	b111      	cbz	r1, 800d040 <_reclaim_reent+0x8c>
 800d03a:	4620      	mov	r0, r4
 800d03c:	f000 f85a 	bl	800d0f4 <_free_r>
 800d040:	6a23      	ldr	r3, [r4, #32]
 800d042:	b14b      	cbz	r3, 800d058 <_reclaim_reent+0xa4>
 800d044:	4620      	mov	r0, r4
 800d046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d04a:	4718      	bx	r3
 800d04c:	680e      	ldr	r6, [r1, #0]
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 f850 	bl	800d0f4 <_free_r>
 800d054:	4631      	mov	r1, r6
 800d056:	e7bb      	b.n	800cfd0 <_reclaim_reent+0x1c>
 800d058:	bd70      	pop	{r4, r5, r6, pc}
 800d05a:	bf00      	nop
 800d05c:	20000030 	.word	0x20000030

0800d060 <_sbrk_r>:
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	4d06      	ldr	r5, [pc, #24]	@ (800d07c <_sbrk_r+0x1c>)
 800d064:	2300      	movs	r3, #0
 800d066:	4604      	mov	r4, r0
 800d068:	4608      	mov	r0, r1
 800d06a:	602b      	str	r3, [r5, #0]
 800d06c:	f7f4 fa02 	bl	8001474 <_sbrk>
 800d070:	1c43      	adds	r3, r0, #1
 800d072:	d102      	bne.n	800d07a <_sbrk_r+0x1a>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	b103      	cbz	r3, 800d07a <_sbrk_r+0x1a>
 800d078:	6023      	str	r3, [r4, #0]
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	200054a8 	.word	0x200054a8

0800d080 <__errno>:
 800d080:	4b01      	ldr	r3, [pc, #4]	@ (800d088 <__errno+0x8>)
 800d082:	6818      	ldr	r0, [r3, #0]
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	20000030 	.word	0x20000030

0800d08c <__libc_init_array>:
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	4d0d      	ldr	r5, [pc, #52]	@ (800d0c4 <__libc_init_array+0x38>)
 800d090:	4c0d      	ldr	r4, [pc, #52]	@ (800d0c8 <__libc_init_array+0x3c>)
 800d092:	1b64      	subs	r4, r4, r5
 800d094:	10a4      	asrs	r4, r4, #2
 800d096:	2600      	movs	r6, #0
 800d098:	42a6      	cmp	r6, r4
 800d09a:	d109      	bne.n	800d0b0 <__libc_init_array+0x24>
 800d09c:	4d0b      	ldr	r5, [pc, #44]	@ (800d0cc <__libc_init_array+0x40>)
 800d09e:	4c0c      	ldr	r4, [pc, #48]	@ (800d0d0 <__libc_init_array+0x44>)
 800d0a0:	f000 fba8 	bl	800d7f4 <_init>
 800d0a4:	1b64      	subs	r4, r4, r5
 800d0a6:	10a4      	asrs	r4, r4, #2
 800d0a8:	2600      	movs	r6, #0
 800d0aa:	42a6      	cmp	r6, r4
 800d0ac:	d105      	bne.n	800d0ba <__libc_init_array+0x2e>
 800d0ae:	bd70      	pop	{r4, r5, r6, pc}
 800d0b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0b4:	4798      	blx	r3
 800d0b6:	3601      	adds	r6, #1
 800d0b8:	e7ee      	b.n	800d098 <__libc_init_array+0xc>
 800d0ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0be:	4798      	blx	r3
 800d0c0:	3601      	adds	r6, #1
 800d0c2:	e7f2      	b.n	800d0aa <__libc_init_array+0x1e>
 800d0c4:	0800d9f4 	.word	0x0800d9f4
 800d0c8:	0800d9f4 	.word	0x0800d9f4
 800d0cc:	0800d9f4 	.word	0x0800d9f4
 800d0d0:	0800d9f8 	.word	0x0800d9f8

0800d0d4 <__retarget_lock_acquire_recursive>:
 800d0d4:	4770      	bx	lr

0800d0d6 <__retarget_lock_release_recursive>:
 800d0d6:	4770      	bx	lr

0800d0d8 <memcpy>:
 800d0d8:	440a      	add	r2, r1
 800d0da:	4291      	cmp	r1, r2
 800d0dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0e0:	d100      	bne.n	800d0e4 <memcpy+0xc>
 800d0e2:	4770      	bx	lr
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0ee:	4291      	cmp	r1, r2
 800d0f0:	d1f9      	bne.n	800d0e6 <memcpy+0xe>
 800d0f2:	bd10      	pop	{r4, pc}

0800d0f4 <_free_r>:
 800d0f4:	b538      	push	{r3, r4, r5, lr}
 800d0f6:	4605      	mov	r5, r0
 800d0f8:	2900      	cmp	r1, #0
 800d0fa:	d041      	beq.n	800d180 <_free_r+0x8c>
 800d0fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d100:	1f0c      	subs	r4, r1, #4
 800d102:	2b00      	cmp	r3, #0
 800d104:	bfb8      	it	lt
 800d106:	18e4      	addlt	r4, r4, r3
 800d108:	f7ff fed2 	bl	800ceb0 <__malloc_lock>
 800d10c:	4a1d      	ldr	r2, [pc, #116]	@ (800d184 <_free_r+0x90>)
 800d10e:	6813      	ldr	r3, [r2, #0]
 800d110:	b933      	cbnz	r3, 800d120 <_free_r+0x2c>
 800d112:	6063      	str	r3, [r4, #4]
 800d114:	6014      	str	r4, [r2, #0]
 800d116:	4628      	mov	r0, r5
 800d118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d11c:	f7ff bece 	b.w	800cebc <__malloc_unlock>
 800d120:	42a3      	cmp	r3, r4
 800d122:	d908      	bls.n	800d136 <_free_r+0x42>
 800d124:	6820      	ldr	r0, [r4, #0]
 800d126:	1821      	adds	r1, r4, r0
 800d128:	428b      	cmp	r3, r1
 800d12a:	bf01      	itttt	eq
 800d12c:	6819      	ldreq	r1, [r3, #0]
 800d12e:	685b      	ldreq	r3, [r3, #4]
 800d130:	1809      	addeq	r1, r1, r0
 800d132:	6021      	streq	r1, [r4, #0]
 800d134:	e7ed      	b.n	800d112 <_free_r+0x1e>
 800d136:	461a      	mov	r2, r3
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	b10b      	cbz	r3, 800d140 <_free_r+0x4c>
 800d13c:	42a3      	cmp	r3, r4
 800d13e:	d9fa      	bls.n	800d136 <_free_r+0x42>
 800d140:	6811      	ldr	r1, [r2, #0]
 800d142:	1850      	adds	r0, r2, r1
 800d144:	42a0      	cmp	r0, r4
 800d146:	d10b      	bne.n	800d160 <_free_r+0x6c>
 800d148:	6820      	ldr	r0, [r4, #0]
 800d14a:	4401      	add	r1, r0
 800d14c:	1850      	adds	r0, r2, r1
 800d14e:	4283      	cmp	r3, r0
 800d150:	6011      	str	r1, [r2, #0]
 800d152:	d1e0      	bne.n	800d116 <_free_r+0x22>
 800d154:	6818      	ldr	r0, [r3, #0]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	6053      	str	r3, [r2, #4]
 800d15a:	4408      	add	r0, r1
 800d15c:	6010      	str	r0, [r2, #0]
 800d15e:	e7da      	b.n	800d116 <_free_r+0x22>
 800d160:	d902      	bls.n	800d168 <_free_r+0x74>
 800d162:	230c      	movs	r3, #12
 800d164:	602b      	str	r3, [r5, #0]
 800d166:	e7d6      	b.n	800d116 <_free_r+0x22>
 800d168:	6820      	ldr	r0, [r4, #0]
 800d16a:	1821      	adds	r1, r4, r0
 800d16c:	428b      	cmp	r3, r1
 800d16e:	bf04      	itt	eq
 800d170:	6819      	ldreq	r1, [r3, #0]
 800d172:	685b      	ldreq	r3, [r3, #4]
 800d174:	6063      	str	r3, [r4, #4]
 800d176:	bf04      	itt	eq
 800d178:	1809      	addeq	r1, r1, r0
 800d17a:	6021      	streq	r1, [r4, #0]
 800d17c:	6054      	str	r4, [r2, #4]
 800d17e:	e7ca      	b.n	800d116 <_free_r+0x22>
 800d180:	bd38      	pop	{r3, r4, r5, pc}
 800d182:	bf00      	nop
 800d184:	2000536c 	.word	0x2000536c

0800d188 <__ssputs_r>:
 800d188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d18c:	688e      	ldr	r6, [r1, #8]
 800d18e:	461f      	mov	r7, r3
 800d190:	42be      	cmp	r6, r7
 800d192:	680b      	ldr	r3, [r1, #0]
 800d194:	4682      	mov	sl, r0
 800d196:	460c      	mov	r4, r1
 800d198:	4690      	mov	r8, r2
 800d19a:	d82d      	bhi.n	800d1f8 <__ssputs_r+0x70>
 800d19c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1a4:	d026      	beq.n	800d1f4 <__ssputs_r+0x6c>
 800d1a6:	6965      	ldr	r5, [r4, #20]
 800d1a8:	6909      	ldr	r1, [r1, #16]
 800d1aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1ae:	eba3 0901 	sub.w	r9, r3, r1
 800d1b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1b6:	1c7b      	adds	r3, r7, #1
 800d1b8:	444b      	add	r3, r9
 800d1ba:	106d      	asrs	r5, r5, #1
 800d1bc:	429d      	cmp	r5, r3
 800d1be:	bf38      	it	cc
 800d1c0:	461d      	movcc	r5, r3
 800d1c2:	0553      	lsls	r3, r2, #21
 800d1c4:	d527      	bpl.n	800d216 <__ssputs_r+0x8e>
 800d1c6:	4629      	mov	r1, r5
 800d1c8:	f7ff fdf2 	bl	800cdb0 <_malloc_r>
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	b360      	cbz	r0, 800d22a <__ssputs_r+0xa2>
 800d1d0:	6921      	ldr	r1, [r4, #16]
 800d1d2:	464a      	mov	r2, r9
 800d1d4:	f7ff ff80 	bl	800d0d8 <memcpy>
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1e2:	81a3      	strh	r3, [r4, #12]
 800d1e4:	6126      	str	r6, [r4, #16]
 800d1e6:	6165      	str	r5, [r4, #20]
 800d1e8:	444e      	add	r6, r9
 800d1ea:	eba5 0509 	sub.w	r5, r5, r9
 800d1ee:	6026      	str	r6, [r4, #0]
 800d1f0:	60a5      	str	r5, [r4, #8]
 800d1f2:	463e      	mov	r6, r7
 800d1f4:	42be      	cmp	r6, r7
 800d1f6:	d900      	bls.n	800d1fa <__ssputs_r+0x72>
 800d1f8:	463e      	mov	r6, r7
 800d1fa:	6820      	ldr	r0, [r4, #0]
 800d1fc:	4632      	mov	r2, r6
 800d1fe:	4641      	mov	r1, r8
 800d200:	f000 faa8 	bl	800d754 <memmove>
 800d204:	68a3      	ldr	r3, [r4, #8]
 800d206:	1b9b      	subs	r3, r3, r6
 800d208:	60a3      	str	r3, [r4, #8]
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	4433      	add	r3, r6
 800d20e:	6023      	str	r3, [r4, #0]
 800d210:	2000      	movs	r0, #0
 800d212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d216:	462a      	mov	r2, r5
 800d218:	f000 fab6 	bl	800d788 <_realloc_r>
 800d21c:	4606      	mov	r6, r0
 800d21e:	2800      	cmp	r0, #0
 800d220:	d1e0      	bne.n	800d1e4 <__ssputs_r+0x5c>
 800d222:	6921      	ldr	r1, [r4, #16]
 800d224:	4650      	mov	r0, sl
 800d226:	f7ff ff65 	bl	800d0f4 <_free_r>
 800d22a:	230c      	movs	r3, #12
 800d22c:	f8ca 3000 	str.w	r3, [sl]
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d236:	81a3      	strh	r3, [r4, #12]
 800d238:	f04f 30ff 	mov.w	r0, #4294967295
 800d23c:	e7e9      	b.n	800d212 <__ssputs_r+0x8a>
	...

0800d240 <_svfiprintf_r>:
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	4698      	mov	r8, r3
 800d246:	898b      	ldrh	r3, [r1, #12]
 800d248:	061b      	lsls	r3, r3, #24
 800d24a:	b09d      	sub	sp, #116	@ 0x74
 800d24c:	4607      	mov	r7, r0
 800d24e:	460d      	mov	r5, r1
 800d250:	4614      	mov	r4, r2
 800d252:	d510      	bpl.n	800d276 <_svfiprintf_r+0x36>
 800d254:	690b      	ldr	r3, [r1, #16]
 800d256:	b973      	cbnz	r3, 800d276 <_svfiprintf_r+0x36>
 800d258:	2140      	movs	r1, #64	@ 0x40
 800d25a:	f7ff fda9 	bl	800cdb0 <_malloc_r>
 800d25e:	6028      	str	r0, [r5, #0]
 800d260:	6128      	str	r0, [r5, #16]
 800d262:	b930      	cbnz	r0, 800d272 <_svfiprintf_r+0x32>
 800d264:	230c      	movs	r3, #12
 800d266:	603b      	str	r3, [r7, #0]
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	b01d      	add	sp, #116	@ 0x74
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	2340      	movs	r3, #64	@ 0x40
 800d274:	616b      	str	r3, [r5, #20]
 800d276:	2300      	movs	r3, #0
 800d278:	9309      	str	r3, [sp, #36]	@ 0x24
 800d27a:	2320      	movs	r3, #32
 800d27c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d280:	f8cd 800c 	str.w	r8, [sp, #12]
 800d284:	2330      	movs	r3, #48	@ 0x30
 800d286:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d424 <_svfiprintf_r+0x1e4>
 800d28a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d28e:	f04f 0901 	mov.w	r9, #1
 800d292:	4623      	mov	r3, r4
 800d294:	469a      	mov	sl, r3
 800d296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d29a:	b10a      	cbz	r2, 800d2a0 <_svfiprintf_r+0x60>
 800d29c:	2a25      	cmp	r2, #37	@ 0x25
 800d29e:	d1f9      	bne.n	800d294 <_svfiprintf_r+0x54>
 800d2a0:	ebba 0b04 	subs.w	fp, sl, r4
 800d2a4:	d00b      	beq.n	800d2be <_svfiprintf_r+0x7e>
 800d2a6:	465b      	mov	r3, fp
 800d2a8:	4622      	mov	r2, r4
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	f7ff ff6b 	bl	800d188 <__ssputs_r>
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	f000 80a7 	beq.w	800d406 <_svfiprintf_r+0x1c6>
 800d2b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2ba:	445a      	add	r2, fp
 800d2bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2be:	f89a 3000 	ldrb.w	r3, [sl]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 809f 	beq.w	800d406 <_svfiprintf_r+0x1c6>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2d2:	f10a 0a01 	add.w	sl, sl, #1
 800d2d6:	9304      	str	r3, [sp, #16]
 800d2d8:	9307      	str	r3, [sp, #28]
 800d2da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2de:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2e0:	4654      	mov	r4, sl
 800d2e2:	2205      	movs	r2, #5
 800d2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e8:	484e      	ldr	r0, [pc, #312]	@ (800d424 <_svfiprintf_r+0x1e4>)
 800d2ea:	f7f2 ff79 	bl	80001e0 <memchr>
 800d2ee:	9a04      	ldr	r2, [sp, #16]
 800d2f0:	b9d8      	cbnz	r0, 800d32a <_svfiprintf_r+0xea>
 800d2f2:	06d0      	lsls	r0, r2, #27
 800d2f4:	bf44      	itt	mi
 800d2f6:	2320      	movmi	r3, #32
 800d2f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2fc:	0711      	lsls	r1, r2, #28
 800d2fe:	bf44      	itt	mi
 800d300:	232b      	movmi	r3, #43	@ 0x2b
 800d302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d306:	f89a 3000 	ldrb.w	r3, [sl]
 800d30a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d30c:	d015      	beq.n	800d33a <_svfiprintf_r+0xfa>
 800d30e:	9a07      	ldr	r2, [sp, #28]
 800d310:	4654      	mov	r4, sl
 800d312:	2000      	movs	r0, #0
 800d314:	f04f 0c0a 	mov.w	ip, #10
 800d318:	4621      	mov	r1, r4
 800d31a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d31e:	3b30      	subs	r3, #48	@ 0x30
 800d320:	2b09      	cmp	r3, #9
 800d322:	d94b      	bls.n	800d3bc <_svfiprintf_r+0x17c>
 800d324:	b1b0      	cbz	r0, 800d354 <_svfiprintf_r+0x114>
 800d326:	9207      	str	r2, [sp, #28]
 800d328:	e014      	b.n	800d354 <_svfiprintf_r+0x114>
 800d32a:	eba0 0308 	sub.w	r3, r0, r8
 800d32e:	fa09 f303 	lsl.w	r3, r9, r3
 800d332:	4313      	orrs	r3, r2
 800d334:	9304      	str	r3, [sp, #16]
 800d336:	46a2      	mov	sl, r4
 800d338:	e7d2      	b.n	800d2e0 <_svfiprintf_r+0xa0>
 800d33a:	9b03      	ldr	r3, [sp, #12]
 800d33c:	1d19      	adds	r1, r3, #4
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	9103      	str	r1, [sp, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	bfbb      	ittet	lt
 800d346:	425b      	neglt	r3, r3
 800d348:	f042 0202 	orrlt.w	r2, r2, #2
 800d34c:	9307      	strge	r3, [sp, #28]
 800d34e:	9307      	strlt	r3, [sp, #28]
 800d350:	bfb8      	it	lt
 800d352:	9204      	strlt	r2, [sp, #16]
 800d354:	7823      	ldrb	r3, [r4, #0]
 800d356:	2b2e      	cmp	r3, #46	@ 0x2e
 800d358:	d10a      	bne.n	800d370 <_svfiprintf_r+0x130>
 800d35a:	7863      	ldrb	r3, [r4, #1]
 800d35c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d35e:	d132      	bne.n	800d3c6 <_svfiprintf_r+0x186>
 800d360:	9b03      	ldr	r3, [sp, #12]
 800d362:	1d1a      	adds	r2, r3, #4
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	9203      	str	r2, [sp, #12]
 800d368:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d36c:	3402      	adds	r4, #2
 800d36e:	9305      	str	r3, [sp, #20]
 800d370:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d434 <_svfiprintf_r+0x1f4>
 800d374:	7821      	ldrb	r1, [r4, #0]
 800d376:	2203      	movs	r2, #3
 800d378:	4650      	mov	r0, sl
 800d37a:	f7f2 ff31 	bl	80001e0 <memchr>
 800d37e:	b138      	cbz	r0, 800d390 <_svfiprintf_r+0x150>
 800d380:	9b04      	ldr	r3, [sp, #16]
 800d382:	eba0 000a 	sub.w	r0, r0, sl
 800d386:	2240      	movs	r2, #64	@ 0x40
 800d388:	4082      	lsls	r2, r0
 800d38a:	4313      	orrs	r3, r2
 800d38c:	3401      	adds	r4, #1
 800d38e:	9304      	str	r3, [sp, #16]
 800d390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d394:	4824      	ldr	r0, [pc, #144]	@ (800d428 <_svfiprintf_r+0x1e8>)
 800d396:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d39a:	2206      	movs	r2, #6
 800d39c:	f7f2 ff20 	bl	80001e0 <memchr>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d036      	beq.n	800d412 <_svfiprintf_r+0x1d2>
 800d3a4:	4b21      	ldr	r3, [pc, #132]	@ (800d42c <_svfiprintf_r+0x1ec>)
 800d3a6:	bb1b      	cbnz	r3, 800d3f0 <_svfiprintf_r+0x1b0>
 800d3a8:	9b03      	ldr	r3, [sp, #12]
 800d3aa:	3307      	adds	r3, #7
 800d3ac:	f023 0307 	bic.w	r3, r3, #7
 800d3b0:	3308      	adds	r3, #8
 800d3b2:	9303      	str	r3, [sp, #12]
 800d3b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3b6:	4433      	add	r3, r6
 800d3b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3ba:	e76a      	b.n	800d292 <_svfiprintf_r+0x52>
 800d3bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3c0:	460c      	mov	r4, r1
 800d3c2:	2001      	movs	r0, #1
 800d3c4:	e7a8      	b.n	800d318 <_svfiprintf_r+0xd8>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	3401      	adds	r4, #1
 800d3ca:	9305      	str	r3, [sp, #20]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	f04f 0c0a 	mov.w	ip, #10
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3d8:	3a30      	subs	r2, #48	@ 0x30
 800d3da:	2a09      	cmp	r2, #9
 800d3dc:	d903      	bls.n	800d3e6 <_svfiprintf_r+0x1a6>
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d0c6      	beq.n	800d370 <_svfiprintf_r+0x130>
 800d3e2:	9105      	str	r1, [sp, #20]
 800d3e4:	e7c4      	b.n	800d370 <_svfiprintf_r+0x130>
 800d3e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e7f0      	b.n	800d3d2 <_svfiprintf_r+0x192>
 800d3f0:	ab03      	add	r3, sp, #12
 800d3f2:	9300      	str	r3, [sp, #0]
 800d3f4:	462a      	mov	r2, r5
 800d3f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d430 <_svfiprintf_r+0x1f0>)
 800d3f8:	a904      	add	r1, sp, #16
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	f3af 8000 	nop.w
 800d400:	1c42      	adds	r2, r0, #1
 800d402:	4606      	mov	r6, r0
 800d404:	d1d6      	bne.n	800d3b4 <_svfiprintf_r+0x174>
 800d406:	89ab      	ldrh	r3, [r5, #12]
 800d408:	065b      	lsls	r3, r3, #25
 800d40a:	f53f af2d 	bmi.w	800d268 <_svfiprintf_r+0x28>
 800d40e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d410:	e72c      	b.n	800d26c <_svfiprintf_r+0x2c>
 800d412:	ab03      	add	r3, sp, #12
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	462a      	mov	r2, r5
 800d418:	4b05      	ldr	r3, [pc, #20]	@ (800d430 <_svfiprintf_r+0x1f0>)
 800d41a:	a904      	add	r1, sp, #16
 800d41c:	4638      	mov	r0, r7
 800d41e:	f000 f879 	bl	800d514 <_printf_i>
 800d422:	e7ed      	b.n	800d400 <_svfiprintf_r+0x1c0>
 800d424:	0800d9b8 	.word	0x0800d9b8
 800d428:	0800d9c2 	.word	0x0800d9c2
 800d42c:	00000000 	.word	0x00000000
 800d430:	0800d189 	.word	0x0800d189
 800d434:	0800d9be 	.word	0x0800d9be

0800d438 <_printf_common>:
 800d438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d43c:	4616      	mov	r6, r2
 800d43e:	4698      	mov	r8, r3
 800d440:	688a      	ldr	r2, [r1, #8]
 800d442:	690b      	ldr	r3, [r1, #16]
 800d444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d448:	4293      	cmp	r3, r2
 800d44a:	bfb8      	it	lt
 800d44c:	4613      	movlt	r3, r2
 800d44e:	6033      	str	r3, [r6, #0]
 800d450:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d454:	4607      	mov	r7, r0
 800d456:	460c      	mov	r4, r1
 800d458:	b10a      	cbz	r2, 800d45e <_printf_common+0x26>
 800d45a:	3301      	adds	r3, #1
 800d45c:	6033      	str	r3, [r6, #0]
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	0699      	lsls	r1, r3, #26
 800d462:	bf42      	ittt	mi
 800d464:	6833      	ldrmi	r3, [r6, #0]
 800d466:	3302      	addmi	r3, #2
 800d468:	6033      	strmi	r3, [r6, #0]
 800d46a:	6825      	ldr	r5, [r4, #0]
 800d46c:	f015 0506 	ands.w	r5, r5, #6
 800d470:	d106      	bne.n	800d480 <_printf_common+0x48>
 800d472:	f104 0a19 	add.w	sl, r4, #25
 800d476:	68e3      	ldr	r3, [r4, #12]
 800d478:	6832      	ldr	r2, [r6, #0]
 800d47a:	1a9b      	subs	r3, r3, r2
 800d47c:	42ab      	cmp	r3, r5
 800d47e:	dc26      	bgt.n	800d4ce <_printf_common+0x96>
 800d480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d484:	6822      	ldr	r2, [r4, #0]
 800d486:	3b00      	subs	r3, #0
 800d488:	bf18      	it	ne
 800d48a:	2301      	movne	r3, #1
 800d48c:	0692      	lsls	r2, r2, #26
 800d48e:	d42b      	bmi.n	800d4e8 <_printf_common+0xb0>
 800d490:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d494:	4641      	mov	r1, r8
 800d496:	4638      	mov	r0, r7
 800d498:	47c8      	blx	r9
 800d49a:	3001      	adds	r0, #1
 800d49c:	d01e      	beq.n	800d4dc <_printf_common+0xa4>
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	6922      	ldr	r2, [r4, #16]
 800d4a2:	f003 0306 	and.w	r3, r3, #6
 800d4a6:	2b04      	cmp	r3, #4
 800d4a8:	bf02      	ittt	eq
 800d4aa:	68e5      	ldreq	r5, [r4, #12]
 800d4ac:	6833      	ldreq	r3, [r6, #0]
 800d4ae:	1aed      	subeq	r5, r5, r3
 800d4b0:	68a3      	ldr	r3, [r4, #8]
 800d4b2:	bf0c      	ite	eq
 800d4b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4b8:	2500      	movne	r5, #0
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	bfc4      	itt	gt
 800d4be:	1a9b      	subgt	r3, r3, r2
 800d4c0:	18ed      	addgt	r5, r5, r3
 800d4c2:	2600      	movs	r6, #0
 800d4c4:	341a      	adds	r4, #26
 800d4c6:	42b5      	cmp	r5, r6
 800d4c8:	d11a      	bne.n	800d500 <_printf_common+0xc8>
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	e008      	b.n	800d4e0 <_printf_common+0xa8>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	4652      	mov	r2, sl
 800d4d2:	4641      	mov	r1, r8
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	47c8      	blx	r9
 800d4d8:	3001      	adds	r0, #1
 800d4da:	d103      	bne.n	800d4e4 <_printf_common+0xac>
 800d4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e4:	3501      	adds	r5, #1
 800d4e6:	e7c6      	b.n	800d476 <_printf_common+0x3e>
 800d4e8:	18e1      	adds	r1, r4, r3
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	2030      	movs	r0, #48	@ 0x30
 800d4ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4f2:	4422      	add	r2, r4
 800d4f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4fc:	3302      	adds	r3, #2
 800d4fe:	e7c7      	b.n	800d490 <_printf_common+0x58>
 800d500:	2301      	movs	r3, #1
 800d502:	4622      	mov	r2, r4
 800d504:	4641      	mov	r1, r8
 800d506:	4638      	mov	r0, r7
 800d508:	47c8      	blx	r9
 800d50a:	3001      	adds	r0, #1
 800d50c:	d0e6      	beq.n	800d4dc <_printf_common+0xa4>
 800d50e:	3601      	adds	r6, #1
 800d510:	e7d9      	b.n	800d4c6 <_printf_common+0x8e>
	...

0800d514 <_printf_i>:
 800d514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	7e0f      	ldrb	r7, [r1, #24]
 800d51a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d51c:	2f78      	cmp	r7, #120	@ 0x78
 800d51e:	4691      	mov	r9, r2
 800d520:	4680      	mov	r8, r0
 800d522:	460c      	mov	r4, r1
 800d524:	469a      	mov	sl, r3
 800d526:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d52a:	d807      	bhi.n	800d53c <_printf_i+0x28>
 800d52c:	2f62      	cmp	r7, #98	@ 0x62
 800d52e:	d80a      	bhi.n	800d546 <_printf_i+0x32>
 800d530:	2f00      	cmp	r7, #0
 800d532:	f000 80d2 	beq.w	800d6da <_printf_i+0x1c6>
 800d536:	2f58      	cmp	r7, #88	@ 0x58
 800d538:	f000 80b9 	beq.w	800d6ae <_printf_i+0x19a>
 800d53c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d540:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d544:	e03a      	b.n	800d5bc <_printf_i+0xa8>
 800d546:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d54a:	2b15      	cmp	r3, #21
 800d54c:	d8f6      	bhi.n	800d53c <_printf_i+0x28>
 800d54e:	a101      	add	r1, pc, #4	@ (adr r1, 800d554 <_printf_i+0x40>)
 800d550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d554:	0800d5ad 	.word	0x0800d5ad
 800d558:	0800d5c1 	.word	0x0800d5c1
 800d55c:	0800d53d 	.word	0x0800d53d
 800d560:	0800d53d 	.word	0x0800d53d
 800d564:	0800d53d 	.word	0x0800d53d
 800d568:	0800d53d 	.word	0x0800d53d
 800d56c:	0800d5c1 	.word	0x0800d5c1
 800d570:	0800d53d 	.word	0x0800d53d
 800d574:	0800d53d 	.word	0x0800d53d
 800d578:	0800d53d 	.word	0x0800d53d
 800d57c:	0800d53d 	.word	0x0800d53d
 800d580:	0800d6c1 	.word	0x0800d6c1
 800d584:	0800d5eb 	.word	0x0800d5eb
 800d588:	0800d67b 	.word	0x0800d67b
 800d58c:	0800d53d 	.word	0x0800d53d
 800d590:	0800d53d 	.word	0x0800d53d
 800d594:	0800d6e3 	.word	0x0800d6e3
 800d598:	0800d53d 	.word	0x0800d53d
 800d59c:	0800d5eb 	.word	0x0800d5eb
 800d5a0:	0800d53d 	.word	0x0800d53d
 800d5a4:	0800d53d 	.word	0x0800d53d
 800d5a8:	0800d683 	.word	0x0800d683
 800d5ac:	6833      	ldr	r3, [r6, #0]
 800d5ae:	1d1a      	adds	r2, r3, #4
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6032      	str	r2, [r6, #0]
 800d5b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e09d      	b.n	800d6fc <_printf_i+0x1e8>
 800d5c0:	6833      	ldr	r3, [r6, #0]
 800d5c2:	6820      	ldr	r0, [r4, #0]
 800d5c4:	1d19      	adds	r1, r3, #4
 800d5c6:	6031      	str	r1, [r6, #0]
 800d5c8:	0606      	lsls	r6, r0, #24
 800d5ca:	d501      	bpl.n	800d5d0 <_printf_i+0xbc>
 800d5cc:	681d      	ldr	r5, [r3, #0]
 800d5ce:	e003      	b.n	800d5d8 <_printf_i+0xc4>
 800d5d0:	0645      	lsls	r5, r0, #25
 800d5d2:	d5fb      	bpl.n	800d5cc <_printf_i+0xb8>
 800d5d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5d8:	2d00      	cmp	r5, #0
 800d5da:	da03      	bge.n	800d5e4 <_printf_i+0xd0>
 800d5dc:	232d      	movs	r3, #45	@ 0x2d
 800d5de:	426d      	negs	r5, r5
 800d5e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5e4:	4859      	ldr	r0, [pc, #356]	@ (800d74c <_printf_i+0x238>)
 800d5e6:	230a      	movs	r3, #10
 800d5e8:	e011      	b.n	800d60e <_printf_i+0xfa>
 800d5ea:	6821      	ldr	r1, [r4, #0]
 800d5ec:	6833      	ldr	r3, [r6, #0]
 800d5ee:	0608      	lsls	r0, r1, #24
 800d5f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5f4:	d402      	bmi.n	800d5fc <_printf_i+0xe8>
 800d5f6:	0649      	lsls	r1, r1, #25
 800d5f8:	bf48      	it	mi
 800d5fa:	b2ad      	uxthmi	r5, r5
 800d5fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5fe:	4853      	ldr	r0, [pc, #332]	@ (800d74c <_printf_i+0x238>)
 800d600:	6033      	str	r3, [r6, #0]
 800d602:	bf14      	ite	ne
 800d604:	230a      	movne	r3, #10
 800d606:	2308      	moveq	r3, #8
 800d608:	2100      	movs	r1, #0
 800d60a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d60e:	6866      	ldr	r6, [r4, #4]
 800d610:	60a6      	str	r6, [r4, #8]
 800d612:	2e00      	cmp	r6, #0
 800d614:	bfa2      	ittt	ge
 800d616:	6821      	ldrge	r1, [r4, #0]
 800d618:	f021 0104 	bicge.w	r1, r1, #4
 800d61c:	6021      	strge	r1, [r4, #0]
 800d61e:	b90d      	cbnz	r5, 800d624 <_printf_i+0x110>
 800d620:	2e00      	cmp	r6, #0
 800d622:	d04b      	beq.n	800d6bc <_printf_i+0x1a8>
 800d624:	4616      	mov	r6, r2
 800d626:	fbb5 f1f3 	udiv	r1, r5, r3
 800d62a:	fb03 5711 	mls	r7, r3, r1, r5
 800d62e:	5dc7      	ldrb	r7, [r0, r7]
 800d630:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d634:	462f      	mov	r7, r5
 800d636:	42bb      	cmp	r3, r7
 800d638:	460d      	mov	r5, r1
 800d63a:	d9f4      	bls.n	800d626 <_printf_i+0x112>
 800d63c:	2b08      	cmp	r3, #8
 800d63e:	d10b      	bne.n	800d658 <_printf_i+0x144>
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	07df      	lsls	r7, r3, #31
 800d644:	d508      	bpl.n	800d658 <_printf_i+0x144>
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	6861      	ldr	r1, [r4, #4]
 800d64a:	4299      	cmp	r1, r3
 800d64c:	bfde      	ittt	le
 800d64e:	2330      	movle	r3, #48	@ 0x30
 800d650:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d654:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d658:	1b92      	subs	r2, r2, r6
 800d65a:	6122      	str	r2, [r4, #16]
 800d65c:	f8cd a000 	str.w	sl, [sp]
 800d660:	464b      	mov	r3, r9
 800d662:	aa03      	add	r2, sp, #12
 800d664:	4621      	mov	r1, r4
 800d666:	4640      	mov	r0, r8
 800d668:	f7ff fee6 	bl	800d438 <_printf_common>
 800d66c:	3001      	adds	r0, #1
 800d66e:	d14a      	bne.n	800d706 <_printf_i+0x1f2>
 800d670:	f04f 30ff 	mov.w	r0, #4294967295
 800d674:	b004      	add	sp, #16
 800d676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	f043 0320 	orr.w	r3, r3, #32
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	4833      	ldr	r0, [pc, #204]	@ (800d750 <_printf_i+0x23c>)
 800d684:	2778      	movs	r7, #120	@ 0x78
 800d686:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d68a:	6823      	ldr	r3, [r4, #0]
 800d68c:	6831      	ldr	r1, [r6, #0]
 800d68e:	061f      	lsls	r7, r3, #24
 800d690:	f851 5b04 	ldr.w	r5, [r1], #4
 800d694:	d402      	bmi.n	800d69c <_printf_i+0x188>
 800d696:	065f      	lsls	r7, r3, #25
 800d698:	bf48      	it	mi
 800d69a:	b2ad      	uxthmi	r5, r5
 800d69c:	6031      	str	r1, [r6, #0]
 800d69e:	07d9      	lsls	r1, r3, #31
 800d6a0:	bf44      	itt	mi
 800d6a2:	f043 0320 	orrmi.w	r3, r3, #32
 800d6a6:	6023      	strmi	r3, [r4, #0]
 800d6a8:	b11d      	cbz	r5, 800d6b2 <_printf_i+0x19e>
 800d6aa:	2310      	movs	r3, #16
 800d6ac:	e7ac      	b.n	800d608 <_printf_i+0xf4>
 800d6ae:	4827      	ldr	r0, [pc, #156]	@ (800d74c <_printf_i+0x238>)
 800d6b0:	e7e9      	b.n	800d686 <_printf_i+0x172>
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	f023 0320 	bic.w	r3, r3, #32
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	e7f6      	b.n	800d6aa <_printf_i+0x196>
 800d6bc:	4616      	mov	r6, r2
 800d6be:	e7bd      	b.n	800d63c <_printf_i+0x128>
 800d6c0:	6833      	ldr	r3, [r6, #0]
 800d6c2:	6825      	ldr	r5, [r4, #0]
 800d6c4:	6961      	ldr	r1, [r4, #20]
 800d6c6:	1d18      	adds	r0, r3, #4
 800d6c8:	6030      	str	r0, [r6, #0]
 800d6ca:	062e      	lsls	r6, r5, #24
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	d501      	bpl.n	800d6d4 <_printf_i+0x1c0>
 800d6d0:	6019      	str	r1, [r3, #0]
 800d6d2:	e002      	b.n	800d6da <_printf_i+0x1c6>
 800d6d4:	0668      	lsls	r0, r5, #25
 800d6d6:	d5fb      	bpl.n	800d6d0 <_printf_i+0x1bc>
 800d6d8:	8019      	strh	r1, [r3, #0]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	6123      	str	r3, [r4, #16]
 800d6de:	4616      	mov	r6, r2
 800d6e0:	e7bc      	b.n	800d65c <_printf_i+0x148>
 800d6e2:	6833      	ldr	r3, [r6, #0]
 800d6e4:	1d1a      	adds	r2, r3, #4
 800d6e6:	6032      	str	r2, [r6, #0]
 800d6e8:	681e      	ldr	r6, [r3, #0]
 800d6ea:	6862      	ldr	r2, [r4, #4]
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7f2 fd76 	bl	80001e0 <memchr>
 800d6f4:	b108      	cbz	r0, 800d6fa <_printf_i+0x1e6>
 800d6f6:	1b80      	subs	r0, r0, r6
 800d6f8:	6060      	str	r0, [r4, #4]
 800d6fa:	6863      	ldr	r3, [r4, #4]
 800d6fc:	6123      	str	r3, [r4, #16]
 800d6fe:	2300      	movs	r3, #0
 800d700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d704:	e7aa      	b.n	800d65c <_printf_i+0x148>
 800d706:	6923      	ldr	r3, [r4, #16]
 800d708:	4632      	mov	r2, r6
 800d70a:	4649      	mov	r1, r9
 800d70c:	4640      	mov	r0, r8
 800d70e:	47d0      	blx	sl
 800d710:	3001      	adds	r0, #1
 800d712:	d0ad      	beq.n	800d670 <_printf_i+0x15c>
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	079b      	lsls	r3, r3, #30
 800d718:	d413      	bmi.n	800d742 <_printf_i+0x22e>
 800d71a:	68e0      	ldr	r0, [r4, #12]
 800d71c:	9b03      	ldr	r3, [sp, #12]
 800d71e:	4298      	cmp	r0, r3
 800d720:	bfb8      	it	lt
 800d722:	4618      	movlt	r0, r3
 800d724:	e7a6      	b.n	800d674 <_printf_i+0x160>
 800d726:	2301      	movs	r3, #1
 800d728:	4632      	mov	r2, r6
 800d72a:	4649      	mov	r1, r9
 800d72c:	4640      	mov	r0, r8
 800d72e:	47d0      	blx	sl
 800d730:	3001      	adds	r0, #1
 800d732:	d09d      	beq.n	800d670 <_printf_i+0x15c>
 800d734:	3501      	adds	r5, #1
 800d736:	68e3      	ldr	r3, [r4, #12]
 800d738:	9903      	ldr	r1, [sp, #12]
 800d73a:	1a5b      	subs	r3, r3, r1
 800d73c:	42ab      	cmp	r3, r5
 800d73e:	dcf2      	bgt.n	800d726 <_printf_i+0x212>
 800d740:	e7eb      	b.n	800d71a <_printf_i+0x206>
 800d742:	2500      	movs	r5, #0
 800d744:	f104 0619 	add.w	r6, r4, #25
 800d748:	e7f5      	b.n	800d736 <_printf_i+0x222>
 800d74a:	bf00      	nop
 800d74c:	0800d9c9 	.word	0x0800d9c9
 800d750:	0800d9da 	.word	0x0800d9da

0800d754 <memmove>:
 800d754:	4288      	cmp	r0, r1
 800d756:	b510      	push	{r4, lr}
 800d758:	eb01 0402 	add.w	r4, r1, r2
 800d75c:	d902      	bls.n	800d764 <memmove+0x10>
 800d75e:	4284      	cmp	r4, r0
 800d760:	4623      	mov	r3, r4
 800d762:	d807      	bhi.n	800d774 <memmove+0x20>
 800d764:	1e43      	subs	r3, r0, #1
 800d766:	42a1      	cmp	r1, r4
 800d768:	d008      	beq.n	800d77c <memmove+0x28>
 800d76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d76e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d772:	e7f8      	b.n	800d766 <memmove+0x12>
 800d774:	4402      	add	r2, r0
 800d776:	4601      	mov	r1, r0
 800d778:	428a      	cmp	r2, r1
 800d77a:	d100      	bne.n	800d77e <memmove+0x2a>
 800d77c:	bd10      	pop	{r4, pc}
 800d77e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d786:	e7f7      	b.n	800d778 <memmove+0x24>

0800d788 <_realloc_r>:
 800d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d78c:	4680      	mov	r8, r0
 800d78e:	4615      	mov	r5, r2
 800d790:	460c      	mov	r4, r1
 800d792:	b921      	cbnz	r1, 800d79e <_realloc_r+0x16>
 800d794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d798:	4611      	mov	r1, r2
 800d79a:	f7ff bb09 	b.w	800cdb0 <_malloc_r>
 800d79e:	b92a      	cbnz	r2, 800d7ac <_realloc_r+0x24>
 800d7a0:	f7ff fca8 	bl	800d0f4 <_free_r>
 800d7a4:	2400      	movs	r4, #0
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ac:	f000 f81a 	bl	800d7e4 <_malloc_usable_size_r>
 800d7b0:	4285      	cmp	r5, r0
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	d802      	bhi.n	800d7bc <_realloc_r+0x34>
 800d7b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d7ba:	d8f4      	bhi.n	800d7a6 <_realloc_r+0x1e>
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4640      	mov	r0, r8
 800d7c0:	f7ff faf6 	bl	800cdb0 <_malloc_r>
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d0ec      	beq.n	800d7a4 <_realloc_r+0x1c>
 800d7ca:	42b5      	cmp	r5, r6
 800d7cc:	462a      	mov	r2, r5
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	bf28      	it	cs
 800d7d2:	4632      	movcs	r2, r6
 800d7d4:	f7ff fc80 	bl	800d0d8 <memcpy>
 800d7d8:	4621      	mov	r1, r4
 800d7da:	4640      	mov	r0, r8
 800d7dc:	f7ff fc8a 	bl	800d0f4 <_free_r>
 800d7e0:	463c      	mov	r4, r7
 800d7e2:	e7e0      	b.n	800d7a6 <_realloc_r+0x1e>

0800d7e4 <_malloc_usable_size_r>:
 800d7e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7e8:	1f18      	subs	r0, r3, #4
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	bfbc      	itt	lt
 800d7ee:	580b      	ldrlt	r3, [r1, r0]
 800d7f0:	18c0      	addlt	r0, r0, r3
 800d7f2:	4770      	bx	lr

0800d7f4 <_init>:
 800d7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f6:	bf00      	nop
 800d7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7fa:	bc08      	pop	{r3}
 800d7fc:	469e      	mov	lr, r3
 800d7fe:	4770      	bx	lr

0800d800 <_fini>:
 800d800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d802:	bf00      	nop
 800d804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d806:	bc08      	pop	{r3}
 800d808:	469e      	mov	lr, r3
 800d80a:	4770      	bx	lr
